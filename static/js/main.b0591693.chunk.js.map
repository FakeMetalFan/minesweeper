{"version":3,"sources":["components/Cell/Cell.js","components/Field/Field.js","components/Footer/Footer.js","components/Header/Header.js","hooks/use-did-update.js","const/cell-value.js","const/cell-state.js","view-models/cell.js","view-models/internals/cell-address-utils.js","view-models/cell-neighbors-utils.js","components/Indicators/Indicators.js","hooks/use-interval.js","components/Minesweeper/Minesweeper.js","hooks/use-field.js","App.js","setupIcons.js","index.js"],"names":["Cell","memo","state","cellRevealHandler","flagPlantingHandler","neighborsRevealHandler","isHidden","isFlagged","isEmpty","isMined","isIncorrectGuess","isBustedMine","value","className","onClick","onContextMenu","icon","onMouseDown","Field","width","disabled","handleFlagPlanting","event","cell","address","preventDefault","handleNeighborsReveal","target","which","nativeEvent","addEventListener","handleMouseup","removeEventListener","style","gridTemplateColumns","map","key","Footer","href","rel","Date","getFullYear","Header","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","cellValue","cellState","Hidden","Visible","Flagged","CellVM","immerable","this","CellAddressUtils","fieldWidth","_fieldWidth","rowAddress","colAddress","CellNeighborsUtils","fieldHeight","_fieldHeight","_cellAddressUtils","getAddresses","some","addr","isUnrevealedMine","to2DAddresses","addresses","rowAddressOffset","cellAddressOffset","rowAddressWithOffset","colAddressWithOffset","_doesAddressExist","push","to1DAddress","_getCountBy","getMinedCount","propName","reduce","acc","criteria","Indicators","minesCount","smileyFaceClickHandler","shouldStartCountingSeconds","isBust","isVictory","useState","secondsCount","setSecondsCount","intervalDelay","setIntervalDelay","formatCount","count","delay","fnRef","intervalId","setInterval","clearInterval","useInterval","Minesweeper","height","length","emptyField","useMemo","Array","fill","field","setField","cellNeighborsUtils","getFloodFilledField","prevField","draftFn","produce","draft","floodFill","cellAddr","canFloodFill","forEach","getBustedField","isMisplacedFlag","clear","init","difference","range","randomAddresses","Set","size","add","Math","random","revealCell","plantFlag","revealNeighbors","canRevealNeighbors","markMines","useField","remainingMinesCount","setRemainingMinesCount","isInit","setIsInit","setIsBust","setIsVictory","reject","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0591693.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Cell.scss';\r\n\r\nexport const Cell = memo(({ state, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\r\n  const { isHidden, isFlagged, isEmpty, isMined, isIncorrectGuess, isBustedMine, value } = state;\r\n\r\n  if (isHidden) return (<button className='cell' onClick={cellRevealHandler} onContextMenu={flagPlantingHandler} />);\r\n\r\n  if (isFlagged) return (<button className='cell' onContextMenu={flagPlantingHandler}>\r\n    <FontAwesomeIcon icon={['far', 'flag']} />\r\n  </button>);\r\n\r\n  if (isEmpty) return (<button className='cell cell__visible' />);\r\n\r\n  if (isMined || isIncorrectGuess || isBustedMine) return (<button\r\n    className={`cell ${isIncorrectGuess ? 'cell__incorrect-guess' : isBustedMine ? 'cell__busted-mine' : ''}`}\r\n  >\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </button>);\r\n\r\n  return (<button className={`cell cell__visible cell__visible__${value}`} onMouseDown={neighborsRevealHandler}>\r\n    {value}\r\n  </button>);\r\n});\r\n","import React from 'react';\r\n\r\nimport { Cell } from '..';\r\n\r\nimport './Field.scss';\r\n\r\nexport const Field = ({ width, disabled, state, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\r\n  const handleFlagPlanting = (event, cell, address) => {\r\n    event.preventDefault();\r\n\r\n    flagPlantingHandler(cell, address);\r\n  };\r\n\r\n  const handleNeighborsReveal = ({ target, nativeEvent }, address) => {\r\n    const { which } = nativeEvent;\r\n\r\n    const handleMouseup = event => {\r\n      which !== event.which && neighborsRevealHandler(address);\r\n\r\n      target.removeEventListener('mouseup', handleMouseup);\r\n    };\r\n\r\n    target.addEventListener('mouseup', handleMouseup);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`field${disabled ? ' disabled' : ''}`}\r\n      style={{gridTemplateColumns: `repeat(${width}, 1fr)`}}\r\n      onContextMenu={event => {event.preventDefault();}}\r\n    >\r\n      {state.map((cell, address) => <Cell\r\n        key={address}\r\n        state={cell}\r\n        cellRevealHandler={() => {cellRevealHandler(cell, address);}}\r\n        flagPlantingHandler={event => {handleFlagPlanting(event, cell, address);}}\r\n        neighborsRevealHandler={event => {handleNeighborsReveal(event, address);}}\r\n      />)}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => (\r\n  <footer>\r\n    <span>\r\n      Powered by\r\n      <a className='icon' href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n      &copy;<span>{new Date().getFullYear()}</span>\r\n    </span>\r\n  </footer>\r\n);\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => (\r\n  <header>\r\n    <span className='title'>Minesweeper</span>\r\n\r\n    <a className='icon' href='https://github.com/FakeMetalFan/minesweeper' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n  </header>\r\n);\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fn();\r\n    else didMount.current = true;\r\n    // eslint-disable-next-line\r\n  }, deps);\r\n};\r\n","export const cellValue = {\r\n  BustedMine: -3,\r\n  IncorrectGuess: -2,\r\n  Mine: -1,\r\n  Empty: 0,\r\n  One: 1,\r\n  Two: 2,\r\n  Three: 3,\r\n  Four: 4,\r\n  Five: 5,\r\n  Six: 6,\r\n  Seven: 7,\r\n  Eight: 8,\r\n};\r\n","export const cellState = {\r\n  Hidden: 0,\r\n  Visible: 1,\r\n  Flagged: 2,\r\n};\r\n","import { immerable } from 'immer';\r\n\r\nimport { cellValue, cellState } from 'const';\r\n\r\nexport class CellVM {\r\n  [immerable] = true;\r\n\r\n  constructor(\r\n    value = cellValue.Empty,\r\n    state = cellState.Hidden\r\n  ) {\r\n    this.value = value;\r\n    this.state = state;\r\n  }\r\n\r\n  get isMined() {\r\n    return this.value === cellValue.Mine;\r\n  }\r\n\r\n  get isBustedMine() {\r\n    return this.value === cellValue.BustedMine;\r\n  }\r\n\r\n  get isIncorrectGuess() {\r\n    return this.value === cellValue.IncorrectGuess;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.value === cellValue.Empty;\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.state === cellState.Hidden;\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.state === cellState.Flagged;\r\n  }\r\n\r\n  get isMisplacedFlag() {\r\n    return !this.isMined && this.isFlagged;\r\n  }\r\n\r\n  get isUnrevealedMine() {\r\n    return this.isMined && !this.isFlagged;\r\n  }\r\n}\r\n","export class CellAddressUtils {\r\n  constructor(\r\n    fieldWidth\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n  }\r\n\r\n  to2DAddresses(address) {\r\n    const rowAddress = address % this._fieldWidth;\r\n\r\n    return [rowAddress, (address - rowAddress) / this._fieldWidth];\r\n  }\r\n\r\n  to1DAddress(rowAddress, colAddress) {\r\n    return colAddress * this._fieldWidth + rowAddress;\r\n  }\r\n}\r\n","import { CellAddressUtils } from './internals/cell-address-utils';\r\n\r\nexport class CellNeighborsUtils {\r\n  constructor(\r\n    fieldWidth,\r\n    fieldHeight\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n    this._fieldHeight = fieldHeight;\r\n    this._cellAddressUtils = new CellAddressUtils(fieldWidth);\r\n  }\r\n\r\n  canFloodFill(state, address) {\r\n    return !this.getAddresses(address).some(addr => state[addr].isUnrevealedMine);\r\n  }\r\n\r\n  getAddresses(address) {\r\n    const [rowAddress, colAddress] = this._cellAddressUtils.to2DAddresses(address);\r\n    const addresses = [];\r\n\r\n    for (let rowAddressOffset = -1; rowAddressOffset < 2; rowAddressOffset++)\r\n      for (let cellAddressOffset = -1; cellAddressOffset < 2; cellAddressOffset++)\r\n        if (rowAddressOffset || cellAddressOffset) {\r\n          const rowAddressWithOffset = rowAddress + rowAddressOffset;\r\n          const colAddressWithOffset = colAddress + cellAddressOffset;\r\n\r\n          this._doesAddressExist(rowAddressWithOffset, this._fieldWidth)\r\n            && this._doesAddressExist(colAddressWithOffset, this._fieldHeight)\r\n              && addresses.push(this._cellAddressUtils.to1DAddress(rowAddressWithOffset, colAddressWithOffset));\r\n        }\r\n\r\n    return addresses;\r\n  }\r\n\r\n  getMinedCount(state, address) {\r\n    return this._getCountBy(state, address, 'isMined');\r\n  }\r\n\r\n  canRevealNeighbors(state, address) {\r\n    return this.getMinedCount(state, address) === this._getCountBy(state, address, 'isFlagged');\r\n  }\r\n\r\n  _getCountBy(state, address, propName) {\r\n    return this.getAddresses(address).reduce((acc, addr) => state[addr][propName] ? acc + 1 : acc, 0);\r\n  }\r\n\r\n  _doesAddressExist(address, criteria) {\r\n    return -1 < address && address < criteria;\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { useDidUpdate, useInterval } from 'hooks';\r\n\r\nimport './Indicators.scss';\r\n\r\nexport const Indicators = ({ minesCount, smileyFaceClickHandler, shouldStartCountingSeconds, isBust, isVictory }) => {\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n  const [intervalDelay, setIntervalDelay] = useState(null);\r\n\r\n  const formatCount = count => {\r\n    if (count < 1) return '000';\r\n    if (count < 10) return `00${count}`;\r\n    if (count < 100) return `0${count}`;\r\n\r\n    return `${count}`;\r\n  };\r\n\r\n  useDidUpdate(() => {\r\n    shouldStartCountingSeconds && setIntervalDelay(1e3);\r\n  }, shouldStartCountingSeconds);\r\n\r\n  useDidUpdate(() => {\r\n    (isBust || isVictory) && setIntervalDelay(null);\r\n  }, isBust, isVictory);\r\n\r\n  useInterval(() => {\r\n    setSecondsCount(count => count + 1);\r\n  }, intervalDelay);\r\n\r\n  return (\r\n    <div className='indicators'>\r\n      <div className='mines-count'>{formatCount(minesCount)}</div>\r\n      <div className='smiley-face' onClick={() => {\r\n        setIntervalDelay(null);\r\n        setSecondsCount(0);\r\n        smileyFaceClickHandler();\r\n      }}>\r\n        <FontAwesomeIcon icon={['far', isVictory ? 'smile' : isBust ? 'frown' : 'meh']} />\r\n      </div>\r\n      <div className='timer'>{formatCount(secondsCount)}</div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (fn, delay) => {\r\n  const fnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn])\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport reject from 'lodash/reject';\r\nimport some from 'lodash/some';\r\n\r\nimport { useField, useDidUpdate } from 'hooks';\r\n\r\nimport { Field, Indicators } from '..';\r\n\r\nimport './Minesweeper.scss';\r\n\r\nexport const Minesweeper = () => {\r\n  const fieldDimension = 16;\r\n  const minesCount = 30;\r\n\r\n  const {\r\n    field,\r\n    clear,\r\n    init,\r\n    revealCell,\r\n    plantFlag,\r\n    revealNeighbors,\r\n    markMines,\r\n  } = useField({ minesCount, width: fieldDimension, height: fieldDimension });\r\n\r\n  const [remainingMinesCount, setRemainingMinesCount] = useState(minesCount);\r\n\r\n  const [isInit, setIsInit] = useState(false);\r\n  const [isBust, setIsBust] = useState(false);\r\n  const [isVictory, setIsVictory] = useState(false);\r\n\r\n  const handleCellReveal = (cell, address) => {\r\n    if (isInit) revealCell(cell, address);\r\n    else {\r\n      init(address)\r\n      setIsInit(true);\r\n    }\r\n  };\r\n\r\n  const handleFlagPlanting = (cell, address) => {\r\n    plantFlag(cell, address);\r\n    setRemainingMinesCount(remainingMinesCount + (cell.isFlagged ? 1 : -1));\r\n  };\r\n\r\n  const handleSmileyFaceClick = () => {\r\n    clear();\r\n    setRemainingMinesCount(minesCount);\r\n    setIsInit(false);\r\n    setIsBust(false);\r\n    setIsVictory(false);\r\n  };\r\n\r\n  useDidUpdate(() => {\r\n    if (some(field, 'isBustedMine')) setIsBust(true);\r\n    else if (!some(reject(field, 'isMined'), 'isHidden')) {\r\n      markMines();\r\n      setRemainingMinesCount(0);\r\n      setIsVictory(true);\r\n    }\r\n  }, field);\r\n\r\n  return (\r\n    <div className='minesweeper'>\r\n      <Indicators\r\n        minesCount={remainingMinesCount}\r\n        isBust={isBust}\r\n        isVictory={isVictory}\r\n        shouldStartCountingSeconds={isInit}\r\n        smileyFaceClickHandler={handleSmileyFaceClick}\r\n      />\r\n\r\n      <Field\r\n        width={fieldDimension}\r\n        disabled={isBust || isVictory}\r\n        state={field}\r\n        cellRevealHandler={handleCellReveal}\r\n        flagPlantingHandler={handleFlagPlanting}\r\n        neighborsRevealHandler={revealNeighbors}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useMemo } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport difference from 'lodash/difference';\r\nimport range from 'lodash/range';\r\n\r\nimport { cellState, cellValue } from 'const';\r\n\r\nimport { CellVM, CellNeighborsUtils } from 'view-models';\r\n\r\nexport const useField = ({ width, height, minesCount }) => {\r\n  const length = width * height;\r\n\r\n  const emptyField = useMemo(() => Array(length).fill(new CellVM()), [length]);\r\n\r\n  const [field, setField] = useState(emptyField);\r\n\r\n  const cellNeighborsUtils = useMemo(() => new CellNeighborsUtils(width, height), [width, height]);\r\n\r\n  const getFloodFilledField = (prevField, address, draftFn) => produce(prevField, draft => {\r\n    // eslint-disable-next-line\r\n    draftFn?.(draft);\r\n\r\n    draft[address].state = cellState.Visible;\r\n\r\n    const floodFill = cellAddr => {\r\n      cellNeighborsUtils.canFloodFill(draft, cellAddr) && cellNeighborsUtils.getAddresses(cellAddr).forEach(addr => {\r\n        const cell = draft[addr];\r\n        const { isMined, isHidden, isFlagged } = cell;\r\n\r\n        if (!isMined && isHidden && !isFlagged) {\r\n          cell.state = cellState.Visible;\r\n\r\n          floodFill(addr);\r\n        }\r\n      });\r\n    };\r\n\r\n    floodFill(address);\r\n  });\r\n\r\n  const getBustedField = (prevField, draftFn) => produce(prevField, draft => {\r\n    draftFn(draft);\r\n\r\n    draft.forEach((cell, addr) => {\r\n      const { isUnrevealedMine, isMisplacedFlag } = cell;\r\n\r\n      isUnrevealedMine && (cell.state = cellState.Visible);\r\n      isMisplacedFlag && (draft[addr] = new CellVM(cellValue.IncorrectGuess, cellState.Visible));\r\n    });\r\n  });\r\n\r\n  const clear = () => {\r\n    setField(emptyField);\r\n  };\r\n\r\n  const init = address => {\r\n    setField(prevField => getFloodFilledField(prevField, address, draft => {\r\n      const addresses = difference(range(length), [address, ...cellNeighborsUtils.getAddresses(address)]);\r\n      const randomAddresses = new Set();\r\n\r\n      while (randomAddresses.size < minesCount) randomAddresses.add(addresses[Math.random() * addresses.length | 0]);\r\n\r\n      randomAddresses.forEach(addr => {\r\n        draft[addr].value = cellValue.Mine;\r\n      });\r\n\r\n      draft.forEach((cell, addr) => {\r\n        !cell.isMined && (cell.value = cellNeighborsUtils.getMinedCount(draft, addr));\r\n      });\r\n    }));\r\n  };\r\n\r\n  const revealCell = ({ isMined }, address) => {\r\n    setField(prevField => isMined ? getBustedField(prevField, draft => {\r\n      draft[address] = new CellVM(cellValue.BustedMine, cellState.Visible);\r\n    }) : getFloodFilledField(prevField, address));\r\n  };\r\n\r\n  const plantFlag = ({ isFlagged }, address) => {\r\n    setField(prevField => produce(prevField, draft => {\r\n      draft[address].state = cellState[isFlagged ? 'Hidden' : 'Flagged'];\r\n    }));\r\n  };\r\n\r\n  const revealNeighbors = address => {\r\n    setField(prevField => {\r\n      if (cellNeighborsUtils.canFloodFill(prevField, address)) return getFloodFilledField(prevField, address);\r\n\r\n      if (cellNeighborsUtils.canRevealNeighbors(prevField, address)) return getBustedField(prevField, draft => {\r\n        cellNeighborsUtils.getAddresses(address).forEach(addr => {\r\n          const cell = draft[addr];\r\n          const { isUnrevealedMine, isMisplacedFlag } = cell;\r\n\r\n          isUnrevealedMine && (cell.value = cellValue.BustedMine);\r\n          isMisplacedFlag && (cell.value = cellValue.IncorrectGuess);\r\n\r\n          cell.state = cellState.Visible;\r\n        });\r\n      });\r\n\r\n      return prevField;\r\n    });\r\n  };\r\n\r\n  const markMines = () => {\r\n    setField(prevField => produce(prevField, draft => {\r\n      draft.forEach(cell => {\r\n        cell.isMined && (cell.state = cellState.Flagged);\r\n      });\r\n    }));\r\n  };\r\n\r\n  return { field, clear, init, revealCell, plantFlag, revealNeighbors, markMines };\r\n};\r\n","import React from 'react';\r\n\r\nimport { Header, Minesweeper, Footer } from 'components';\r\n\r\nexport const App = () => (\r\n  <>\r\n    <Header />\r\n    <Minesweeper />\r\n    <Footer />\r\n  </>\r\n);\r\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { faFlag, faMeh, faFrown, faSmile } from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import React, { StrictMode }  from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport { App } from 'App';\r\n\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nimport './index.scss';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}