{"version":3,"sources":["components/Cell/Cell.js","components/Field/Field.js","components/Footer/Footer.js","components/Header/Header.js","hooks/use-did-update.js","const/cell-value.js","const/cell-state.js","view-models/cell.js","view-models/cell-address-utils.js","view-models/cell-neighbors-utils.js","components/Indicators/Indicators.js","hooks/use-interval.js","components/Minesweeper/Minesweeper.js","hooks/use-field.js","App.js","setupIcons.js","index.js"],"names":["Cell","memo","state","cellRevealHandler","flagPlantingHandler","neighborsRevealHandler","isHidden","hasFlag","isEmpty","hasMine","hasGuessedIncorrectly","hasBustedMine","value","className","onClick","onContextMenu","icon","onMouseDown","Field","width","disabled","handleNeighborsReveal","address","target","which","nativeEvent","addEventListener","handleMouseup","event","removeEventListener","style","gridTemplateColumns","preventDefault","map","cell","key","Footer","href","rel","Date","getFullYear","Header","useDidUpdate","fn","fnRef","useRef","didMount","useEffect","current","deps","cellValue","cellState","Hidden","Visible","Flagged","CellVM","immerable","this","CellAddressUtils","fieldWidth","_fieldWidth","rowAddress","colAddress","CellNeighborsUtils","fieldHeight","_fieldHeight","_cellAddressUtils","getAddresses","some","adr","hasUnrevealedMine","to2DAddresses","addresses","rowAddressOffset","colAddressOffset","rowAddressAhead","colAddressAhead","_doesAddressExist","push","to1DAddress","_getCountBy","getMinedCount","propName","reduce","ac","criteria","Indicators","minesCount","smileyFaceClickHandler","shouldStartCountingSeconds","isBust","isVictory","useState","secondsCount","setSecondsCount","isCountingSeconds","setIsCountingSeconds","formatCount","count","delay","intervalId","setInterval","clearInterval","useInterval","Minesweeper","fieldDimension","height","length","emptyState","useMemo","Array","fill","cellNeighborsUtils","setState","getFloodFilledState","prevState","draftFn","produce","draft","floodFill","cellAdr","canFloodFill","forEach","getBustedState","hasMisplacedFlag","reset","init","difference","range","randomAddresses","Set","size","add","Math","random","revealCell","plantFlag","revealNeighbors","canRevealNeighbors","markMines","useField","fieldState","initialState","remainingMinesCount","isInit","reject","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf520caa.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Cell.scss';\r\n\r\nexport const Cell = memo(({ state, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\r\n  const { isHidden, hasFlag, isEmpty, hasMine, hasGuessedIncorrectly, hasBustedMine, value } = state;\r\n\r\n  if (isHidden) return <div className='cell' onClick={cellRevealHandler} onContextMenu={flagPlantingHandler} />;\r\n\r\n  if (hasFlag) return <div className='cell' onContextMenu={flagPlantingHandler}>\r\n    <FontAwesomeIcon icon={['far', 'flag']} />\r\n  </div>;\r\n\r\n  if (isEmpty) return <div className='cell cell__visible' />;\r\n\r\n  if (hasMine || hasGuessedIncorrectly || hasBustedMine) return <div\r\n    className={`cell ${hasGuessedIncorrectly ? 'cell__incorrect-guess' : hasBustedMine ? 'cell__busted-mine' : ''}`}\r\n  >\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </div>;\r\n\r\n  return <div className={`cell cell__visible cell__visible__${value}`} onMouseDown={neighborsRevealHandler}>\r\n    {value}\r\n  </div>;\r\n});\r\n","import React from 'react';\r\n\r\nimport { Cell } from '..';\r\n\r\nimport './Field.scss';\r\n\r\nexport const Field = ({ width, disabled, state, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\r\n  const handleNeighborsReveal = ({ target, nativeEvent: { which } }, address) => {\r\n    if (!disabled) {\r\n      const handleMouseup = event => {\r\n        which !== event.which && neighborsRevealHandler(address);\r\n\r\n        target.removeEventListener('mouseup', handleMouseup);\r\n      };\r\n\r\n      target.addEventListener('mouseup', handleMouseup);\r\n    }\r\n  };\r\n\r\n  return <div\r\n    className={`field${disabled ? ' disabled' : ''}`}\r\n    style={{gridTemplateColumns: `repeat(${width}, 1fr)`}}\r\n    onContextMenu={event => { event.preventDefault(); }}\r\n  >\r\n    {state.map((cell, address) => <Cell\r\n      key={address}\r\n      state={cell}\r\n      cellRevealHandler={() => { !disabled && cellRevealHandler(cell, address); }}\r\n      flagPlantingHandler={() => { !disabled && flagPlantingHandler(cell, address); }}\r\n      neighborsRevealHandler={event => { handleNeighborsReveal(event, address); }}\r\n    />)}\r\n  </div>;\r\n};\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => <footer>\r\n  <span>\r\n    Powered by\r\n    <a href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n    &copy;<span>{new Date().getFullYear()}</span>\r\n  </span>\r\n</footer>;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => <header>\r\n  <span className='title'>Minesweeper</span>\r\n\r\n  <a href='https://github.com/FakeMetalFan/minesweeper' target='_blank' rel='noopener noreferrer'>\r\n    <FontAwesomeIcon icon={['fab', 'github']} />\r\n  </a>\r\n</header>;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const fnRef = useRef();\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn]);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fnRef.current();\r\n    else didMount.current = true;\r\n  }, deps);\r\n};\r\n","export const cellValue = {\r\n  BustedMine: -3,\r\n  IncorrectGuess: -2,\r\n  Mine: -1,\r\n  Empty: 0,\r\n  One: 1,\r\n  Two: 2,\r\n  Three: 3,\r\n  Four: 4,\r\n  Five: 5,\r\n  Six: 6,\r\n  Seven: 7,\r\n  Eight: 8,\r\n};\r\n","export const cellState = {\r\n  Hidden: 0,\r\n  Visible: 1,\r\n  Flagged: 2,\r\n};\r\n","import { immerable } from 'immer';\r\n\r\nimport { cellValue, cellState } from 'const';\r\n\r\nexport class CellVM {\r\n  [immerable] = true;\r\n\r\n  value;\r\n  state;\r\n\r\n  constructor(\r\n    value = cellValue.Empty,\r\n    state = cellState.Hidden\r\n  ) {\r\n    this.value = value;\r\n    this.state = state;\r\n  }\r\n\r\n  get hasMine() {\r\n    return this.value === cellValue.Mine;\r\n  }\r\n\r\n  get hasBustedMine() {\r\n    return this.value === cellValue.BustedMine;\r\n  }\r\n\r\n  get hasGuessedIncorrectly() {\r\n    return this.value === cellValue.IncorrectGuess;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.value === cellValue.Empty;\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.state === cellState.Hidden;\r\n  }\r\n\r\n  get hasFlag() {\r\n    return this.state === cellState.Flagged;\r\n  }\r\n\r\n  get hasMisplacedFlag() {\r\n    return !this.hasMine && this.hasFlag;\r\n  }\r\n\r\n  get hasUnrevealedMine() {\r\n    return this.hasMine && !this.hasFlag;\r\n  }\r\n}\r\n","export class CellAddressUtils {\r\n  _fieldWidth;\r\n\r\n  constructor(\r\n    fieldWidth\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n  }\r\n\r\n  to2DAddresses(address) {\r\n    const rowAddress = address % this._fieldWidth;\r\n\r\n    return [rowAddress, (address - rowAddress) / this._fieldWidth];\r\n  }\r\n\r\n  to1DAddress(rowAddress, colAddress) {\r\n    return colAddress * this._fieldWidth + rowAddress;\r\n  }\r\n}\r\n","import { CellAddressUtils } from './cell-address-utils';\r\n\r\nexport class CellNeighborsUtils {\r\n  _fieldWidth;\r\n  _fieldHeight;\r\n  _cellAddressUtils;\r\n\r\n  constructor(\r\n    fieldWidth,\r\n    fieldHeight\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n    this._fieldHeight = fieldHeight;\r\n    this._cellAddressUtils = new CellAddressUtils(fieldWidth);\r\n  }\r\n\r\n  canFloodFill(state, address) {\r\n    return !this.getAddresses(address).some(adr => state[adr].hasUnrevealedMine);\r\n  }\r\n\r\n  getAddresses(address) {\r\n    const [rowAddress, colAddress] = this._cellAddressUtils.to2DAddresses(address);\r\n    const addresses = [];\r\n\r\n    for (let rowAddressOffset = -1; rowAddressOffset < 2; rowAddressOffset++)\r\n      for (let colAddressOffset = -1; colAddressOffset < 2; colAddressOffset++)\r\n        if (rowAddressOffset || colAddressOffset) {\r\n          const rowAddressAhead = rowAddress + rowAddressOffset;\r\n          const colAddressAhead = colAddress + colAddressOffset;\r\n\r\n          this._doesAddressExist(rowAddressAhead, this._fieldWidth)\r\n            && this._doesAddressExist(colAddressAhead, this._fieldHeight)\r\n              && addresses.push(this._cellAddressUtils.to1DAddress(rowAddressAhead, colAddressAhead));\r\n        }\r\n\r\n    return addresses;\r\n  }\r\n\r\n  getMinedCount(state, address) {\r\n    return this._getCountBy(state, address, 'hasMine');\r\n  }\r\n\r\n  canRevealNeighbors(state, address) {\r\n    return this.getMinedCount(state, address) === this._getCountBy(state, address, 'hasFlag');\r\n  }\r\n\r\n  _getCountBy(state, address, propName) {\r\n    return this.getAddresses(address).reduce((ac, adr) => state[adr][propName] ? ac + 1 : ac, 0);\r\n  }\r\n\r\n  _doesAddressExist(address, criteria) {\r\n    return -1 < address && address < criteria;\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { useDidUpdate, useInterval } from 'hooks';\r\n\r\nimport './Indicators.scss';\r\n\r\nexport const Indicators = ({ minesCount, smileyFaceClickHandler, shouldStartCountingSeconds, isBust, isVictory }) => {\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n  const [isCountingSeconds, setIsCountingSeconds] = useState(false);\r\n\r\n  const formatCount = count => {\r\n    if (count < 1) return '000';\r\n    if (count < 10) return `00${count}`;\r\n    if (count < 100) return `0${count}`;\r\n\r\n    return `${count}`;\r\n  };\r\n\r\n  const handleSmileyFaceClick = () => {\r\n    setIsCountingSeconds(false);\r\n    setSecondsCount(0);\r\n    smileyFaceClickHandler();\r\n  };\r\n\r\n  useDidUpdate(() => {\r\n    shouldStartCountingSeconds && setIsCountingSeconds(true);\r\n  }, shouldStartCountingSeconds);\r\n\r\n  useDidUpdate(() => {\r\n    (isBust || isVictory) && setIsCountingSeconds(false);\r\n  }, isBust, isVictory);\r\n\r\n  useInterval(() => {\r\n    setSecondsCount(secondsCount + 1);\r\n  }, isCountingSeconds ? 1e3 : null);\r\n\r\n  return <div className='indicators'>\r\n    <div className='mines-count'>{formatCount(minesCount)}</div>\r\n    <div className='smiley-face' onClick={handleSmileyFaceClick}>\r\n      <FontAwesomeIcon icon={['far', isVictory ? 'smile' : isBust ? 'frown' : 'meh']} />\r\n    </div>\r\n    <div className='timer'>{formatCount(secondsCount)}</div>\r\n  </div>;\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (fn, delay) => {\r\n  const fnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn])\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport reject from 'lodash/reject';\r\nimport some from 'lodash/some';\r\n\r\nimport { useField, useDidUpdate } from 'hooks';\r\n\r\nimport { Field, Indicators } from '..';\r\n\r\nimport './Minesweeper.scss';\r\n\r\nexport const Minesweeper = ({ minesCount, fieldDimension }) => {\r\n  const {\r\n    state: fieldState,\r\n    reset,\r\n    init,\r\n    revealCell,\r\n    plantFlag,\r\n    revealNeighbors,\r\n    markMines,\r\n  } = useField({ minesCount, width: fieldDimension, height: fieldDimension });\r\n\r\n  const initialState = { remainingMinesCount: minesCount, isInit: false, isBust: false, isVictory: false };\r\n\r\n  const [state, setState] = useState(initialState);\r\n\r\n  const { remainingMinesCount, isInit, isBust, isVictory } = state;\r\n\r\n  const handleCellReveal = (cell, address) => {\r\n    if (isInit) revealCell(cell, address);\r\n    else {\r\n      init(address)\r\n      setState({ ...state, isInit: true });\r\n    }\r\n  };\r\n\r\n  const handleFlagPlanting = (cell, address) => {\r\n    plantFlag(cell, address);\r\n    setState({ ...state, remainingMinesCount: remainingMinesCount + (cell.hasFlag ? 1 : -1) });\r\n  };\r\n\r\n  const handleSmileyFaceClick = () => {\r\n    reset();\r\n    setState({ ...initialState });\r\n  };\r\n\r\n  useDidUpdate(() => {\r\n    if (some(fieldState, 'hasBustedMine')) setState({ ...state, isBust: true });\r\n    else if (!some(reject(fieldState, 'hasMine'), 'isHidden')) {\r\n      markMines();\r\n      setState({ ...state, remainingMinesCount: 0, isVictory: true });\r\n    }\r\n  }, fieldState);\r\n\r\n  return <div className='minesweeper'>\r\n    <Indicators\r\n      minesCount={remainingMinesCount}\r\n      isBust={isBust}\r\n      isVictory={isVictory}\r\n      shouldStartCountingSeconds={isInit}\r\n      smileyFaceClickHandler={handleSmileyFaceClick}\r\n    />\r\n\r\n    <Field\r\n      width={fieldDimension}\r\n      disabled={isBust || isVictory}\r\n      state={fieldState}\r\n      cellRevealHandler={handleCellReveal}\r\n      flagPlantingHandler={handleFlagPlanting}\r\n      neighborsRevealHandler={revealNeighbors}\r\n    />\r\n  </div>;\r\n};\r\n","import { useState, useMemo } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport difference from 'lodash/difference';\r\nimport range from 'lodash/range';\r\n\r\nimport { cellState, cellValue } from 'const';\r\n\r\nimport { CellVM, CellNeighborsUtils } from 'view-models';\r\n\r\nexport const useField = ({ width, height, minesCount }) => {\r\n  const length = width * height;\r\n\r\n  const emptyState = useMemo(() => Array(length).fill(new CellVM), [length]);\r\n  const cellNeighborsUtils = new CellNeighborsUtils(width, height);\r\n\r\n  const [state, setState] = useState(emptyState);\r\n\r\n  const getFloodFilledState = (prevState, address, draftFn) => produce(prevState, draft => {\r\n    /* eslint-disable-line */ draftFn?.(draft);\r\n\r\n    draft[address].state = cellState.Visible;\r\n\r\n    const floodFill = cellAdr => {\r\n      cellNeighborsUtils.canFloodFill(draft, cellAdr) && cellNeighborsUtils.getAddresses(cellAdr).forEach(adr => {\r\n        const cell = draft[adr];\r\n        const { hasMine, isHidden, hasFlag } = cell;\r\n\r\n        if (!hasMine && isHidden && !hasFlag) {\r\n          cell.state = cellState.Visible;\r\n\r\n          floodFill(adr);\r\n        }\r\n      });\r\n    };\r\n\r\n    floodFill(address);\r\n  });\r\n\r\n  const getBustedState = (prevState, draftFn) => produce(prevState, draft => {\r\n    draftFn(draft);\r\n\r\n    draft.forEach((cell, adr) => {\r\n      const { hasUnrevealedMine, hasMisplacedFlag } = cell;\r\n\r\n      hasUnrevealedMine && (cell.state = cellState.Visible);\r\n      hasMisplacedFlag && (draft[adr] = new CellVM(cellValue.IncorrectGuess, cellState.Visible));\r\n    });\r\n  });\r\n\r\n  const reset = () => {\r\n    setState(emptyState);\r\n  };\r\n\r\n  const init = address => {\r\n    setState(getFloodFilledState(state, address, draft => {\r\n      const addresses = difference(range(length), [address, ...cellNeighborsUtils.getAddresses(address)]);\r\n      const randomAddresses = new Set;\r\n\r\n      while (randomAddresses.size < minesCount) randomAddresses.add(addresses[Math.random() * addresses.length | 0]);\r\n\r\n      randomAddresses.forEach(adr => {\r\n        draft[adr].value = cellValue.Mine;\r\n      });\r\n\r\n      draft.forEach((cell, adr) => {\r\n        !cell.hasMine && (cell.value = cellNeighborsUtils.getMinedCount(draft, adr));\r\n      });\r\n    }));\r\n  };\r\n\r\n  const revealCell = ({ hasMine }, address) => {\r\n    setState(hasMine ? getBustedState(state, draft => {\r\n      draft[address] = new CellVM(cellValue.BustedMine, cellState.Visible);\r\n    }) : getFloodFilledState(state, address));\r\n  };\r\n\r\n  const plantFlag = ({ hasFlag }, address) => {\r\n    setState(produce(state, draft => {\r\n      draft[address].state = cellState[hasFlag ? 'Hidden' : 'Flagged'];\r\n    }));\r\n  };\r\n\r\n  const revealNeighbors = address => {\r\n    setState(() => {\r\n      if (cellNeighborsUtils.canFloodFill(state, address)) return getFloodFilledState(state, address);\r\n\r\n      if (cellNeighborsUtils.canRevealNeighbors(state, address)) return getBustedState(state, draft => {\r\n        cellNeighborsUtils.getAddresses(address).forEach(adr => {\r\n          const cell = draft[adr];\r\n          const { hasUnrevealedMine, hasMisplacedFlag } = cell;\r\n\r\n          hasUnrevealedMine && (cell.value = cellValue.BustedMine);\r\n          hasMisplacedFlag && (cell.value = cellValue.IncorrectGuess);\r\n\r\n          cell.state = cellState.Visible;\r\n        });\r\n      });\r\n\r\n      return state;\r\n    });\r\n  };\r\n\r\n  const markMines = () => {\r\n    setState(produce(state, draft => {\r\n      draft.forEach(cell => {\r\n        cell.hasMine && (cell.state = cellState.Flagged);\r\n      });\r\n    }));\r\n  };\r\n\r\n  return { state, reset, init, revealCell, plantFlag, revealNeighbors, markMines };\r\n};\r\n","import React from 'react';\r\n\r\nimport { Header, Minesweeper, Footer } from 'components';\r\n\r\nexport const App = () => <>\r\n  <Header />\r\n  <Minesweeper minesCount={30} fieldDimension={16} />\r\n  <Footer />\r\n</>;\r\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { faFlag, faMeh, faFrown, faSmile } from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import React, { StrictMode }  from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport { App } from 'App';\r\n\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nimport 'index.scss';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}