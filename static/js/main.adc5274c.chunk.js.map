{"version":3,"sources":["components/CellFactory/CellFactory.js","components/Field/Field.js","components/Footer/Footer.js","components/Header/Header.js","hooks/use-did-update.js","const/cell-value.js","const/cell-state.js","utils/internals/cell-address-utils.js","utils/cell-neighbors-utils.js","utils/count-formatter.js","vm/cell.js","components/Indicators/Indicators.js","components/Minesweeper/Minesweeper.js","hooks/use-field.js","App.js","setupIcons.js","index.js"],"names":["CellFactory","state","cellRevealHandler","flagPlantingHandler","neighborsRevealHandler","isHidden","isFlagged","isEmpty","isMined","isIncorrectGuess","isBustedMine","value","className","onClick","onContextMenu","icon","onMouseDown","Field","columnsCount","disabled","style","gridTemplateColumns","event","preventDefault","map","cell","address","key","target","which","nativeEvent","addEventListener","mouseupHandler","removeEventListener","Footer","href","rel","Date","getFullYear","Header","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","cellValue","cellState","Hidden","Visible","Flagged","CellAddressUtils","fieldWidth","this","_fieldWidth","rowAddress","cellAddress","CellNeighborsUtils","fieldHeight","_fieldHeight","_cellAddressUtils","getAddresses","some","addr","isUnrevealedMine","to2DAddresses","addresses","rowAddressOffset","cellAddressOffset","rowAddressWithOffset","cellAddressWithOffset","_doesAddressExist","push","to1DAddress","_getCountBy","getMinedCount","propName","reduce","acc","criteria","formatCount","count","Cell","immerable","Indicators","minesCount","smileyFaceClickHandler","shouldStartCountingSeconds","isBust","isVictory","useState","secondsCount","setSecondsCount","intervalId","setInterval","clearInterval","Minesweeper","width","height","length","getEmptyState","useCallback","Array","fill","setState","cellNeighborsUtils","useMemo","getFloodFilledState","prevState","draftFn","produce","draft","floodFill","cellAddr","canFloodFill","forEach","getBustedState","isMisplacedFlag","clear","init","difference","range","randomAddresses","Set","size","add","Math","random","revealCell","plantFlag","revealNeighbors","canRevealNeighbors","cloneDeep","markMines","useField","field","clearField","initField","remainingMinesCount","setRemainingMinesCount","isInit","setIsInit","setIsBust","setIsVictory","reject","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.adc5274c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './CellFactory.scss';\r\n\r\nexport const CellFactory = ({ state, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\r\n  const { isHidden, isFlagged, isEmpty, isMined, isIncorrectGuess, isBustedMine, value } = state;\r\n\r\n  if (isHidden) return (<button className='cell' onClick={cellRevealHandler} onContextMenu={flagPlantingHandler} />);\r\n\r\n  if (isFlagged) return (<button className='cell' onContextMenu={flagPlantingHandler}>\r\n    <FontAwesomeIcon icon={['far', 'flag']} />\r\n  </button>);\r\n\r\n  if (isEmpty) return (<button className='cell cell__visible' />);\r\n\r\n  if (isMined || isIncorrectGuess || isBustedMine) return (<button\r\n    className={`cell ${isIncorrectGuess ? 'cell__incorrect-guess' : isBustedMine ? 'cell__busted-mine' : ''}`}\r\n  >\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </button>);\r\n\r\n  return (<button className={`cell cell__visible cell__visible__${value}`} onMouseDown={neighborsRevealHandler}>\r\n    {value}\r\n  </button>);\r\n};\r\n","import React from 'react';\r\n\r\nimport { CellFactory } from '..';\r\n\r\nimport './Field.scss';\r\n\r\nexport const Field = ({\r\n  columnsCount,\r\n  disabled,\r\n  state,\r\n  cellRevealHandler,\r\n  flagPlantingHandler,\r\n  neighborsRevealHandler,\r\n}) => (\r\n  <div\r\n    className={`field${disabled ? ' disabled' : ''}`}\r\n    style={{gridTemplateColumns: `repeat(${columnsCount}, 1fr)`}}\r\n    onContextMenu={event => {event.preventDefault();}}\r\n  >\r\n    {state.map((cell, address) => <CellFactory\r\n      key={address}\r\n      state={cell}\r\n      cellRevealHandler={() => {cellRevealHandler(cell, address);}}\r\n      flagPlantingHandler={event => {\r\n        event.preventDefault();\r\n\r\n        flagPlantingHandler(cell, address);\r\n      }}\r\n      neighborsRevealHandler={({ target, nativeEvent }) => {\r\n        const { which } = nativeEvent;\r\n\r\n        const mouseupHandler = event => {\r\n          which !== event.which && neighborsRevealHandler(address);\r\n\r\n          target.removeEventListener('mouseup', mouseupHandler);\r\n        };\r\n\r\n        target.addEventListener('mouseup', mouseupHandler);\r\n      }}\r\n    />)}\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => (\r\n  <footer>\r\n    <span>\r\n      Powered by\r\n      <a className='icon' href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n      &copy;<span>{new Date().getFullYear()}</span>\r\n    </span>\r\n  </footer>\r\n);\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => (\r\n  <header>\r\n    <span className='title'>Minesweeper</span>\r\n\r\n    <a className='icon' href='https://github.com/FakeMetalFan/minesweeper' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n  </header>\r\n);\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fn();\r\n    else didMount.current = true;\r\n    // eslint-disable-next-line\r\n  }, deps);\r\n};\r\n","export const cellValue = {\r\n  BustedMine: -3,\r\n  IncorrectGuess: -2,\r\n  Mine: -1,\r\n  Empty: 0,\r\n  One: 1,\r\n  Two: 2,\r\n  Three: 3,\r\n  Four: 4,\r\n  Five: 5,\r\n  Six: 6,\r\n  Seven: 7,\r\n  Eight: 8,\r\n};\r\n","export const cellState = {\r\n  Hidden: 0,\r\n  Visible: 1,\r\n  Flagged: 2,\r\n};\r\n","export class CellAddressUtils {\r\n  constructor(\r\n    fieldWidth\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n  }\r\n\r\n  to2DAddresses(address) {\r\n    const rowAddress = address % this._fieldWidth;\r\n\r\n    return [rowAddress, (address - rowAddress) / this._fieldWidth];\r\n  }\r\n\r\n  to1DAddress(rowAddress, cellAddress) {\r\n    return cellAddress * this._fieldWidth + rowAddress;\r\n  }\r\n}\r\n","import { CellAddressUtils } from './internals/cell-address-utils';\r\n\r\nexport class CellNeighborsUtils {\r\n  constructor(\r\n    fieldWidth,\r\n    fieldHeight\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n    this._fieldHeight = fieldHeight;\r\n    this._cellAddressUtils = new CellAddressUtils(fieldWidth);\r\n  }\r\n\r\n  canFloodFill(state, address) {\r\n    return !this.getAddresses(address).some(addr => state[addr].isUnrevealedMine);\r\n  }\r\n\r\n  getAddresses(address) {\r\n    const [rowAddress, cellAddress] = this._cellAddressUtils.to2DAddresses(address);\r\n    const addresses = [];\r\n\r\n    for (let rowAddressOffset = -1; rowAddressOffset < 2; rowAddressOffset++)\r\n      for (let cellAddressOffset = -1; cellAddressOffset < 2; cellAddressOffset++)\r\n        if (rowAddressOffset || cellAddressOffset) {\r\n          const rowAddressWithOffset = rowAddress + rowAddressOffset;\r\n          const cellAddressWithOffset = cellAddress + cellAddressOffset;\r\n\r\n          this._doesAddressExist(rowAddressWithOffset, this._fieldWidth)\r\n            && this._doesAddressExist(cellAddressWithOffset, this._fieldHeight)\r\n              && addresses.push(this._cellAddressUtils.to1DAddress(rowAddressWithOffset, cellAddressWithOffset));\r\n        }\r\n\r\n    return addresses;\r\n  }\r\n\r\n  getMinedCount(state, address) {\r\n    return this._getCountBy(state, address, 'isMined');\r\n  }\r\n\r\n  canRevealNeighbors(state, address) {\r\n    return this.getMinedCount(state, address) === this._getCountBy(state, address, 'isFlagged');\r\n  }\r\n\r\n  _getCountBy(state, address, propName) {\r\n    return this.getAddresses(address).reduce((acc, addr) => state[addr][propName] ? acc + 1 : acc, 0);\r\n  }\r\n\r\n  _doesAddressExist(address, criteria) {\r\n    return -1 < address && address < criteria;\r\n  }\r\n}\r\n","export const formatCount = count => {\r\n  if (count < 1) return '000';\r\n  if (count < 10) return `00${count}`;\r\n  if (count < 100) return `0${count}`;\r\n\r\n  return `${count}`;\r\n};\r\n","import { immerable } from 'immer';\r\n\r\nimport { cellValue, cellState } from 'const';\r\n\r\nexport class Cell {\r\n  [immerable] = true;\r\n\r\n  constructor(\r\n    value = cellValue.Empty,\r\n    state = cellState.Hidden\r\n  ) {\r\n    this.value = value;\r\n    this.state = state;\r\n  }\r\n\r\n  get isMined() {\r\n    return this.value === cellValue.Mine;\r\n  }\r\n\r\n  get isBustedMine() {\r\n    return this.value === cellValue.BustedMine;\r\n  }\r\n\r\n  get isIncorrectGuess() {\r\n    return this.value === cellValue.IncorrectGuess;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.value === cellValue.Empty;\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.state === cellState.Hidden;\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.state === cellState.Flagged;\r\n  }\r\n\r\n  get isMisplacedFlag() {\r\n    return !this.isMined && this.isFlagged;\r\n  }\r\n\r\n  get isUnrevealedMine() {\r\n    return this.isMined && !this.isFlagged;\r\n  }\r\n}\r\n","import React, { useRef, useState } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { useDidUpdate } from 'hooks';\r\n\r\nimport { formatCount } from 'utils';\r\n\r\nimport './Indicators.scss';\r\n\r\nexport const Indicators = ({ minesCount, smileyFaceClickHandler, shouldStartCountingSeconds, isBust, isVictory }) => {\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n  const intervalId = useRef();\r\n\r\n  useDidUpdate(() => {\r\n    shouldStartCountingSeconds && (intervalId.current = setInterval(() => {\r\n      setSecondsCount(count => count + 1);\r\n    }, 1e3));\r\n  }, shouldStartCountingSeconds);\r\n\r\n  useDidUpdate(() => {\r\n    (isBust || isVictory) && clearInterval(intervalId.current);\r\n  }, isBust, isVictory);\r\n\r\n  return (\r\n    <div className='indicators'>\r\n      <div className='mines-count'>{formatCount(minesCount)}</div>\r\n      <div className='smiley-face' onClick={() => {\r\n        clearInterval(intervalId.current);\r\n        setSecondsCount(0);\r\n        smileyFaceClickHandler();\r\n      }}>\r\n        <FontAwesomeIcon icon={['far', isVictory ? 'smile' : isBust ? 'frown' : 'meh']} />\r\n      </div>\r\n      <div className='timer'>{formatCount(secondsCount)}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport reject from 'lodash/reject';\r\nimport some from 'lodash/some';\r\n\r\nimport { useField, useDidUpdate } from 'hooks';\r\n\r\nimport { Field, Indicators } from '..';\r\n\r\nimport './Minesweeper.scss';\r\n\r\nexport const Minesweeper = () => {\r\n  const fieldDimension = 16;\r\n  const minesCount = 30;\r\n\r\n  const {\r\n    state: field,\r\n    clear: clearField,\r\n    init: initField,\r\n    revealCell,\r\n    plantFlag,\r\n    revealNeighbors,\r\n    markMines,\r\n  } = useField({ minesCount, width: fieldDimension, height: fieldDimension });\r\n\r\n  const [remainingMinesCount, setRemainingMinesCount] = useState(minesCount);\r\n\r\n  const [isInit, setIsInit] = useState(false);\r\n  const [isBust, setIsBust] = useState(false);\r\n  const [isVictory, setIsVictory] = useState(false);\r\n\r\n  const handleCellReveal = (cell, address) => {\r\n    if (isInit) revealCell(cell, address);\r\n    else {\r\n      initField(address)\r\n      setIsInit(true);\r\n    }\r\n  };\r\n\r\n  const handleFlagPlanting = (cell, address) => {\r\n    plantFlag(cell, address);\r\n    setRemainingMinesCount(remainingMinesCount + (cell.isFlagged ? 1 : -1));\r\n  };\r\n\r\n  const handleSmileyFaceClick = () => {\r\n    clearField();\r\n    setRemainingMinesCount(minesCount);\r\n    setIsInit(false);\r\n    setIsBust(false);\r\n    setIsVictory(false);\r\n  };\r\n\r\n  useDidUpdate(() => {\r\n    if (some(field, 'isBustedMine')) setIsBust(true);\r\n    else if (!some(reject(field, 'isMined'), 'isHidden')) {\r\n      markMines();\r\n      setRemainingMinesCount(0);\r\n      setIsVictory(true);\r\n    }\r\n  }, field);\r\n\r\n  return (\r\n    <div className='minesweeper'>\r\n      <Indicators\r\n        minesCount={remainingMinesCount}\r\n        isBust={isBust}\r\n        isVictory={isVictory}\r\n        shouldStartCountingSeconds={isInit}\r\n        smileyFaceClickHandler={handleSmileyFaceClick}\r\n      />\r\n\r\n      <Field\r\n        columnsCount={fieldDimension}\r\n        disabled={isBust || isVictory}\r\n        state={field}\r\n        cellRevealHandler={handleCellReveal}\r\n        flagPlantingHandler={handleFlagPlanting}\r\n        neighborsRevealHandler={revealNeighbors}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useMemo, useCallback } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport difference from 'lodash/difference';\r\nimport range from 'lodash/range';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\nimport { cellState, cellValue } from 'const';\r\n\r\nimport { CellNeighborsUtils } from 'utils';\r\n\r\nimport { Cell } from 'vm/cell';\r\n\r\nexport const useField = ({ width, height, minesCount }) => {\r\n  const length = width * height;\r\n\r\n  const getEmptyState = useCallback(() => Array(length).fill(new Cell()), [length]);\r\n\r\n  const [state, setState] = useState(() => getEmptyState());\r\n\r\n  const cellNeighborsUtils = useMemo(() => new CellNeighborsUtils(width, height), [width, height]);\r\n\r\n  const getFloodFilledState = (prevState, address, draftFn) => produce(prevState, draft => {\r\n    // eslint-disable-next-line\r\n    draftFn?.(draft);\r\n\r\n    draft[address].state = cellState.Visible;\r\n\r\n    const floodFill = cellAddr => {\r\n      cellNeighborsUtils.canFloodFill(draft, cellAddr) && cellNeighborsUtils.getAddresses(cellAddr).forEach(addr => {\r\n        const cell = draft[addr];\r\n        const { isMined, isHidden, isFlagged } = cell;\r\n\r\n        if (!isMined && isHidden && !isFlagged) {\r\n          cell.state = cellState.Visible;\r\n\r\n          floodFill(addr);\r\n        }\r\n      });\r\n    };\r\n\r\n    floodFill(address);\r\n  });\r\n\r\n  const getBustedState = (prevState, draftFn) => produce(prevState, draft => {\r\n    draftFn(draft);\r\n\r\n    draft.forEach((cell, addr) => {\r\n      const { isUnrevealedMine, isMisplacedFlag } = cell;\r\n\r\n      isUnrevealedMine && (cell.state = cellState.Visible);\r\n      isMisplacedFlag && (draft[addr] = new Cell(cellValue.IncorrectGuess, cellState.Visible));\r\n    });\r\n  });\r\n\r\n  const clear = () => {\r\n    setState(getEmptyState());\r\n  };\r\n\r\n  const init = address => {\r\n    setState(prevState => getFloodFilledState(prevState, address, draft => {\r\n      const addresses = difference(range(length), [address, ...cellNeighborsUtils.getAddresses(address)]);\r\n      const randomAddresses = new Set();\r\n\r\n      while (randomAddresses.size < minesCount) randomAddresses.add(addresses[Math.random() * addresses.length | 0]);\r\n\r\n      randomAddresses.forEach(addr => {\r\n        draft[addr].value = cellValue.Mine;\r\n      });\r\n\r\n      draft.forEach((cell, addr) => {\r\n        !cell.isMined && (cell.value = cellNeighborsUtils.getMinedCount(draft, addr));\r\n      });\r\n    }));\r\n  };\r\n\r\n  const revealCell = ({ isMined }, address) => {\r\n    setState(prevState => isMined ? getBustedState(prevState, draft => {\r\n      draft[address] = new Cell(cellValue.BustedMine, cellState.Visible);\r\n    }) : getFloodFilledState(prevState, address));\r\n  };\r\n\r\n  const plantFlag = ({ isFlagged }, address) => {\r\n    setState(prevState => produce(prevState, draft => {\r\n      draft[address].state = cellState[isFlagged ? 'Hidden' : 'Flagged'];\r\n    }));\r\n  };\r\n\r\n  const revealNeighbors = address => {\r\n    setState(prevState => {\r\n      if (cellNeighborsUtils.canFloodFill(prevState, address)) return getFloodFilledState(prevState, address);\r\n\r\n      if (cellNeighborsUtils.canRevealNeighbors(prevState, address)) return getBustedState(prevState, draft => {\r\n        cellNeighborsUtils.getAddresses(address).forEach(addr => {\r\n          const cell = draft[addr];\r\n          const { isUnrevealedMine, isMisplacedFlag } = cell;\r\n\r\n          isUnrevealedMine && (cell.value = cellValue.BustedMine);\r\n          isMisplacedFlag && (cell.value = cellValue.IncorrectGuess);\r\n\r\n          cell.state = cellState.Visible;\r\n        });\r\n      });\r\n\r\n      return cloneDeep(prevState);\r\n    });\r\n  };\r\n\r\n  const markMines = () => {\r\n    setState(prevState => produce(prevState, draft => {\r\n      draft.forEach(cell => {\r\n        cell.isMined && (cell.state = cellState.Flagged);\r\n      });\r\n    }));\r\n  };\r\n\r\n  return { state, clear, init, revealCell, plantFlag, revealNeighbors, markMines };\r\n};\r\n","import React from 'react';\r\n\r\nimport { Header, Minesweeper, Footer } from 'components';\r\n\r\nexport const App = () => (\r\n  <>\r\n    <Header />\r\n    <Minesweeper />\r\n    <Footer />\r\n  </>\r\n);\r\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { faFlag, faMeh, faFrown, faSmile } from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import React, { StrictMode }  from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport { App } from 'App';\r\n\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nimport './index.scss';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}