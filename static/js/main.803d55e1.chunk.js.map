{"version":3,"sources":["const/index.ts","components/Footer/index.tsx","components/Header/index.tsx","utils/add-id.ts","contexts/minesweeper.ts","hooks/use-did-update.ts","utils/cell-checker.ts","utils/mine-field-checker.ts","utils/index-utils.ts","utils/neighbors-utils.ts","components/Counter/index.tsx","components/Face/index.tsx","containers/Indicators/index.tsx","hooks/use-interval.ts","utils/join-class-names.ts","components/Bomb/index.tsx","components/Cell/index.tsx","containers/MineField/index.tsx","components/Radio/index.tsx","containers/MineFieldProps/index.tsx","containers/Minesweeper/index.tsx","hooks/use-mine-field.ts","App.tsx","setupIcons.ts","index.tsx"],"names":["MineFieldRowsCount","MineFieldColumnsCount","MineFieldMinesCount","MineFieldPropsKey","CellValue","CellAppearance","Footer","className","href","target","rel","icon","Date","getFullYear","memo","Header","addId","item","id","nanoid","smallMineFieldProps","name","rowsCount","SM","columnsCount","minesCount","mineFieldsProps","Map","set","MD","BG","MinesweeperContext","createContext","mineField","mineFieldProps","defaultMineFieldProps","mineFieldStatus","isSetup","isBusted","isSolved","hiddenMinesCount","setMineFieldProps","setupMineField","revealCell","toggleFlag","revealNeighbors","reset","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","CellChecker","cell","prop","criteria","this","checkCell","Empty","Mine","Incorrect","Busted","Hidden","Flagged","isMined","isFlagged","MineFieldChecker","some","reject","isHidden","IndexUtils","mineFieldRowsCount","index","rowIndex","columnIndex","isValidArrayIndex","length","NeighborsUtils","mineFieldColumnsCount","indexUtils","indexes","to2D","rowIndexOffset","columnIndexOffset","targetedRowIndex","targetedColumnIndex","push","to1D","getIndexes","isUnsolved","countMined","countBy","neighbor","criteriaFn","reduce","acc","neighborIndex","formatCount","count","toString","Counter","Face","onClick","type","Indicators","faceIcon","useContext","useState","secondsCount","setSecondsCount","handleFaceClick","useCallback","delay","fnRef","intervalId","setInterval","clearInterval","useInterval","joinClassNames","classNames","filter","Boolean","join","trim","Bomb","Cell","props","onMouseDown","onContextMenu","value","isEmpty","isIncorrect","visibleClassName","handleContextMenu","aria-label","event","MineField","rowClassName","handleCellClick","handleCellMouseDown","nativeEvent","addEventListener","handleMouseUp","which","removeEventListener","handleCellContextMenu","style","width","preventDefault","map","Radio","checked","onChange","defaultChecked","MineFieldProps","itemClassName","handleMineFieldPropsChange","Array","from","values","Minesweeper","initialMineFieldProps","emptyMineField","useMemo","appearance","initialMineFieldStatus","neighborsUtils","setMineField","setMineFieldStatus","getFloodFilledMineField","prevMineField","draftFn","produce","draft","Visible","floodFill","canFloodFill","forEach","getBustedMineField","isSolvedWrong","difference","range","minesIndexes","Set","size","add","Math","floor","random","prevMineFieldStatus","canReveal","mineFieldChecker","useMineField","Provider","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.803d55e1.chunk.js","sourcesContent":["import { addId } from 'utils/add-id';\r\nimport { MineFieldsProps } from 'view-models';\r\n\r\n/* eslint-disable no-shadow */\r\nexport enum MineFieldRowsCount {\r\n  SM = 9,\r\n  MD = 16,\r\n  BG = 30,\r\n}\r\n\r\nexport enum MineFieldColumnsCount {\r\n  SM = 9,\r\n  MD = 16,\r\n  BG = 16,\r\n}\r\n\r\nexport enum MineFieldMinesCount {\r\n  SM = 10,\r\n  MD = 40,\r\n  BG = 99,\r\n}\r\n\r\nexport enum MineFieldPropsKey {\r\n  SM,\r\n  MD,\r\n  BG,\r\n}\r\n\r\nexport enum CellValue {\r\n  Empty,\r\n  One,\r\n  Two,\r\n  Three,\r\n  Four,\r\n  Five,\r\n  Six,\r\n  Seven,\r\n  Eight,\r\n  Mine,\r\n  Incorrect,\r\n  Busted,\r\n}\r\n\r\nexport enum CellAppearance {\r\n  Hidden,\r\n  Visible,\r\n  Flagged,\r\n}\r\n\r\nconst smallMineFieldProps = addId({\r\n  name: 'Beginner',\r\n  rowsCount: MineFieldRowsCount.SM,\r\n  columnsCount: MineFieldColumnsCount.SM,\r\n  minesCount: MineFieldMinesCount.SM,\r\n});\r\n\r\nexport const mineFieldsProps: MineFieldsProps = new Map()\r\n  .set(MineFieldPropsKey.SM, smallMineFieldProps)\r\n  .set(\r\n    MineFieldPropsKey.MD,\r\n    addId({\r\n      name: 'Intermediate',\r\n      rowsCount: MineFieldRowsCount.MD,\r\n      columnsCount: MineFieldColumnsCount.MD,\r\n      minesCount: MineFieldMinesCount.MD,\r\n    })\r\n  )\r\n  .set(\r\n    MineFieldPropsKey.BG,\r\n    addId({\r\n      name: 'Expert',\r\n      rowsCount: MineFieldRowsCount.BG,\r\n      columnsCount: MineFieldColumnsCount.BG,\r\n      minesCount: MineFieldMinesCount.BG,\r\n    })\r\n  );\r\n\r\nexport { smallMineFieldProps as defaultMineFieldProps };\r\n","import './Footer.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nconst Footer = () => {\r\n  const className = 'Footer';\r\n\r\n  return (\r\n    <footer className={className}>\r\n      <span>\r\n        Powered by\r\n        <a\r\n          className={`${className}Link`}\r\n          href=\"https://github.com/FakeMetalFan\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <FontAwesomeIcon icon={['fab', 'github']} />\r\n        </a>\r\n        &copy;\r\n        <span>{new Date().getFullYear()}</span>\r\n      </span>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default memo(Footer);\r\n","import './Header.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nconst Header = () => {\r\n  const className = 'Header';\r\n\r\n  return (\r\n    <header className={className}>\r\n      <span className={`${className}Title`}>Minesweeper</span>\r\n\r\n      <a\r\n        className={`${className}Link`}\r\n        href=\"https://github.com/FakeMetalFan/minesweeper\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default memo(Header);\r\n","import { nanoid } from 'nanoid';\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport const addId = <T extends {}>(item: T) => ({ ...item, id: nanoid() });\r\n","import { defaultMineFieldProps, mineFieldsProps } from 'const';\r\nimport { useMineField } from 'hooks/use-mine-field';\r\nimport { createContext } from 'react';\r\nimport { MineFieldsProps } from 'view-models';\r\n\r\ntype MinesweeperContextValue = Readonly<\r\n  ReturnType<typeof useMineField> & { mineFieldsProps: MineFieldsProps }\r\n>;\r\n\r\nexport const MinesweeperContext = createContext<MinesweeperContextValue>({\r\n  mineFieldsProps,\r\n  mineField: [],\r\n  mineFieldProps: defaultMineFieldProps,\r\n  mineFieldStatus: {\r\n    isSetup: false,\r\n    isBusted: false,\r\n    isSolved: false,\r\n    hiddenMinesCount: 0,\r\n  },\r\n  /* eslint-disable @typescript-eslint/no-empty-function */\r\n  setMineFieldProps: () => {},\r\n  setupMineField: () => {},\r\n  revealCell: () => {},\r\n  toggleFlag: () => {},\r\n  revealNeighbors: () => {},\r\n  reset: () => {},\r\n});\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const useDidUpdate = (fn: () => void, ...deps: any[]) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      fn();\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n};\r\n","import { CellAppearance, CellValue } from 'const';\r\nimport { CellVM } from 'view-models';\r\n\r\nexport class CellChecker {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly cell: CellVM) {}\r\n\r\n  private checkCell(prop: keyof CellVM, criteria: CellValue | CellAppearance) {\r\n    return this.cell[prop] === criteria;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.checkCell('value', CellValue.Empty);\r\n  }\r\n\r\n  get isMined() {\r\n    return this.checkCell('value', CellValue.Mine);\r\n  }\r\n\r\n  get isIncorrect() {\r\n    return this.checkCell('value', CellValue.Incorrect);\r\n  }\r\n\r\n  get isBusted() {\r\n    return this.checkCell('value', CellValue.Busted);\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.checkCell('appearance', CellAppearance.Hidden);\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.checkCell('appearance', CellAppearance.Flagged);\r\n  }\r\n\r\n  get isUnsolved() {\r\n    return this.isMined && !this.isFlagged;\r\n  }\r\n\r\n  get isSolvedWrong() {\r\n    return !this.isMined && this.isFlagged;\r\n  }\r\n}\r\n","import { reject } from 'lodash-es';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { MineFieldVM } from 'view-models';\r\n\r\nexport class MineFieldChecker {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly mineField: MineFieldVM) {}\r\n\r\n  isBusted() {\r\n    return this.mineField.some((cell) => new CellChecker(cell).isBusted);\r\n  }\r\n\r\n  isSolved() {\r\n    return !reject(\r\n      this.mineField,\r\n      (cell) => new CellChecker(cell).isMined\r\n    ).some((cell) => new CellChecker(cell).isHidden);\r\n  }\r\n}\r\n","export class IndexUtils {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly mineFieldRowsCount: number) {}\r\n\r\n  to2D(index: number) {\r\n    const rowIndex = index % this.mineFieldRowsCount;\r\n\r\n    return {\r\n      rowIndex,\r\n      columnIndex: (index - rowIndex) / this.mineFieldRowsCount,\r\n    };\r\n  }\r\n\r\n  to1D(rowIndex: number, columnIndex: number) {\r\n    return columnIndex * this.mineFieldRowsCount + rowIndex;\r\n  }\r\n}\r\n","import { CellChecker } from 'utils/cell-checker';\r\nimport { IndexUtils } from 'utils/index-utils';\r\nimport { CellVM, MineFieldVM } from 'view-models';\r\n\r\nconst isValidArrayIndex = (index: number, length: number) =>\r\n  index > -1 && index < length;\r\n\r\nexport class NeighborsUtils {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(\r\n    private readonly mineFieldRowsCount: number,\r\n    private readonly mineFieldColumnsCount: number,\r\n    private readonly indexUtils = new IndexUtils(mineFieldRowsCount)\r\n  ) {}\r\n\r\n  getIndexes({ index }: CellVM) {\r\n    const indexes: number[] = [];\r\n\r\n    const { rowIndex, columnIndex } = this.indexUtils.to2D(index);\r\n\r\n    for (let rowIndexOffset = -1; rowIndexOffset < 2; rowIndexOffset += 1) {\r\n      for (\r\n        let columnIndexOffset = -1;\r\n        columnIndexOffset < 2;\r\n        columnIndexOffset += 1\r\n      ) {\r\n        if (rowIndexOffset || columnIndexOffset) {\r\n          const targetedRowIndex = rowIndex + rowIndexOffset;\r\n          const targetedColumnIndex = columnIndex + columnIndexOffset;\r\n\r\n          if (\r\n            isValidArrayIndex(targetedRowIndex, this.mineFieldRowsCount) &&\r\n            isValidArrayIndex(targetedColumnIndex, this.mineFieldColumnsCount)\r\n          ) {\r\n            indexes.push(\r\n              this.indexUtils.to1D(targetedRowIndex, targetedColumnIndex)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return indexes;\r\n  }\r\n\r\n  canFloodFill(mineField: MineFieldVM, cell: CellVM) {\r\n    return !this.getIndexes(cell).some(\r\n      (index) => new CellChecker(mineField[index]).isUnsolved\r\n    );\r\n  }\r\n\r\n  canReveal(mineField: MineFieldVM, cell: CellVM) {\r\n    return (\r\n      this.countMined(mineField, cell) ===\r\n      this.countBy(\r\n        mineField,\r\n        cell,\r\n        (neighbor) => new CellChecker(neighbor).isFlagged\r\n      )\r\n    );\r\n  }\r\n\r\n  countMined(mineField: MineFieldVM, cell: CellVM) {\r\n    return this.countBy(\r\n      mineField,\r\n      cell,\r\n      (neighbor) => new CellChecker(neighbor).isMined\r\n    );\r\n  }\r\n\r\n  private countBy(\r\n    mineField: MineFieldVM,\r\n    cell: CellVM,\r\n    criteriaFn: (item: CellVM) => boolean\r\n  ) {\r\n    return this.getIndexes(cell).reduce(\r\n      (acc, neighborIndex) =>\r\n        criteriaFn(mineField[neighborIndex]) ? acc + 1 : acc,\r\n      0\r\n    );\r\n  }\r\n}\r\n","import React, { memo } from 'react';\r\n\r\nconst formatCount = (count: number) => {\r\n  if (count < 1) {\r\n    return '000';\r\n  }\r\n\r\n  if (count < 10) {\r\n    return `00${count}`;\r\n  }\r\n\r\n  if (count < 100) {\r\n    return `0${count}`;\r\n  }\r\n\r\n  return count.toString();\r\n};\r\n\r\nconst Counter = ({ count }: Readonly<{ count: number }>) => (\r\n  <div className=\"Counter\">{formatCount(count)}</div>\r\n);\r\n\r\nexport default memo(Counter);\r\n","import './Face.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\ntype FaceProps = Readonly<{ icon?: JSX.Element; onClick?: () => void }>;\r\n\r\nconst Face = ({\r\n  icon = <FontAwesomeIcon icon={['far', 'meh']} />,\r\n  onClick,\r\n}: FaceProps) => (\r\n  <button type=\"button\" className=\"Face\" onClick={onClick}>\r\n    {icon}\r\n  </button>\r\n);\r\n\r\nexport default memo(Face);\r\n","import './Indicators.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Counter from 'components/Counter';\r\nimport Face from 'components/Face';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\nimport { useInterval } from 'hooks/use-interval';\r\nimport React, { useCallback, useContext, useState } from 'react';\r\n\r\nconst Indicators = () => {\r\n  const {\r\n    mineFieldStatus: { isSetup, isSolved, isBusted, hiddenMinesCount },\r\n    mineFieldProps,\r\n    reset,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n\r\n  let faceIcon: JSX.Element | undefined;\r\n\r\n  if (isSolved) {\r\n    faceIcon = <FontAwesomeIcon icon={['far', 'smile']} />;\r\n  } else if (isBusted) {\r\n    faceIcon = <FontAwesomeIcon icon={['far', 'frown']} />;\r\n  }\r\n\r\n  const handleFaceClick = useCallback(() => {\r\n    setSecondsCount(0);\r\n\r\n    reset();\r\n  }, [reset]);\r\n\r\n  useInterval(\r\n    () => {\r\n      setSecondsCount(secondsCount + 1);\r\n    },\r\n    isSetup && !(isSolved || isBusted) ? 1e3 : void 0\r\n  );\r\n\r\n  useDidUpdate(() => {\r\n    setSecondsCount(0);\r\n  }, mineFieldProps);\r\n\r\n  return (\r\n    <div className=\"Indicators\">\r\n      <Counter count={hiddenMinesCount} />\r\n      <Face icon={faceIcon} onClick={handleFaceClick} />\r\n      <Counter count={secondsCount} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Indicators;\r\n","import { useEffect, useRef } from 'react';\r\n\r\ntype Fn = () => void;\r\n\r\nexport const useInterval = (fn: Fn, delay?: number) => {\r\n  const fnRef = useRef<Fn>();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  });\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current?.();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","export const joinClassNames = (...classNames: (string | undefined)[]) =>\r\n  classNames.filter(Boolean).join(' ').trim();\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\nconst Bomb = ({ className }: Readonly<{ className?: string }>) => (\r\n  <button type=\"button\" className={className}>\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </button>\r\n);\r\n\r\nexport default Bomb;\r\n","import './Cell.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { joinClassNames } from 'utils/join-class-names';\r\nimport { CellEvent, CellVM } from 'view-models';\r\n\r\nimport Bomb from '../Bomb';\r\n\r\ntype CellProps = Readonly<{\r\n  cell: CellVM;\r\n  onClick?: (cell: CellVM) => void;\r\n  onMouseDown?: (event: CellEvent, cell: CellVM) => void;\r\n  onContextMenu?: (cell: CellVM) => void;\r\n}>;\r\n\r\nconst Cell = (props: CellProps) => {\r\n  const { cell, onClick, onMouseDown, onContextMenu } = props;\r\n\r\n  const { value } = cell;\r\n\r\n  const {\r\n    isHidden,\r\n    isEmpty,\r\n    isFlagged,\r\n    isMined,\r\n    isIncorrect,\r\n    isBusted,\r\n  } = new CellChecker(cell);\r\n\r\n  const className = 'Cell';\r\n  const visibleClassName = `${className}__visible`;\r\n\r\n  const handleClick = () => {\r\n    onClick?.(cell);\r\n  };\r\n\r\n  const handleContextMenu = () => {\r\n    onContextMenu?.(cell);\r\n  };\r\n\r\n  const handleMouseDown = (event: CellEvent) => {\r\n    onMouseDown?.(event, cell);\r\n  };\r\n\r\n  if (isHidden) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Cell\"\r\n        className={className}\r\n        onClick={handleClick}\r\n        onContextMenu={handleContextMenu}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isFlagged) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className={className}\r\n        onContextMenu={handleContextMenu}\r\n      >\r\n        <FontAwesomeIcon icon={['far', 'flag']} />\r\n      </button>\r\n    );\r\n  }\r\n\r\n  if (isEmpty) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Cell\"\r\n        className={joinClassNames(className, visibleClassName)}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isMined) {\r\n    return <Bomb className={className} />;\r\n  }\r\n\r\n  if (isIncorrect) {\r\n    return (\r\n      <Bomb className={joinClassNames(className, `${className}__wrong`)} />\r\n    );\r\n  }\r\n\r\n  if (isBusted) {\r\n    return (\r\n      <Bomb className={joinClassNames(className, `${className}__busted`)} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={joinClassNames(\r\n        className,\r\n        `${className}__${value}`,\r\n        visibleClassName\r\n      )}\r\n      onMouseDown={handleMouseDown}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(Cell);\r\n","import './MineField.scss';\r\n\r\nimport Cell from 'components/Cell';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport React, { SyntheticEvent, useCallback, useContext } from 'react';\r\nimport { joinClassNames } from 'utils/join-class-names';\r\nimport { CellEvent, CellVM } from 'view-models';\r\n\r\nconst MineField = () => {\r\n  const {\r\n    mineFieldProps: { rowsCount },\r\n    mineField,\r\n    mineFieldStatus: { isSetup, isBusted, isSolved },\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const className = 'MineField';\r\n  const rowClassName = `${className}Row`;\r\n\r\n  const cellWidth = 32;\r\n\r\n  const handleContextMenu = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleCellClick = useCallback(\r\n    (cell: CellVM) => {\r\n      (isSetup ? revealCell : setupMineField)(cell);\r\n    },\r\n    [isSetup, revealCell, setupMineField]\r\n  );\r\n\r\n  const handleCellMouseDown = useCallback(\r\n    ({ target, nativeEvent }: CellEvent, cell: CellVM) => {\r\n      const handleMouseUp = (event: Event) => {\r\n        if ((nativeEvent as MouseEvent).which !== (event as MouseEvent).which) {\r\n          revealNeighbors(cell);\r\n        }\r\n\r\n        target.removeEventListener('mouseup', handleMouseUp);\r\n      };\r\n\r\n      target.addEventListener('mouseup', handleMouseUp);\r\n    },\r\n    [revealNeighbors]\r\n  );\r\n\r\n  const handleCellContextMenu = useCallback(\r\n    (cell: CellVM) => {\r\n      toggleFlag(cell);\r\n    },\r\n    [toggleFlag]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={className}\r\n      style={{ width: rowsCount * cellWidth }}\r\n      onContextMenu={handleContextMenu}\r\n    >\r\n      <div\r\n        className={joinClassNames(\r\n          rowClassName,\r\n          `${rowClassName}__count-${rowsCount}`,\r\n          `${isBusted || isSolved ? `${rowClassName}__disabled` : ''}`\r\n        )}\r\n      >\r\n        {mineField.map((cell) => (\r\n          <Cell\r\n            cell={cell}\r\n            onClick={handleCellClick}\r\n            onMouseDown={handleCellMouseDown}\r\n            onContextMenu={handleCellContextMenu}\r\n            key={cell.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MineField;\r\n","import React, { memo } from 'react';\r\n\r\ntype RadioProps<T> = Readonly<{\r\n  item: T;\r\n  name: string;\r\n  checked?: boolean;\r\n  className?: string;\r\n  onChange?: (item: T) => void;\r\n}>;\r\n\r\nconst Radio = <T extends Readonly<{ name: string }>>({\r\n  item,\r\n  name,\r\n  checked,\r\n  className,\r\n  onChange,\r\n}: RadioProps<T>) => {\r\n  const handleChange = () => {\r\n    onChange?.(item);\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <input\r\n        type=\"radio\"\r\n        name={name}\r\n        className={`${className}Radio`}\r\n        defaultChecked={checked}\r\n        onChange={handleChange}\r\n      />\r\n      {item.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Radio) as typeof Radio;\r\n","import './MineFieldProps.scss';\r\n\r\nimport Radio from 'components/Radio';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport { MineFieldPropsVM } from 'view-models';\r\n\r\nconst MineFieldProps = () => {\r\n  const { mineFieldsProps, mineFieldProps, setMineFieldProps } = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const className = 'MineFieldProps';\r\n  const itemClassName = `${className}Item`;\r\n\r\n  const handleMineFieldPropsChange = useCallback(\r\n    (props: MineFieldPropsVM) => {\r\n      setMineFieldProps(props);\r\n    },\r\n    [setMineFieldProps]\r\n  );\r\n\r\n  return (\r\n    <form className={className}>\r\n      {Array.from(mineFieldsProps.values()).map((item) => {\r\n        const { name, id } = item;\r\n\r\n        return (\r\n          <Radio\r\n            item={item}\r\n            name=\"MineFieldProps\"\r\n            className={itemClassName}\r\n            checked={name === mineFieldProps.name}\r\n            onChange={handleMineFieldPropsChange}\r\n            key={id}\r\n          />\r\n        );\r\n      })}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MineFieldProps;\r\n","import './Minesweeper.scss';\r\n\r\nimport Footer from 'components/Footer';\r\nimport Header from 'components/Header';\r\nimport { defaultMineFieldProps, mineFieldsProps } from 'const';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport { useMineField } from 'hooks/use-mine-field';\r\nimport React from 'react';\r\n\r\nimport Indicators from '../Indicators';\r\nimport MineField from '../MineField';\r\nimport MineFieldProps from '../MineFieldProps';\r\n\r\nconst Minesweeper = () => {\r\n  const mineField = useMineField(defaultMineFieldProps);\r\n\r\n  return (\r\n    <MinesweeperContext.Provider value={{ ...mineField, mineFieldsProps }}>\r\n      <Header />\r\n\r\n      <main className=\"Minesweeper\">\r\n        <Indicators />\r\n        <MineField />\r\n        <MineFieldProps />\r\n      </main>\r\n\r\n      <Footer />\r\n    </MinesweeperContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Minesweeper;\r\n","import { CellAppearance, CellValue } from 'const';\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\nimport produce, { Draft } from 'immer';\r\nimport { difference, range } from 'lodash-es';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport { addId } from 'utils/add-id';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { MineFieldChecker } from 'utils/mine-field-checker';\r\nimport { NeighborsUtils } from 'utils/neighbors-utils';\r\nimport { CellVM, MineFieldPropsVM, MineFieldVM } from 'view-models';\r\n\r\ntype DraftFn = (mineField: Draft<MineFieldVM>) => void;\r\n\r\nexport const useMineField = (initialMineFieldProps: MineFieldPropsVM) => {\r\n  const [mineFieldProps, setMineFieldProps] = useState(initialMineFieldProps);\r\n\r\n  const { rowsCount, columnsCount, minesCount } = mineFieldProps;\r\n\r\n  const length = rowsCount * columnsCount;\r\n\r\n  const emptyMineField = useMemo(\r\n    () =>\r\n      Array.from({ length }, (item, index) =>\r\n        addId({\r\n          index,\r\n          value: CellValue.Empty,\r\n          appearance: CellAppearance.Hidden,\r\n        })\r\n      ),\r\n    [length]\r\n  );\r\n\r\n  const initialMineFieldStatus = useMemo(\r\n    () => ({\r\n      isSetup: false,\r\n      isBusted: false,\r\n      isSolved: false,\r\n      hiddenMinesCount: minesCount,\r\n    }),\r\n    [minesCount]\r\n  );\r\n\r\n  const neighborsUtils = useMemo(\r\n    () => new NeighborsUtils(rowsCount, columnsCount),\r\n    [rowsCount, columnsCount]\r\n  );\r\n\r\n  const [mineField, setMineField] = useState(emptyMineField);\r\n\r\n  const [mineFieldStatus, setMineFieldStatus] = useState(\r\n    initialMineFieldStatus\r\n  );\r\n\r\n  const getFloodFilledMineField = useCallback(\r\n    (prevMineField: CellVM[], cell: CellVM, draftFn?: DraftFn) =>\r\n      produce(prevMineField, (draft) => {\r\n        draftFn?.(draft);\r\n\r\n        /* eslint-disable no-param-reassign */\r\n        draft[cell.index].appearance = CellAppearance.Visible;\r\n\r\n        (function floodFill(target: CellVM) {\r\n          if (neighborsUtils.canFloodFill(draft, target)) {\r\n            neighborsUtils.getIndexes(target).forEach((index) => {\r\n              const neighbor = draft[index];\r\n\r\n              const { isMined, isHidden, isFlagged } = new CellChecker(\r\n                neighbor\r\n              );\r\n\r\n              if (!isMined && isHidden && !isFlagged) {\r\n                neighbor.appearance = CellAppearance.Visible;\r\n\r\n                floodFill(neighbor);\r\n              }\r\n            });\r\n          }\r\n        })(cell);\r\n      }),\r\n    [neighborsUtils]\r\n  );\r\n\r\n  const getBustedMineField = useCallback(\r\n    (prevMineField: CellVM[], draftFn: DraftFn) =>\r\n      produce(prevMineField, (draft) => {\r\n        draftFn(draft);\r\n\r\n        draft.forEach((cell, index) => {\r\n          const { isUnsolved, isSolvedWrong } = new CellChecker(cell);\r\n\r\n          if (isUnsolved) {\r\n            cell.appearance = CellAppearance.Visible;\r\n          } else if (isSolvedWrong) {\r\n            draft[index] = {\r\n              ...cell,\r\n              value: CellValue.Incorrect,\r\n              appearance: CellAppearance.Visible,\r\n            };\r\n          }\r\n        });\r\n      }),\r\n    []\r\n  );\r\n\r\n  const setupMineField = useCallback(\r\n    (cell: CellVM) => {\r\n      setMineField((prevMineField) =>\r\n        getFloodFilledMineField(prevMineField, cell, (draft) => {\r\n          const indexes = difference(range(length), [\r\n            cell.index,\r\n            ...neighborsUtils.getIndexes(cell),\r\n          ]);\r\n\r\n          const minesIndexes = new Set<number>();\r\n\r\n          while (minesIndexes.size < minesCount) {\r\n            minesIndexes.add(\r\n              indexes[Math.floor(Math.random() * indexes.length)]\r\n            );\r\n          }\r\n\r\n          minesIndexes.forEach((index) => {\r\n            draft[index].value = CellValue.Mine;\r\n          });\r\n\r\n          draft.forEach((item) => {\r\n            if (!new CellChecker(item).isMined) {\r\n              item.value = neighborsUtils.countMined(draft, item);\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSetup: true,\r\n      }));\r\n    },\r\n    [getFloodFilledMineField, length, minesCount, neighborsUtils]\r\n  );\r\n\r\n  const revealCell = useCallback(\r\n    (cell: CellVM) => {\r\n      setMineField((prevMineField) =>\r\n        new CellChecker(cell).isMined\r\n          ? getBustedMineField(prevMineField, (draft) => {\r\n              draft[cell.index] = {\r\n                ...cell,\r\n                value: CellValue.Busted,\r\n                appearance: CellAppearance.Visible,\r\n              };\r\n            })\r\n          : getFloodFilledMineField(prevMineField, cell)\r\n      );\r\n    },\r\n    [getBustedMineField, getFloodFilledMineField]\r\n  );\r\n\r\n  const toggleFlag = useCallback((cell: CellVM) => {\r\n    const { isFlagged } = new CellChecker(cell);\r\n\r\n    setMineField((prevMineField) =>\r\n      produce(prevMineField, (draft) => {\r\n        draft[cell.index].appearance = isFlagged\r\n          ? CellAppearance.Hidden\r\n          : CellAppearance.Flagged;\r\n      })\r\n    );\r\n\r\n    setMineFieldStatus((prevMineFieldStatus) =>\r\n      produce(prevMineFieldStatus, (draft) => {\r\n        draft.hiddenMinesCount += isFlagged ? 1 : -1;\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const revealNeighbors = useCallback(\r\n    (cell: CellVM) => {\r\n      setMineField((prevMineField) => {\r\n        if (neighborsUtils.canFloodFill(prevMineField, cell)) {\r\n          return getFloodFilledMineField(prevMineField, cell);\r\n        }\r\n\r\n        if (neighborsUtils.canReveal(prevMineField, cell)) {\r\n          return getBustedMineField(prevMineField, (draft) => {\r\n            neighborsUtils.getIndexes(cell).forEach((index) => {\r\n              const neighbor = draft[index];\r\n\r\n              const { isUnsolved, isSolvedWrong } = new CellChecker(neighbor);\r\n\r\n              if (isUnsolved) {\r\n                neighbor.value = CellValue.Busted;\r\n              } else if (isSolvedWrong) {\r\n                neighbor.value = CellValue.Incorrect;\r\n              }\r\n\r\n              neighbor.appearance = CellAppearance.Visible;\r\n            });\r\n          });\r\n        }\r\n\r\n        return prevMineField;\r\n      });\r\n    },\r\n    [getBustedMineField, getFloodFilledMineField, neighborsUtils]\r\n  );\r\n\r\n  const reset = useCallback(() => {\r\n    setMineField(emptyMineField);\r\n\r\n    setMineFieldStatus(initialMineFieldStatus);\r\n  }, [emptyMineField, initialMineFieldStatus]);\r\n\r\n  useDidUpdate(() => {\r\n    reset();\r\n  }, emptyMineField);\r\n\r\n  useDidUpdate(() => {\r\n    const mineFieldChecker = new MineFieldChecker(mineField);\r\n\r\n    if (mineFieldChecker.isBusted()) {\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isBusted: true,\r\n      }));\r\n    } else if (mineFieldChecker.isSolved()) {\r\n      setMineField((prevMineField) =>\r\n        produce(prevMineField, (draft) => {\r\n          draft.forEach((cell) => {\r\n            if (new CellChecker(cell).isMined) {\r\n              cell.appearance = CellAppearance.Flagged;\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSolved: true,\r\n        hiddenMinesCount: 0,\r\n      }));\r\n    }\r\n  }, mineField);\r\n\r\n  return {\r\n    mineField,\r\n    mineFieldProps,\r\n    mineFieldStatus,\r\n    setMineFieldProps,\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n    reset,\r\n  };\r\n};\r\n","import Minesweeper from 'containers/Minesweeper';\r\nimport React from 'react';\r\n\r\nconst App = () => <Minesweeper />;\r\n\r\nexport default App;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport {\r\n  faFlag,\r\n  faFrown,\r\n  faMeh,\r\n  faSmile,\r\n} from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import 'index.scss';\r\n\r\nimport App from 'App';\r\nimport React, { StrictMode } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}