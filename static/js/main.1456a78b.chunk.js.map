{"version":3,"sources":["components/Cell/Cell.module.scss","components/Header/Header.module.scss","containers/MineField/MineField.module.scss","components/Footer/Footer.module.scss","containers/MineFieldParams/MineFieldParams.module.scss","components/Face/Face.module.scss","containers/Indicators/Indicators.module.scss","containers/Minesweeper/Minesweeper.module.scss","constants/cell-appearance.ts","components/Footer/index.tsx","components/Header/index.tsx","contexts/minesweeper.ts","constants/cell-value.ts","utils/add-id.ts","constants/mine-fields-params.ts","hooks/use-did-update.ts","utils/cell-checker.ts","utils/mine-field-checker.ts","utils/index-utils.ts","utils/neighbors-utils.ts","hooks/use-mine-field.ts","components/Counter/index.tsx","components/Face/index.tsx","hooks/use-callback-ref.ts","hooks/use-interval.ts","containers/Indicators/index.tsx","components/Bomb/index.tsx","components/Cell/index.tsx","containers/MineField/index.tsx","components/Radio/index.tsx","containers/MineFieldParams/index.tsx","containers/Minesweeper/index.tsx","App.tsx","setup-icons.ts","index.tsx"],"names":["module","exports","CellAppearance","Footer","className","styles","Link","href","target","rel","icon","Date","getFullYear","memo","Header","Title","MinesweeperContext","createContext","mineField","mineFieldParams","mineFieldStatus","setMineFieldParams","setupMineField","revealCell","toggleFlag","revealNeighbors","reset","CellValue","addId","item","id","nanoid","smallMineFieldParams","name","rowsCount","columnsCount","minesCount","mineFieldsParams","useDidUpdate","callback","didMount","useRef","deps","useEffect","current","CellChecker","cell","key","value","this","isEqual","Empty","Mine","Hidden","Flagged","Wrong","Busted","isMined","isFlagged","MineFieldChecker","some","isBusted","reject","isHidden","IndexUtils","length","index","rowIndex","columnIndex","isValidArrayIndex","NeighborsUtils","indexUtils","to2D","indexes","rowIndexOffset","columnIndexOffset","targetRowIndex","targetColumnIndex","push","to1D","getIndexes","countMined","countBy","reduce","acc","useMineField","useState","mineFieldLength","emptyMineField","useMemo","Array","from","appearance","setMineField","initialMineFieldStatus","isSetup","isSolved","hiddenMinesCount","setMineFieldStatus","neighborsUtils","getFloodFilledMineField","produce","draft","Visible","floodFill","canFloodFill","forEach","neighbor","getBustedMineField","isMisplacedFlag","mineFieldChecker","prevMineFieldStatus","prevMineField","restIndexes","difference","range","minedIndexes","Set","size","add","Math","floor","random","canReveal","formatCount","count","toString","Counter","Face","onClick","type","useCallbackRef","callbackRef","useCallback","args","call","useInterval","interval","intervalId","setInterval","clearInterval","getFaceIcon","Indicators","useContext","secondsCount","setSecondsCount","handleFaceClick","Bomb","Cell","onMouseDown","onContextMenu","isEmpty","isWrong","visibleStyles","classNames","handleContextMenu","aria-label","event","MineField","handleCellClick","handleCellMouseDown","nativeEvent","addEventListener","handleMouseUp","which","removeEventListener","handleCellContextMenu","style","width","parseFloat","cellStyles","cellSize","preventDefault","Disabled","map","Radio","checked","onChange","defaultChecked","MineFieldParams","handleMineFieldPropsChange","props","Minesweeper","Provider","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","setupIcons","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1456a78b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cellSize\":\"32px\",\"Cell\":\"Cell_Cell__3u3Nf\",\"Visible\":\"Cell_Visible__1eq4A\",\"Busted\":\"Cell_Busted__3JYH_\",\"Wrong\":\"Cell_Wrong__2nly2\",\"Value1\":\"Cell_Value1__25Qg8\",\"Value2\":\"Cell_Value2__1hBs0\",\"Value3\":\"Cell_Value3__2drs4\",\"Value4\":\"Cell_Value4__1gdbL\",\"Value5\":\"Cell_Value5__QthWi\",\"Value6\":\"Cell_Value6__37Sl7\",\"Value7\":\"Cell_Value7__1vwPH\",\"Value8\":\"Cell_Value8__3BFOy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__1FPOU\",\"Title\":\"Header_Title__4K5Cg\",\"Link\":\"Header_Link__2yTt4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MineField\":\"MineField_MineField__2mxCG\",\"Row9\":\"MineField_Row9__1Jl79\",\"Row16\":\"MineField_Row16__A3Kv1\",\"Row30\":\"MineField_Row30__1UeKK\",\"Disabled\":\"MineField_Disabled__39wsP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__2kUlx\",\"Link\":\"Footer_Link__1JXGc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MineFieldParams\":\"MineFieldParams_MineFieldParams__1Fhcb\",\"Radio\":\"MineFieldParams_Radio__hLjYF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Face\":\"Face_Face__d_Lpq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Indicators\":\"Indicators_Indicators__3mfRs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Minesweeper\":\"Minesweeper_Minesweeper__15l4n\"};","// eslint-disable-next-line no-shadow\r\nenum CellAppearance {\r\n  Hidden,\r\n  Visible,\r\n  Flagged,\r\n  Busted,\r\n  Wrong,\r\n}\r\n\r\nexport default CellAppearance;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nimport styles from './Footer.module.scss';\r\n\r\nconst Footer = () => (\r\n  <footer className={styles.Footer}>\r\n    <span>\r\n      Powered by\r\n      <a\r\n        className={styles.Link}\r\n        href=\"https://github.com/FakeMetalFan\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n      &copy;\r\n      <span>{new Date().getFullYear()}</span>\r\n    </span>\r\n  </footer>\r\n);\r\n\r\nexport default memo(Footer);\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nimport styles from './Header.module.scss';\r\n\r\nconst Header = () => (\r\n  <header className={styles.Header}>\r\n    <span className={styles.Title}>Minesweeper</span>\r\n    <a\r\n      className={styles.Link}\r\n      href=\"https://github.com/FakeMetalFan/minesweeper\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n  </header>\r\n);\r\n\r\nexport default memo(Header);\r\n","import useMineField from 'hooks/use-mine-field';\r\nimport { createContext } from 'react';\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\nconst MinesweeperContext = createContext<ReturnType<typeof useMineField>>({\r\n  mineField: [],\r\n  mineFieldParams: {} as MineFieldParams,\r\n  mineFieldStatus: {} as MineFieldStatus,\r\n  setMineFieldParams: () => {},\r\n  setupMineField: () => {},\r\n  revealCell: () => {},\r\n  toggleFlag: () => {},\r\n  revealNeighbors: () => {},\r\n  reset: () => {},\r\n});\r\n\r\nexport default MinesweeperContext;\r\n","// eslint-disable-next-line no-shadow\r\nenum CellValue {\r\n  Empty,\r\n  One,\r\n  Two,\r\n  Three,\r\n  Four,\r\n  Five,\r\n  Six,\r\n  Seven,\r\n  Eight,\r\n  Mine,\r\n}\r\n\r\nexport default CellValue;\r\n","import { nanoid } from 'nanoid';\r\n\r\nconst addId = <T extends Record<string, unknown>>(item: T) => ({\r\n  ...item,\r\n  id: nanoid(),\r\n});\r\n\r\nexport default addId;\r\n","import addId from 'utils/add-id';\r\n\r\nexport const smallMineFieldParams = addId({\r\n  name: 'Beginner',\r\n  rowsCount: 9,\r\n  columnsCount: 9,\r\n  minesCount: 9,\r\n});\r\n\r\nconst mineFieldsParams = [\r\n  smallMineFieldParams,\r\n  addId({\r\n    name: 'Intermediate',\r\n    rowsCount: 16,\r\n    columnsCount: 16,\r\n    minesCount: 40,\r\n  }),\r\n  addId({\r\n    name: 'Expert',\r\n    rowsCount: 30,\r\n    columnsCount: 16,\r\n    minesCount: 99,\r\n  }),\r\n];\r\n\r\nexport default mineFieldsParams;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nconst useDidUpdate = (callback: () => void, ...deps: unknown[]) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      callback();\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n};\r\n\r\nexport default useDidUpdate;\r\n","import CellAppearance from 'constants/cell-appearance';\r\nimport CellValue from 'constants/cell-value';\r\n\r\nclass CellChecker {\r\n  constructor(private cell: Cell) {}\r\n\r\n  private isEqual(key: keyof Cell, value: Cell[keyof Cell]) {\r\n    return this.cell[key] === value;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.isEqual('value', CellValue.Empty);\r\n  }\r\n\r\n  get isMined() {\r\n    return this.isEqual('value', CellValue.Mine);\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.isEqual('appearance', CellAppearance.Hidden);\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.isEqual('appearance', CellAppearance.Flagged);\r\n  }\r\n\r\n  get isWrong() {\r\n    return this.isEqual('appearance', CellAppearance.Wrong);\r\n  }\r\n\r\n  get isBusted() {\r\n    return this.isEqual('appearance', CellAppearance.Busted);\r\n  }\r\n\r\n  get isMisplacedFlag() {\r\n    return !this.isMined && this.isFlagged;\r\n  }\r\n}\r\n\r\nexport default CellChecker;\r\n","import { reject } from 'lodash-es';\r\nimport CellChecker from 'utils/cell-checker';\r\n\r\nclass MineFieldChecker {\r\n  constructor(private mineField: Cell[]) {}\r\n\r\n  isBusted() {\r\n    return this.mineField.some((cell) => new CellChecker(cell).isBusted);\r\n  }\r\n\r\n  isSolved() {\r\n    return !reject(\r\n      this.mineField,\r\n      (cell) => new CellChecker(cell).isMined\r\n    ).some((cell) => new CellChecker(cell).isHidden);\r\n  }\r\n}\r\n\r\nexport default MineFieldChecker;\r\n","class IndexUtils {\r\n  constructor(private length: number) {}\r\n\r\n  to2D(index: number) {\r\n    const rowIndex = index % this.length;\r\n\r\n    return { rowIndex, columnIndex: (index - rowIndex) / this.length };\r\n  }\r\n\r\n  to1D(rowIndex: number, columnIndex: number) {\r\n    return columnIndex * this.length + rowIndex;\r\n  }\r\n}\r\n\r\nexport default IndexUtils;\r\n","import CellChecker from 'utils/cell-checker';\r\nimport IndexUtils from 'utils/index-utils';\r\n\r\nconst isValidArrayIndex = (index: number, length: number) =>\r\n  index > -1 && index < length;\r\n\r\nclass NeighborsUtils {\r\n  constructor(\r\n    private rowsCount: number,\r\n    private columnsCount: number,\r\n    private indexUtils = new IndexUtils(rowsCount)\r\n  ) {}\r\n\r\n  getIndexes({ index }: Cell) {\r\n    const { rowIndex, columnIndex } = this.indexUtils.to2D(index);\r\n    const indexes = [];\r\n\r\n    for (let rowIndexOffset = -1; rowIndexOffset < 2; rowIndexOffset += 1) {\r\n      for (\r\n        let columnIndexOffset = -1;\r\n        columnIndexOffset < 2;\r\n        columnIndexOffset += 1\r\n      ) {\r\n        if (rowIndexOffset || columnIndexOffset) {\r\n          const targetRowIndex = rowIndex + rowIndexOffset;\r\n          const targetColumnIndex = columnIndex + columnIndexOffset;\r\n\r\n          if (\r\n            isValidArrayIndex(targetRowIndex, this.rowsCount) &&\r\n            isValidArrayIndex(targetColumnIndex, this.columnsCount)\r\n          ) {\r\n            indexes.push(\r\n              this.indexUtils.to1D(targetRowIndex, targetColumnIndex)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return indexes;\r\n  }\r\n\r\n  canFloodFill(mineField: Cell[], cell: Cell) {\r\n    return !this.getIndexes(cell).some((index) => {\r\n      const { isMined, isFlagged } = new CellChecker(mineField[index]);\r\n\r\n      return isMined && !isFlagged;\r\n    });\r\n  }\r\n\r\n  canReveal(mineField: Cell[], cell: Cell) {\r\n    return (\r\n      this.countMined(mineField, cell) ===\r\n      this.countBy(mineField, cell, 'isFlagged')\r\n    );\r\n  }\r\n\r\n  countMined(mineField: Cell[], cell: Cell) {\r\n    return this.countBy(mineField, cell, 'isMined');\r\n  }\r\n\r\n  private countBy(mineField: Cell[], cell: Cell, key: keyof CellChecker) {\r\n    return this.getIndexes(cell).reduce(\r\n      (acc, index) => (new CellChecker(mineField[index])[key] ? acc + 1 : acc),\r\n      0\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborsUtils;\r\n","import CellAppearance from 'constants/cell-appearance';\r\nimport CellValue from 'constants/cell-value';\r\nimport { smallMineFieldParams } from 'constants/mine-fields-params';\r\nimport useDidUpdate from 'hooks/use-did-update';\r\nimport produce, { Draft } from 'immer';\r\nimport { difference, range } from 'lodash-es';\r\nimport { useMemo, useState } from 'react';\r\nimport addId from 'utils/add-id';\r\nimport CellChecker from 'utils/cell-checker';\r\nimport MineFieldChecker from 'utils/mine-field-checker';\r\nimport NeighborsUtils from 'utils/neighbors-utils';\r\n\r\ntype DraftCallback = (draft: Draft<Cell[]>) => void;\r\n\r\n/* eslint-disable no-param-reassign */\r\nconst useMineField = () => {\r\n  const [mineFieldParams, setMineFieldParams] = useState(smallMineFieldParams);\r\n\r\n  const { rowsCount, columnsCount, minesCount } = mineFieldParams;\r\n  const mineFieldLength = rowsCount * columnsCount;\r\n\r\n  const emptyMineField = useMemo(\r\n    () =>\r\n      Array.from({ length: mineFieldLength }, (item, index) =>\r\n        addId({\r\n          index,\r\n          value: CellValue.Empty,\r\n          appearance: CellAppearance.Hidden,\r\n        })\r\n      ),\r\n    [mineFieldLength]\r\n  );\r\n\r\n  const [mineField, setMineField] = useState(emptyMineField);\r\n\r\n  const initialMineFieldStatus = {\r\n    isSetup: false,\r\n    isBusted: false,\r\n    isSolved: false,\r\n    hiddenMinesCount: minesCount,\r\n  };\r\n\r\n  const [mineFieldStatus, setMineFieldStatus] = useState(\r\n    initialMineFieldStatus\r\n  );\r\n\r\n  const neighborsUtils = new NeighborsUtils(rowsCount, columnsCount);\r\n\r\n  const getFloodFilledMineField = (cell: Cell, callback?: DraftCallback) =>\r\n    produce(mineField, (draft) => {\r\n      callback?.(draft);\r\n      draft[cell.index].appearance = CellAppearance.Visible;\r\n\r\n      (function floodFill(item: Cell) {\r\n        if (neighborsUtils.canFloodFill(draft, item)) {\r\n          neighborsUtils.getIndexes(item).forEach((index) => {\r\n            const neighbor = draft[index];\r\n            const { isMined, isHidden, isFlagged } = new CellChecker(neighbor);\r\n\r\n            if (!isMined && isHidden && !isFlagged) {\r\n              neighbor.appearance = CellAppearance.Visible;\r\n\r\n              floodFill(neighbor);\r\n            }\r\n          });\r\n        }\r\n      })(cell);\r\n    });\r\n\r\n  const getBustedMineField = (cell: Cell, callback: DraftCallback) =>\r\n    produce(mineField, (draft) => {\r\n      callback(draft);\r\n      draft.forEach((item) => {\r\n        const {\r\n          isMisplacedFlag,\r\n          isMined,\r\n          isBusted,\r\n          isFlagged,\r\n        } = new CellChecker(item);\r\n\r\n        if (isMisplacedFlag) {\r\n          item.appearance = CellAppearance.Wrong;\r\n        } else if (isMined && !isBusted && !isFlagged) {\r\n          item.appearance = CellAppearance.Visible;\r\n        }\r\n      });\r\n    });\r\n\r\n  const setupMineField = (cell: Cell) => {\r\n    setMineField(\r\n      getFloodFilledMineField(cell, (draft) => {\r\n        const restIndexes = difference(range(mineFieldLength), [\r\n          cell.index,\r\n          ...neighborsUtils.getIndexes(cell),\r\n        ]);\r\n        const minedIndexes = new Set<number>();\r\n\r\n        while (minedIndexes.size < minesCount) {\r\n          minedIndexes.add(\r\n            restIndexes[Math.floor(Math.random() * restIndexes.length)]\r\n          );\r\n        }\r\n\r\n        minedIndexes.forEach((index) => {\r\n          draft[index].value = CellValue.Mine;\r\n        });\r\n\r\n        draft.forEach((item) => {\r\n          if (!new CellChecker(item).isMined) {\r\n            item.value = neighborsUtils.countMined(draft, item);\r\n          }\r\n        });\r\n      })\r\n    );\r\n\r\n    setMineFieldStatus((prevMineFieldStatus) => ({\r\n      ...prevMineFieldStatus,\r\n      isSetup: true,\r\n    }));\r\n  };\r\n\r\n  const revealCell = (cell: Cell) => {\r\n    setMineField(\r\n      new CellChecker(cell).isMined\r\n        ? getBustedMineField(cell, (draft) => {\r\n            draft[cell.index].appearance = CellAppearance.Busted;\r\n          })\r\n        : getFloodFilledMineField(cell)\r\n    );\r\n  };\r\n\r\n  const toggleFlag = (cell: Cell) => {\r\n    const { isFlagged } = new CellChecker(cell);\r\n\r\n    setMineField((prevMineField) =>\r\n      produce(prevMineField, (draft) => {\r\n        draft[cell.index].appearance = isFlagged\r\n          ? CellAppearance.Hidden\r\n          : CellAppearance.Flagged;\r\n      })\r\n    );\r\n\r\n    setMineFieldStatus((prevMineFieldStatus) =>\r\n      produce(prevMineFieldStatus, (draft) => {\r\n        draft.hiddenMinesCount += isFlagged ? 1 : -1;\r\n      })\r\n    );\r\n  };\r\n\r\n  const revealNeighbors = (cell: Cell) => {\r\n    if (neighborsUtils.canFloodFill(mineField, cell)) {\r\n      setMineField(getFloodFilledMineField(cell));\r\n    } else if (neighborsUtils.canReveal(mineField, cell)) {\r\n      setMineField(\r\n        getBustedMineField(cell, (draft) => {\r\n          neighborsUtils.getIndexes(cell).forEach((index) => {\r\n            const neighbor = draft[index];\r\n            const { isMined, isFlagged, isMisplacedFlag } = new CellChecker(\r\n              neighbor\r\n            );\r\n\r\n            if (isMined && !isFlagged) {\r\n              neighbor.appearance = CellAppearance.Busted;\r\n            } else if (!isMisplacedFlag) {\r\n              neighbor.appearance = CellAppearance.Visible;\r\n            }\r\n          });\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setMineField(emptyMineField);\r\n    setMineFieldStatus(initialMineFieldStatus);\r\n  };\r\n\r\n  useDidUpdate(() => {\r\n    reset();\r\n  }, emptyMineField);\r\n\r\n  useDidUpdate(() => {\r\n    const mineFieldChecker = new MineFieldChecker(mineField);\r\n\r\n    if (mineFieldChecker.isBusted()) {\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isBusted: true,\r\n      }));\r\n    } else if (mineFieldChecker.isSolved()) {\r\n      setMineField((prevMineField) =>\r\n        produce(prevMineField, (draft) => {\r\n          draft.forEach((cell) => {\r\n            if (new CellChecker(cell).isMined) {\r\n              cell.appearance = CellAppearance.Flagged;\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSolved: true,\r\n        hiddenMinesCount: 0,\r\n      }));\r\n    }\r\n  }, mineField);\r\n\r\n  return {\r\n    mineField,\r\n    mineFieldParams,\r\n    mineFieldStatus,\r\n    setMineFieldParams,\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n    reset,\r\n  };\r\n};\r\n\r\nexport default useMineField;\r\n","import React, { memo } from 'react';\r\n\r\nconst formatCount = (count: number) => {\r\n  if (count < 1) {\r\n    return '000';\r\n  }\r\n\r\n  if (count < 10) {\r\n    return `00${count}`;\r\n  }\r\n\r\n  if (count < 100) {\r\n    return `0${count}`;\r\n  }\r\n\r\n  return count.toString();\r\n};\r\n\r\nconst Counter = ({ count }: { count: number }) => <>{formatCount(count)}</>;\r\n\r\nexport default memo(Counter);\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nimport styles from './Face.module.scss';\r\n\r\ninterface Props {\r\n  icon?: JSX.Element;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst Face = ({\r\n  icon = <FontAwesomeIcon icon={['far', 'meh']} />,\r\n  onClick,\r\n}: Props) => (\r\n  <button type=\"button\" className={styles.Face} onClick={onClick}>\r\n    {icon}\r\n  </button>\r\n);\r\n\r\nexport default memo(Face);\r\n","import { useCallback, useEffect, useRef } from 'react';\r\n\r\ntype Callback = (...args: never[]) => void;\r\n\r\nconst useCallbackRef = (callback: Callback) => {\r\n  const callbackRef = useRef<Callback>();\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  });\r\n\r\n  return useCallback((...args: []) => {\r\n    callbackRef.current?.(...args);\r\n  }, []);\r\n};\r\n\r\nexport default useCallbackRef;\r\n","import { useEffect, useRef } from 'react';\r\n\r\ntype Callback = () => void;\r\n\r\nconst useInterval = (callback: Callback, interval?: number) => {\r\n  const callbackRef = useRef<Callback>();\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!interval) {\r\n      return void 0;\r\n    }\r\n\r\n    const intervalId = setInterval(() => {\r\n      callbackRef.current?.();\r\n    }, interval);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [interval]);\r\n};\r\n\r\nexport default useInterval;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Counter from 'components/Counter';\r\nimport Face from 'components/Face';\r\nimport MinesweeperContext from 'contexts/minesweeper';\r\nimport useCallbackRef from 'hooks/use-callback-ref';\r\nimport useDidUpdate from 'hooks/use-did-update';\r\nimport useInterval from 'hooks/use-interval';\r\nimport React, { useContext, useState } from 'react';\r\n\r\nimport styles from './Indicators.module.scss';\r\n\r\nconst getFaceIcon = ({ isSolved, isBusted }: MineFieldStatus) => {\r\n  if (isSolved) {\r\n    return <FontAwesomeIcon icon={['far', 'smile']} />;\r\n  }\r\n\r\n  if (isBusted) {\r\n    return <FontAwesomeIcon icon={['far', 'frown']} />;\r\n  }\r\n\r\n  return void 0;\r\n};\r\n\r\nconst Indicators = () => {\r\n  const { mineFieldStatus, mineFieldParams, reset } = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const { isSetup, isSolved, isBusted, hiddenMinesCount } = mineFieldStatus;\r\n\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n\r\n  const handleFaceClick = useCallbackRef(() => {\r\n    setSecondsCount(0);\r\n    reset();\r\n  });\r\n\r\n  useInterval(\r\n    () => {\r\n      setSecondsCount(secondsCount + 1);\r\n    },\r\n    isSetup && !(isSolved || isBusted) ? 1e3 : void 0\r\n  );\r\n\r\n  useDidUpdate(() => {\r\n    setSecondsCount(0);\r\n  }, mineFieldParams);\r\n\r\n  return (\r\n    <div className={styles.Indicators}>\r\n      <Counter count={hiddenMinesCount} />\r\n      <Face icon={getFaceIcon(mineFieldStatus)} onClick={handleFaceClick} />\r\n      <Counter count={secondsCount} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Indicators;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\nconst Bomb = ({ className }: { className?: string }) => (\r\n  <button type=\"button\" className={className}>\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </button>\r\n);\r\n\r\nexport default Bomb;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport classNames from 'classnames';\r\nimport React, { memo, SyntheticEvent } from 'react';\r\nimport CellChecker from 'utils/cell-checker';\r\n\r\nimport Bomb from '../Bomb';\r\nimport styles from './Cell.module.scss';\r\n\r\ninterface Props {\r\n  cell: Cell;\r\n  onClick?: (cell: Cell) => void;\r\n  onMouseDown?: (event: SyntheticEvent<HTMLButtonElement>, cell: Cell) => void;\r\n  onContextMenu?: (cell: Cell) => void;\r\n}\r\n\r\nconst Cell = ({ cell, onClick, onMouseDown, onContextMenu }: Props) => {\r\n  const {\r\n    isHidden,\r\n    isEmpty,\r\n    isFlagged,\r\n    isMined,\r\n    isWrong,\r\n    isBusted,\r\n  } = new CellChecker(cell);\r\n\r\n  const { value } = cell;\r\n\r\n  const visibleStyles = classNames(styles.Cell, styles.Visible);\r\n\r\n  const handleClick = () => {\r\n    onClick?.(cell);\r\n  };\r\n\r\n  const handleContextMenu = () => {\r\n    onContextMenu?.(cell);\r\n  };\r\n\r\n  const handleMouseDown = (event: SyntheticEvent<HTMLButtonElement>) => {\r\n    onMouseDown?.(event, cell);\r\n  };\r\n\r\n  if (isHidden) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Cell\"\r\n        className={styles.Cell}\r\n        onClick={handleClick}\r\n        onContextMenu={handleContextMenu}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isFlagged) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className={styles.Cell}\r\n        onContextMenu={handleContextMenu}\r\n      >\r\n        <FontAwesomeIcon icon={['far', 'flag']} />\r\n      </button>\r\n    );\r\n  }\r\n\r\n  if (isEmpty) {\r\n    return <button type=\"button\" aria-label=\"Cell\" className={visibleStyles} />;\r\n  }\r\n\r\n  if (isBusted) {\r\n    return <Bomb className={classNames(styles.Cell, styles.Busted)} />;\r\n  }\r\n\r\n  if (isMined) {\r\n    return <Bomb className={visibleStyles} />;\r\n  }\r\n\r\n  if (isWrong) {\r\n    return <Bomb className={classNames(visibleStyles, styles.Wrong)} />;\r\n  }\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={classNames(visibleStyles, styles[`Value${value}`])}\r\n      onMouseDown={handleMouseDown}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(Cell);\r\n","import classNames from 'classnames';\r\nimport Cell from 'components/Cell';\r\nimport cellStyles from 'components/Cell/Cell.module.scss';\r\nimport MinesweeperContext from 'contexts/minesweeper';\r\nimport useCallbackRef from 'hooks/use-callback-ref';\r\nimport React, { SyntheticEvent, useContext } from 'react';\r\n\r\nimport styles from './MineField.module.scss';\r\n\r\nconst MineField = () => {\r\n  const {\r\n    mineFieldParams: { rowsCount },\r\n    mineField,\r\n    mineFieldStatus: { isSetup, isBusted, isSolved },\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const handleContextMenu = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleCellClick = useCallbackRef((cell: Cell) => {\r\n    (isSetup ? revealCell : setupMineField)(cell);\r\n  });\r\n\r\n  const handleCellMouseDown = useCallbackRef(\r\n    (\r\n      { target, nativeEvent }: SyntheticEvent<HTMLButtonElement>,\r\n      cell: Cell\r\n    ) => {\r\n      const handleMouseUp = (event: Event) => {\r\n        if ((nativeEvent as MouseEvent).which !== (event as MouseEvent).which) {\r\n          revealNeighbors(cell);\r\n        }\r\n\r\n        target.removeEventListener('mouseup', handleMouseUp);\r\n      };\r\n\r\n      target.addEventListener('mouseup', handleMouseUp);\r\n    }\r\n  );\r\n\r\n  const handleCellContextMenu = useCallbackRef((cell: Cell) => {\r\n    toggleFlag(cell);\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={styles.MineField}\r\n      style={{ width: rowsCount * parseFloat(cellStyles.cellSize) }}\r\n      onContextMenu={handleContextMenu}\r\n    >\r\n      <div\r\n        className={classNames(styles[`Row${rowsCount}`], {\r\n          [styles.Disabled]: isBusted || isSolved,\r\n        })}\r\n      >\r\n        {mineField.map((cell) => (\r\n          <Cell\r\n            cell={cell}\r\n            onClick={handleCellClick}\r\n            onMouseDown={handleCellMouseDown}\r\n            onContextMenu={handleCellContextMenu}\r\n            key={cell.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MineField;\r\n","import React, { memo } from 'react';\r\n\r\ninterface Props<T> {\r\n  item: T;\r\n  name: string;\r\n  checked?: boolean;\r\n  className?: string;\r\n  onChange?: (item: T) => void;\r\n}\r\n\r\nconst Radio = <T extends { name: string }>({\r\n  item,\r\n  name,\r\n  checked,\r\n  className,\r\n  onChange,\r\n}: Props<T>) => {\r\n  const handleChange = () => {\r\n    onChange?.(item);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"radio\"\r\n        name={name}\r\n        className={className}\r\n        defaultChecked={checked}\r\n        onChange={handleChange}\r\n      />\r\n      {item.name}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(Radio) as typeof Radio;\r\n","import Radio from 'components/Radio';\r\nimport mineFieldsParams from 'constants/mine-fields-params';\r\nimport MinesweeperContext from 'contexts/minesweeper';\r\nimport useCallbackRef from 'hooks/use-callback-ref';\r\nimport React, { useContext } from 'react';\r\n\r\nimport styles from './MineFieldParams.module.scss';\r\n\r\nconst MineFieldParams = () => {\r\n  const { mineFieldParams, setMineFieldParams } = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const handleMineFieldPropsChange = useCallbackRef(\r\n    (props: MineFieldParams) => {\r\n      setMineFieldParams(props);\r\n    }\r\n  );\r\n\r\n  return (\r\n    <form className={styles.MineFieldParams}>\r\n      {mineFieldsParams.map((item) => {\r\n        const { name, id } = item;\r\n\r\n        return (\r\n          <div key={id}>\r\n            <Radio\r\n              item={item}\r\n              name=\"MineFieldParams\"\r\n              className={styles.Radio}\r\n              checked={name === mineFieldParams.name}\r\n              onChange={handleMineFieldPropsChange}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MineFieldParams;\r\n","import Footer from 'components/Footer';\r\nimport Header from 'components/Header';\r\nimport MinesweeperContext from 'contexts/minesweeper';\r\nimport useMineField from 'hooks/use-mine-field';\r\nimport React from 'react';\r\n\r\nimport Indicators from '../Indicators';\r\nimport MineField from '../MineField';\r\nimport MineFieldParams from '../MineFieldParams';\r\nimport styles from './Minesweeper.module.scss';\r\n\r\nconst Minesweeper = () => (\r\n  <MinesweeperContext.Provider value={{ ...useMineField() }}>\r\n    <Header />\r\n    <main className={styles.Minesweeper}>\r\n      <Indicators />\r\n      <MineField />\r\n      <MineFieldParams />\r\n    </main>\r\n    <Footer />\r\n  </MinesweeperContext.Provider>\r\n);\r\n\r\nexport default Minesweeper;\r\n","import Minesweeper from 'containers/Minesweeper';\r\nimport React from 'react';\r\n\r\nconst App = () => <Minesweeper />;\r\n\r\nexport default App;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport {\r\n  faFlag,\r\n  faFrown,\r\n  faMeh,\r\n  faSmile,\r\n} from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n\r\nexport default setupIcons;\r\n","import 'index.scss';\r\n\r\nimport App from 'App';\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport setupIcons from 'setup-icons';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}