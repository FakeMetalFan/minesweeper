{"version":3,"sources":["const/index.ts","components/Footer/index.tsx","components/Header/index.tsx","utils/add-uuid.ts","components/Counter/index.tsx","components/FaceIcon/index.tsx","contexts/minesweeper.ts","hooks/use-did-update.ts","containers/Controls/index.tsx","hooks/use-interval.ts","components/BombIcon/index.tsx","utils/cell-checker.ts","utils/join-class-names.ts","components/CellFactory/index.tsx","utils/index-utils.ts","containers/MineField/index.tsx","components/RadioButton/index.tsx","containers/MineFieldProps/index.tsx","utils/mine-field-checker.ts","utils/neighbors-utils.ts","containers/Minesweeper/index.tsx","hooks/use-mine-field.ts","App.tsx","setupIcons.ts","index.tsx"],"names":["MineFieldRowsCount","MineFieldColumnsCount","MineFieldMinesCount","MineFieldPropsKey","CellValue","CellAppearance","Footer","classNamePrefix","className","href","target","rel","icon","Date","getFullYear","memo","Header","addUUID","item","uuid","UUID","smallMineFieldProps","name","rowsCount","SM","columnsCount","minesCount","mineFieldsProps","Map","set","MD","BG","formatCount","count","toString","Counter","FaceIcon","onClick","type","MinesweeperContext","createContext","mineField","mineFieldProps","defaultMineFieldProps","mineFieldStatus","isSetup","isBusted","isSolved","hiddenMinesCount","setMineFieldProps","setupMineField","revealCell","toggleFlag","revealNeighbors","reset","MinesweeperProvider","Provider","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","Controls","faceIcon","useContext","useState","secondsCount","setSecondsCount","handleFaceIconClick","useCallback","delay","fnRef","intervalId","setInterval","clearInterval","useInterval","BombIcon","CellChecker","cell","prop","criteria","this","checkCell","Empty","Mine","Incorrect","Busted","Hidden","Flagged","isMined","isFlagged","joinClassNames","classNames","filter","Boolean","join","trim","CellFactory","props","withBorderRight","withBorderBottom","onMouseDown","onContextMenu","value","isHidden","isEmpty","isIncorrect","classNameSuffix","handleContextMenu","aria-label","event","IndexUtils","mineFieldRowsCount","index","rowIndex","columnIndex","MineField","indexUtils","rowClassName","handleCellClick","handleCellMouseDown","nativeEvent","addEventListener","handleMouseUp","which","removeEventListener","handleCellContextMenu","style","width","preventDefault","map","cellIndex","to2D","RadioButton","inputName","checked","onChange","defaultChecked","MineFieldProps","handleMineFieldPropsChange","Array","from","values","MineFieldChecker","some","_","isValidArrayIndex","length","NeighborsUtils","mineFieldColumnsCount","indexes","rowIndexOffset","columnIndexOffset","targetedRowIndex","targetedColumnIndex","push","to1D","getIndexes","isUnsolved","countMined","countBy","neighbor","criteriaFn","reduce","acc","neighborIndex","Minesweeper","initialMineFieldProps","_setMineFieldProps","emptyMineField","useMemo","appearance","initialMineFieldStatus","neighborsUtils","setMineField","setMineFieldStatus","_getFloodFilledMineField","prevMineField","draftFn","produce","draft","Visible","floodFill","canFloodFill","forEach","_getBustedMineField","isSolvedWrong","minesIndexes","Set","size","add","Math","floor","random","prevMineFieldStatus","canReveal","mineFieldUtils","useMineField","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f0ef017.chunk.js","sourcesContent":["import { addUUID } from 'utils/add-uuid';\r\nimport { MineFieldsProps } from 'view-models';\r\n\r\n/* eslint-disable no-shadow */\r\nexport enum MineFieldRowsCount {\r\n  SM = 9,\r\n  MD = 16,\r\n  BG = 30,\r\n}\r\n\r\nexport enum MineFieldColumnsCount {\r\n  SM = 9,\r\n  MD = 16,\r\n  BG = 16,\r\n}\r\n\r\nexport enum MineFieldMinesCount {\r\n  SM = 10,\r\n  MD = 40,\r\n  BG = 99,\r\n}\r\n\r\nexport enum MineFieldPropsKey {\r\n  SM,\r\n  MD,\r\n  BG,\r\n}\r\n\r\nexport enum CellValue {\r\n  Empty,\r\n  One,\r\n  Two,\r\n  Three,\r\n  Four,\r\n  Five,\r\n  Six,\r\n  Seven,\r\n  Eight,\r\n  Mine,\r\n  Incorrect,\r\n  Busted,\r\n}\r\n\r\nexport enum CellAppearance {\r\n  Hidden,\r\n  Visible,\r\n  Flagged,\r\n}\r\n\r\nconst smallMineFieldProps = addUUID({\r\n  name: 'Beginner',\r\n  rowsCount: MineFieldRowsCount.SM,\r\n  columnsCount: MineFieldColumnsCount.SM,\r\n  minesCount: MineFieldMinesCount.SM,\r\n});\r\n\r\nexport const mineFieldsProps: MineFieldsProps = new Map()\r\n  .set(MineFieldPropsKey.SM, smallMineFieldProps)\r\n  .set(\r\n    MineFieldPropsKey.MD,\r\n    addUUID({\r\n      name: 'Intermediate',\r\n      rowsCount: MineFieldRowsCount.MD,\r\n      columnsCount: MineFieldColumnsCount.MD,\r\n      minesCount: MineFieldMinesCount.MD,\r\n    })\r\n  )\r\n  .set(\r\n    MineFieldPropsKey.BG,\r\n    addUUID({\r\n      name: 'Expert',\r\n      rowsCount: MineFieldRowsCount.BG,\r\n      columnsCount: MineFieldColumnsCount.BG,\r\n      minesCount: MineFieldMinesCount.BG,\r\n    })\r\n  );\r\n\r\nexport { smallMineFieldProps as defaultMineFieldProps };\r\n","import './Footer.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nconst Footer = () => {\r\n  const classNamePrefix = 'Footer';\r\n\r\n  return (\r\n    <footer className={classNamePrefix}>\r\n      <span>\r\n        Powered by\r\n        <a\r\n          className={`${classNamePrefix}Link`}\r\n          href=\"https://github.com/FakeMetalFan\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <FontAwesomeIcon icon={['fab', 'github']} />\r\n        </a>\r\n        &copy;<span>{new Date().getFullYear()}</span>\r\n      </span>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default memo(Footer);\r\n","import './Header.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nconst Header = () => {\r\n  const classNamePrefix = 'Header';\r\n\r\n  return (\r\n    <header className={classNamePrefix}>\r\n      <span className={`${classNamePrefix}Title`}>Minesweeper</span>\r\n\r\n      <a\r\n        className={`${classNamePrefix}Link`}\r\n        href=\"https://github.com/FakeMetalFan/minesweeper\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default memo(Header);\r\n","import { v4 as UUID } from 'uuid';\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport const addUUID = <T extends {}>(item: T) => ({ ...item, uuid: UUID() });\r\n","import React, { memo } from 'react';\r\n\r\nconst formatCount = (count: number) => {\r\n  if (count < 1) {\r\n    return '000';\r\n  }\r\n\r\n  if (count < 10) {\r\n    return `00${count}`;\r\n  }\r\n\r\n  if (count < 100) {\r\n    return `0${count}`;\r\n  }\r\n\r\n  return count.toString();\r\n};\r\n\r\nconst Counter = ({ count }: Readonly<{ readonly count: number }>) => (\r\n  <div className=\"Counter\">{formatCount(count)}</div>\r\n);\r\n\r\nexport default memo(Counter);\r\n","import './FaceIcon.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\ntype FaceIconProps = Readonly<{\r\n  readonly icon?: JSX.Element;\r\n  readonly onClick: () => void;\r\n}>;\r\n\r\nconst FaceIcon = ({\r\n  icon = <FontAwesomeIcon icon={['far', 'meh']} />,\r\n  onClick,\r\n}: FaceIconProps) => (\r\n  <button type=\"button\" className=\"FaceIcon\" onClick={onClick}>\r\n    {icon}\r\n  </button>\r\n);\r\n\r\nexport default memo(FaceIcon);\r\n","import { defaultMineFieldProps, mineFieldsProps } from 'const';\r\nimport { useMineField } from 'hooks/use-mine-field';\r\nimport { createContext } from 'react';\r\nimport { MineFieldsProps } from 'view-models';\r\n\r\ntype MinesweeperContextValue = Readonly<\r\n  ReturnType<typeof useMineField> & {\r\n    readonly mineFieldsProps: MineFieldsProps;\r\n  }\r\n>;\r\n\r\nexport const MinesweeperContext = createContext<MinesweeperContextValue>({\r\n  mineFieldsProps,\r\n  mineField: [],\r\n  mineFieldProps: defaultMineFieldProps,\r\n  mineFieldStatus: {\r\n    isSetup: false,\r\n    isBusted: false,\r\n    isSolved: false,\r\n    hiddenMinesCount: 0,\r\n  },\r\n  /* eslint-disable @typescript-eslint/no-empty-function */\r\n  setMineFieldProps: () => {},\r\n  setupMineField: () => {},\r\n  revealCell: () => {},\r\n  toggleFlag: () => {},\r\n  revealNeighbors: () => {},\r\n  reset: () => {},\r\n});\r\n\r\nexport const { Provider: MinesweeperProvider } = MinesweeperContext;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const useDidUpdate = (fn: () => void, ...deps: any[]) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      fn();\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n};\r\n","import './Controls.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Counter from 'components/Counter';\r\nimport FaceIcon from 'components/FaceIcon';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\nimport { useInterval } from 'hooks/use-interval';\r\nimport React, { useCallback, useContext, useState } from 'react';\r\n\r\nconst INTERVAL_DELAY = 1e3;\r\n\r\nconst Controls = () => {\r\n  const {\r\n    mineFieldStatus: { isSetup, isSolved, isBusted, hiddenMinesCount },\r\n    mineFieldProps,\r\n    reset,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n\r\n  let faceIcon: JSX.Element | undefined;\r\n\r\n  if (isSolved) {\r\n    faceIcon = <FontAwesomeIcon icon={['far', 'smile']} />;\r\n  } else if (isBusted) {\r\n    faceIcon = <FontAwesomeIcon icon={['far', 'frown']} />;\r\n  }\r\n\r\n  const handleFaceIconClick = useCallback(() => {\r\n    setSecondsCount(0);\r\n    reset();\r\n  }, [reset]);\r\n\r\n  useInterval(\r\n    () => {\r\n      setSecondsCount(secondsCount + 1);\r\n    },\r\n    isSetup && !(isSolved || isBusted) ? INTERVAL_DELAY : void 0\r\n  );\r\n\r\n  useDidUpdate(() => {\r\n    setSecondsCount(0);\r\n  }, mineFieldProps);\r\n\r\n  return (\r\n    <div className=\"Controls\">\r\n      <Counter count={hiddenMinesCount} />\r\n      <FaceIcon icon={faceIcon} onClick={handleFaceIconClick} />\r\n      <Counter count={secondsCount} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import { useEffect, useRef } from 'react';\r\n\r\ntype Fn = () => void;\r\n\r\nexport const useInterval = (fn: Fn, delay?: number) => {\r\n  const fnRef = useRef<Fn>();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  });\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current?.();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\nconst BombIcon = ({ className }: Readonly<{ readonly className?: string }>) => (\r\n  <button type=\"button\" className={className}>\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </button>\r\n);\r\n\r\nexport default BombIcon; // CellFactory is already optimized, no need for React.memo here;\r\n","import { CellAppearance, CellValue } from 'const';\r\nimport { CellVM } from 'view-models';\r\n\r\nexport class CellChecker {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly cell: CellVM) {}\r\n\r\n  private checkCell(prop: keyof CellVM, criteria: CellValue | CellAppearance) {\r\n    return this.cell[prop] === criteria;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.checkCell('value', CellValue.Empty);\r\n  }\r\n\r\n  get isMined() {\r\n    return this.checkCell('value', CellValue.Mine);\r\n  }\r\n\r\n  get isIncorrect() {\r\n    return this.checkCell('value', CellValue.Incorrect);\r\n  }\r\n\r\n  get isBusted() {\r\n    return this.checkCell('value', CellValue.Busted);\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.checkCell('appearance', CellAppearance.Hidden);\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.checkCell('appearance', CellAppearance.Flagged);\r\n  }\r\n\r\n  get isUnsolved() {\r\n    return this.isMined && !this.isFlagged;\r\n  }\r\n\r\n  get isSolvedWrong() {\r\n    return !this.isMined && this.isFlagged;\r\n  }\r\n}\r\n","export const joinClassNames = (...classNames: (string | undefined)[]) =>\r\n  classNames.filter(Boolean).join(' ').trim();\r\n","import './CellFactory.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport BombIcon from 'components/BombIcon';\r\nimport React, { memo } from 'react';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { joinClassNames } from 'utils/join-class-names';\r\nimport { CellEvent, CellVM } from 'view-models';\r\n\r\ntype CellFactoryProps = Readonly<{\r\n  readonly cell: CellVM;\r\n  readonly withBorderRight?: boolean;\r\n  readonly withBorderBottom?: boolean;\r\n  readonly onClick: (cell: CellVM) => void;\r\n  readonly onMouseDown: (event: CellEvent, cell: CellVM) => void;\r\n  readonly onContextMenu: (cell: CellVM) => void;\r\n}>;\r\n\r\nconst CellFactory = (props: CellFactoryProps) => {\r\n  const {\r\n    cell,\r\n    withBorderRight,\r\n    withBorderBottom,\r\n    onClick,\r\n    onMouseDown,\r\n    onContextMenu,\r\n  } = props;\r\n\r\n  const { value } = cell;\r\n\r\n  const {\r\n    isHidden,\r\n    isEmpty,\r\n    isFlagged,\r\n    isMined,\r\n    isIncorrect,\r\n    isBusted,\r\n  } = new CellChecker(cell);\r\n\r\n  const classNamePrefix = 'Cell';\r\n\r\n  const classNameSuffix = joinClassNames(\r\n    withBorderRight ? 'Cell__border-right' : '',\r\n    withBorderBottom ? 'Cell__border-bottom' : ''\r\n  );\r\n\r\n  const handleClick = () => {\r\n    onClick(cell);\r\n  };\r\n\r\n  const handleContextMenu = () => {\r\n    onContextMenu(cell);\r\n  };\r\n\r\n  const handleMouseDown = (event: CellEvent) => {\r\n    onMouseDown(event, cell);\r\n  };\r\n\r\n  if (isHidden) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Cell\"\r\n        className={joinClassNames(classNamePrefix, classNameSuffix)}\r\n        onClick={handleClick}\r\n        onContextMenu={handleContextMenu}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isFlagged) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className={joinClassNames(classNamePrefix, classNameSuffix)}\r\n        onContextMenu={handleContextMenu}\r\n      >\r\n        <FontAwesomeIcon icon={['far', 'flag']} />\r\n      </button>\r\n    );\r\n  }\r\n\r\n  if (isEmpty) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Cell\"\r\n        className={joinClassNames(\r\n          classNamePrefix,\r\n          `${classNamePrefix}__empty`,\r\n          classNameSuffix\r\n        )}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isMined) {\r\n    return (\r\n      <BombIcon className={joinClassNames(classNamePrefix, classNameSuffix)} />\r\n    );\r\n  }\r\n\r\n  if (isIncorrect) {\r\n    return (\r\n      <BombIcon\r\n        className={joinClassNames(\r\n          classNamePrefix,\r\n          `${classNamePrefix}__incorrect`,\r\n          classNameSuffix\r\n        )}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isBusted) {\r\n    return (\r\n      <BombIcon\r\n        className={joinClassNames(\r\n          classNamePrefix,\r\n          `${classNamePrefix}__busted`,\r\n          classNameSuffix\r\n        )}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={joinClassNames(\r\n        classNamePrefix,\r\n        `${classNamePrefix}__${value}`,\r\n        classNameSuffix\r\n      )}\r\n      onMouseDown={handleMouseDown}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(CellFactory);\r\n","export class IndexUtils {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly mineFieldRowsCount: number) {}\r\n\r\n  to2D(index: number) {\r\n    const rowIndex = index % this.mineFieldRowsCount;\r\n\r\n    return {\r\n      rowIndex,\r\n      columnIndex: (index - rowIndex) / this.mineFieldRowsCount,\r\n    };\r\n  }\r\n\r\n  to1D(rowIndex: number, columnIndex: number) {\r\n    return columnIndex * this.mineFieldRowsCount + rowIndex;\r\n  }\r\n}\r\n","import './MineField.scss';\r\n\r\nimport CellFactory from 'components/CellFactory';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport React, { SyntheticEvent, useCallback, useContext } from 'react';\r\nimport { IndexUtils } from 'utils/index-utils';\r\nimport { joinClassNames } from 'utils/join-class-names';\r\nimport { CellEvent, CellVM } from 'view-models';\r\n\r\nconst CELL_SIZE = 32;\r\n\r\nconst MineField = () => {\r\n  const {\r\n    mineFieldProps: { rowsCount, columnsCount },\r\n    mineField,\r\n    mineFieldStatus: { isSetup, isBusted, isSolved },\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const indexUtils = new IndexUtils(rowsCount);\r\n\r\n  const classNamePrefix = 'MineField';\r\n  const rowClassName = `${classNamePrefix}Row`;\r\n\r\n  const handleContextMenu = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleCellClick = useCallback(\r\n    (cell: CellVM) => {\r\n      (isSetup ? revealCell : setupMineField)(cell);\r\n    },\r\n    [isSetup, revealCell, setupMineField]\r\n  );\r\n\r\n  const handleCellMouseDown = useCallback(\r\n    ({ target, nativeEvent }: CellEvent, cell: CellVM) => {\r\n      const handleMouseUp = (event: Event) => {\r\n        if ((nativeEvent as MouseEvent).which !== (event as MouseEvent).which) {\r\n          revealNeighbors(cell);\r\n        }\r\n\r\n        target.removeEventListener('mouseup', handleMouseUp);\r\n      };\r\n\r\n      target.addEventListener('mouseup', handleMouseUp);\r\n    },\r\n    [revealNeighbors]\r\n  );\r\n\r\n  const handleCellContextMenu = useCallback(\r\n    (cell: CellVM) => {\r\n      toggleFlag(cell);\r\n    },\r\n    [toggleFlag]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={classNamePrefix}\r\n      style={{ width: rowsCount * CELL_SIZE }}\r\n      onContextMenu={handleContextMenu}\r\n    >\r\n      <div\r\n        className={joinClassNames(\r\n          rowClassName,\r\n          `${isBusted || isSolved ? `${rowClassName}__disabled` : ''}`\r\n        )}\r\n      >\r\n        {mineField.map((cell, cellIndex) => {\r\n          const { rowIndex, columnIndex } = indexUtils.to2D(cellIndex);\r\n\r\n          return (\r\n            <CellFactory\r\n              cell={cell}\r\n              withBorderRight={rowIndex === rowsCount - 1}\r\n              withBorderBottom={columnIndex === columnsCount - 1}\r\n              onClick={handleCellClick}\r\n              onMouseDown={handleCellMouseDown}\r\n              onContextMenu={handleCellContextMenu}\r\n              key={cell.uuid}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MineField;\r\n","import React, { memo } from 'react';\r\n\r\ntype RadioButtonProps<T> = Readonly<{\r\n  readonly item: T;\r\n  readonly inputName: string;\r\n  readonly checked?: boolean;\r\n  readonly className?: string;\r\n  readonly onChange: (item: T) => void;\r\n}>;\r\n\r\nconst RadioButton = <T extends Readonly<{ readonly name: string }>>({\r\n  item,\r\n  inputName,\r\n  checked,\r\n  className,\r\n  onChange,\r\n}: RadioButtonProps<T>) => {\r\n  const handleChange = () => {\r\n    onChange(item);\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <input\r\n        type=\"radio\"\r\n        name={inputName}\r\n        className={className ? `${className}Radio` : ''}\r\n        defaultChecked={checked}\r\n        onChange={handleChange}\r\n      />\r\n      &nbsp;\r\n      {item.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(RadioButton) as typeof RadioButton;\r\n","import './MineFieldProps.scss';\r\n\r\nimport RadioButton from 'components/RadioButton';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport { MineFieldPropsVM } from 'view-models';\r\n\r\nconst MineFieldProps = () => {\r\n  const { mineFieldsProps, mineFieldProps, setMineFieldProps } = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const classNamePrefix = 'MineFieldProps';\r\n\r\n  const handleMineFieldPropsChange = useCallback(\r\n    (props: MineFieldPropsVM) => {\r\n      setMineFieldProps(props);\r\n    },\r\n    [setMineFieldProps]\r\n  );\r\n\r\n  return (\r\n    <form className={classNamePrefix}>\r\n      {Array.from(mineFieldsProps.values()).map((item) => (\r\n        <RadioButton\r\n          item={item}\r\n          inputName=\"MineFieldProps\"\r\n          checked={item.name === mineFieldProps.name}\r\n          className={`${classNamePrefix}RadioButton`}\r\n          onChange={handleMineFieldPropsChange}\r\n          key={item.uuid}\r\n        />\r\n      ))}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MineFieldProps;\r\n","import * as _ from 'lodash';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { MineFieldVM } from 'view-models';\r\n\r\nexport class MineFieldChecker {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly mineField: MineFieldVM) {}\r\n\r\n  isBusted() {\r\n    return this.mineField.some((cell) => new CellChecker(cell).isBusted);\r\n  }\r\n\r\n  isSolved() {\r\n    return !_.reject(\r\n      this.mineField,\r\n      (cell) => new CellChecker(cell).isMined\r\n    ).some((cell) => new CellChecker(cell).isHidden);\r\n  }\r\n}\r\n","import { CellChecker } from 'utils/cell-checker';\r\nimport { IndexUtils } from 'utils/index-utils';\r\nimport { CellVM, MineFieldVM } from 'view-models';\r\n\r\nconst isValidArrayIndex = (index: number, length: number) =>\r\n  index > -1 && index < length;\r\n\r\nexport class NeighborsUtils {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(\r\n    private readonly mineFieldRowsCount: number,\r\n    private readonly mineFieldColumnsCount: number,\r\n    private readonly indexUtils = new IndexUtils(mineFieldRowsCount)\r\n  ) {}\r\n\r\n  getIndexes({ index }: CellVM) {\r\n    const indexes: number[] = [];\r\n\r\n    const { rowIndex, columnIndex } = this.indexUtils.to2D(index);\r\n\r\n    for (let rowIndexOffset = -1; rowIndexOffset < 2; rowIndexOffset += 1) {\r\n      for (\r\n        let columnIndexOffset = -1;\r\n        columnIndexOffset < 2;\r\n        columnIndexOffset += 1\r\n      ) {\r\n        if (rowIndexOffset || columnIndexOffset) {\r\n          const targetedRowIndex = rowIndex + rowIndexOffset;\r\n          const targetedColumnIndex = columnIndex + columnIndexOffset;\r\n\r\n          if (\r\n            isValidArrayIndex(targetedRowIndex, this.mineFieldRowsCount) &&\r\n            isValidArrayIndex(targetedColumnIndex, this.mineFieldColumnsCount)\r\n          ) {\r\n            indexes.push(\r\n              this.indexUtils.to1D(targetedRowIndex, targetedColumnIndex)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return indexes;\r\n  }\r\n\r\n  canFloodFill(mineField: MineFieldVM, cell: CellVM) {\r\n    return !this.getIndexes(cell).some(\r\n      (index) => new CellChecker(mineField[index]).isUnsolved\r\n    );\r\n  }\r\n\r\n  canReveal(mineField: MineFieldVM, cell: CellVM) {\r\n    return (\r\n      this.countMined(mineField, cell) ===\r\n      this.countBy(\r\n        mineField,\r\n        cell,\r\n        (neighbor) => new CellChecker(neighbor).isFlagged\r\n      )\r\n    );\r\n  }\r\n\r\n  countMined(mineField: MineFieldVM, cell: CellVM) {\r\n    return this.countBy(\r\n      mineField,\r\n      cell,\r\n      (neighbor) => new CellChecker(neighbor).isMined\r\n    );\r\n  }\r\n\r\n  private countBy(\r\n    mineField: MineFieldVM,\r\n    cell: CellVM,\r\n    criteriaFn: (item: CellVM) => boolean\r\n  ) {\r\n    return this.getIndexes(cell).reduce(\r\n      (acc, neighborIndex) =>\r\n        criteriaFn(mineField[neighborIndex]) ? acc + 1 : acc,\r\n      0\r\n    );\r\n  }\r\n}\r\n","import './Minesweeper.scss';\r\n\r\nimport Footer from 'components/Footer';\r\nimport Header from 'components/Header';\r\nimport { defaultMineFieldProps, mineFieldsProps } from 'const';\r\nimport Controls from 'containers/Controls';\r\nimport MineField from 'containers/MineField';\r\nimport MineFieldProps from 'containers/MineFieldProps';\r\nimport { MinesweeperProvider } from 'contexts/minesweeper';\r\nimport { useMineField } from 'hooks/use-mine-field';\r\nimport React from 'react';\r\n\r\nconst Minesweeper = () => {\r\n  const mineField = useMineField(defaultMineFieldProps);\r\n\r\n  return (\r\n    <MinesweeperProvider value={{ ...mineField, mineFieldsProps }}>\r\n      <Header />\r\n\r\n      <main className=\"Minesweeper\">\r\n        <Controls />\r\n        <MineField />\r\n        <MineFieldProps />\r\n      </main>\r\n\r\n      <Footer />\r\n    </MinesweeperProvider>\r\n  );\r\n};\r\n\r\nexport default Minesweeper;\r\n","import { CellAppearance, CellValue } from 'const';\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\nimport produce, { Draft } from 'immer';\r\nimport * as _ from 'lodash';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport { addUUID } from 'utils/add-uuid';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { MineFieldChecker } from 'utils/mine-field-checker';\r\nimport { NeighborsUtils } from 'utils/neighbors-utils';\r\nimport { CellVM, MineFieldPropsVM, MineFieldVM } from 'view-models';\r\n\r\ntype DraftFn = (mineField: Draft<MineFieldVM>) => void;\r\n\r\nexport const useMineField = (initialMineFieldProps: MineFieldPropsVM) => {\r\n  const [mineFieldProps, _setMineFieldProps] = useState(initialMineFieldProps);\r\n\r\n  const { rowsCount, columnsCount, minesCount } = mineFieldProps;\r\n\r\n  const length = rowsCount * columnsCount;\r\n\r\n  const emptyMineField = useMemo(\r\n    () =>\r\n      Array.from({ length }, (item, index) =>\r\n        addUUID({\r\n          index,\r\n          value: CellValue.Empty,\r\n          appearance: CellAppearance.Hidden,\r\n        })\r\n      ),\r\n    [length]\r\n  );\r\n\r\n  const initialMineFieldStatus = useMemo(\r\n    () => ({\r\n      isSetup: false,\r\n      isBusted: false,\r\n      isSolved: false,\r\n      hiddenMinesCount: minesCount,\r\n    }),\r\n    [minesCount]\r\n  );\r\n\r\n  const neighborsUtils = useMemo(\r\n    () => new NeighborsUtils(rowsCount, columnsCount),\r\n    [rowsCount, columnsCount]\r\n  );\r\n\r\n  const [mineField, setMineField] = useState(emptyMineField);\r\n\r\n  const [mineFieldStatus, setMineFieldStatus] = useState(\r\n    initialMineFieldStatus\r\n  );\r\n\r\n  const _getFloodFilledMineField = useCallback(\r\n    (prevMineField: CellVM[], cell: CellVM, draftFn?: DraftFn) =>\r\n      produce(prevMineField, (draft) => {\r\n        draftFn?.(draft);\r\n\r\n        /* eslint-disable no-param-reassign */\r\n        draft[cell.index].appearance = CellAppearance.Visible;\r\n\r\n        (function floodFill(target: CellVM) {\r\n          if (neighborsUtils.canFloodFill(draft, target)) {\r\n            neighborsUtils.getIndexes(target).forEach((index) => {\r\n              const neighbor = draft[index];\r\n\r\n              const { isMined, isHidden, isFlagged } = new CellChecker(\r\n                neighbor\r\n              );\r\n\r\n              if (!isMined && isHidden && !isFlagged) {\r\n                neighbor.appearance = CellAppearance.Visible;\r\n\r\n                floodFill(neighbor);\r\n              }\r\n            });\r\n          }\r\n        })(cell);\r\n      }),\r\n    [neighborsUtils]\r\n  );\r\n\r\n  const _getBustedMineField = useCallback(\r\n    (prevMineField: CellVM[], draftFn: DraftFn) =>\r\n      produce(prevMineField, (draft) => {\r\n        draftFn(draft);\r\n\r\n        draft.forEach((cell, index) => {\r\n          const { isUnsolved, isSolvedWrong } = new CellChecker(cell);\r\n\r\n          if (isUnsolved) {\r\n            cell.appearance = CellAppearance.Visible;\r\n          } else if (isSolvedWrong) {\r\n            draft[index] = {\r\n              ...cell,\r\n              value: CellValue.Incorrect,\r\n              appearance: CellAppearance.Visible,\r\n            };\r\n          }\r\n        });\r\n      }),\r\n    []\r\n  );\r\n\r\n  const setMineFieldProps = useCallback((props: MineFieldPropsVM) => {\r\n    _setMineFieldProps(props);\r\n  }, []);\r\n\r\n  const setupMineField = useCallback(\r\n    (cell: CellVM) => {\r\n      setMineField((prevMineField) =>\r\n        _getFloodFilledMineField(prevMineField, cell, (draft) => {\r\n          const indexes = _.difference(_.range(length), [\r\n            cell.index,\r\n            ...neighborsUtils.getIndexes(cell),\r\n          ]);\r\n\r\n          const minesIndexes = new Set<number>();\r\n\r\n          while (minesIndexes.size < minesCount) {\r\n            minesIndexes.add(\r\n              indexes[Math.floor(Math.random() * indexes.length)]\r\n            );\r\n          }\r\n\r\n          minesIndexes.forEach((index) => {\r\n            draft[index].value = CellValue.Mine;\r\n          });\r\n\r\n          draft.forEach((item) => {\r\n            if (!new CellChecker(item).isMined) {\r\n              item.value = neighborsUtils.countMined(draft, item);\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSetup: true,\r\n      }));\r\n    },\r\n    [_getFloodFilledMineField, length, minesCount, neighborsUtils]\r\n  );\r\n\r\n  const revealCell = useCallback(\r\n    (cell: CellVM) => {\r\n      setMineField((prevMineField) =>\r\n        new CellChecker(cell).isMined\r\n          ? _getBustedMineField(prevMineField, (draft) => {\r\n              draft[cell.index] = {\r\n                ...cell,\r\n                value: CellValue.Busted,\r\n                appearance: CellAppearance.Visible,\r\n              };\r\n            })\r\n          : _getFloodFilledMineField(prevMineField, cell)\r\n      );\r\n    },\r\n    [_getBustedMineField, _getFloodFilledMineField]\r\n  );\r\n\r\n  const toggleFlag = useCallback((cell: CellVM) => {\r\n    const { isFlagged } = new CellChecker(cell);\r\n\r\n    setMineField((prevMineField) =>\r\n      produce(prevMineField, (draft) => {\r\n        draft[cell.index].appearance = isFlagged\r\n          ? CellAppearance.Hidden\r\n          : CellAppearance.Flagged;\r\n      })\r\n    );\r\n\r\n    setMineFieldStatus((prevMineFieldStatus) =>\r\n      produce(prevMineFieldStatus, (draft) => {\r\n        draft.hiddenMinesCount += isFlagged ? 1 : -1;\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const revealNeighbors = useCallback(\r\n    (cell: CellVM) => {\r\n      setMineField((prevMineField) => {\r\n        if (neighborsUtils.canFloodFill(prevMineField, cell)) {\r\n          return _getFloodFilledMineField(prevMineField, cell);\r\n        }\r\n\r\n        if (neighborsUtils.canReveal(prevMineField, cell)) {\r\n          return _getBustedMineField(prevMineField, (draft) => {\r\n            neighborsUtils.getIndexes(cell).forEach((index) => {\r\n              const neighbor = draft[index];\r\n\r\n              const { isUnsolved, isSolvedWrong } = new CellChecker(neighbor);\r\n\r\n              if (isUnsolved) {\r\n                neighbor.value = CellValue.Busted;\r\n              } else if (isSolvedWrong) {\r\n                neighbor.value = CellValue.Incorrect;\r\n              }\r\n\r\n              neighbor.appearance = CellAppearance.Visible;\r\n            });\r\n          });\r\n        }\r\n\r\n        return prevMineField;\r\n      });\r\n    },\r\n    [_getBustedMineField, _getFloodFilledMineField, neighborsUtils]\r\n  );\r\n\r\n  const reset = useCallback(() => {\r\n    setMineField(emptyMineField);\r\n    setMineFieldStatus(initialMineFieldStatus);\r\n  }, [emptyMineField, initialMineFieldStatus]);\r\n\r\n  useDidUpdate(() => {\r\n    reset();\r\n  }, emptyMineField);\r\n\r\n  useDidUpdate(() => {\r\n    const mineFieldUtils = new MineFieldChecker(mineField);\r\n\r\n    if (mineFieldUtils.isBusted()) {\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isBusted: true,\r\n      }));\r\n    } else if (mineFieldUtils.isSolved()) {\r\n      setMineField((prevMineField) =>\r\n        produce(prevMineField, (draft) => {\r\n          draft.forEach((cell) => {\r\n            if (new CellChecker(cell).isMined) {\r\n              cell.appearance = CellAppearance.Flagged;\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSolved: true,\r\n        hiddenMinesCount: 0,\r\n      }));\r\n    }\r\n  }, mineField);\r\n\r\n  return {\r\n    mineField,\r\n    mineFieldProps,\r\n    mineFieldStatus,\r\n    setMineFieldProps,\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n    reset,\r\n  };\r\n};\r\n","import Minesweeper from 'containers/Minesweeper';\r\nimport React from 'react';\r\n\r\nconst App = () => <Minesweeper />;\r\n\r\nexport default App;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport {\r\n  faFlag,\r\n  faFrown,\r\n  faMeh,\r\n  faSmile,\r\n} from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import 'index.scss';\r\n\r\nimport App from 'App';\r\nimport React, { StrictMode } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}