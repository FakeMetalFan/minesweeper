{"version":3,"sources":["core/Footer/Footer.js","core/Header/Header.js","components/CellFactory/CellFactory.js","components/Field/Field.js","hooks/use-did-update.js","utils/count-formatter.js","components/Indicators/Indicators.js","const/cell-value.js","const/cell-state.js","const/field-height.js","const/field-producer-type.js","const/field-width.js","const/mines-count.js","view-models/internals/cell.js","view-models/internals/cell-address-utils.js","view-models/internals/cell-neighbors-utils.js","view-models/internals/field-producer.js","view-models/field-producer-factory.js","core/Minesweeper/Minesweeper.js","App.js","setupIcons.js","index.js"],"names":["Footer","className","href","target","rel","icon","Date","getFullYear","Header","CellFactory","state","cellRevealHandler","flagPlantingHandler","neighborsRevealHandler","isHidden","isFlagged","isEmpty","isMined","isIncorrectGuess","isBustedMine","value","onClick","onContextMenu","onMouseDown","Field","columnsCount","disabled","style","gridTemplateColumns","event","preventDefault","map","cell","address","key","which","nativeEvent","addEventListener","mouseupHandler","removeEventListener","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","formatCount","count","Indicators","minesCount","smileyFaceClickHandler","shouldStartCountingSeconds","isBust","isVictory","useState","secondsCount","setSecondsCount","intervalId","setInterval","seconds","clearInterval","cellValue","cellState","Hidden","Visible","Flagged","fieldHeight","fieldProducerType","fieldWidth","Cell","immerable","this","CellAddressUtils","_fieldWidth","rowAddress","cellAddress","CellNeighborsUtils","_fieldHeight","_cellAddressUtils","getNeighborsAddresses","some","addr","isUnrevealedMine","to2DAddresses","addresses","rowAddressOffset","cellAddressOffset","rowAddressWithOffset","cellAddressWithOffset","_doesAddressExist","push","to1DAddress","_countNeighborsBy","countMinedNeighbors","propName","reduce","acc","criteria","FieldProducer","width","height","_height","_cellNeighborsUtils","Array","from","length","_length","_getFloodFilledState","produce","draft","difference","range","randomAddressesSet","Set","size","add","Math","random","forEach","_getBustedState","isFloodFillAble","canRevealNeighbors","isMisplacedFlag","cloneDeep","floodFill","neighborAddress","FieldProducerFactory","type","Error","Minesweeper","fieldProducer","field","setField","setMinesCount","isInit","setIsInit","setIsBust","setIsVictory","getEmptyState","reject","getMinesMarkedState","getCellRevealedState","getInitialState","getFlagPlantedState","getNeighborsRevealedState","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cd7acaa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => (\r\n  <footer>\r\n    <span>\r\n      Powered by\r\n      <a className='icon' href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n      &copy;<span>{new Date().getFullYear()}</span>\r\n    </span>\r\n  </footer>\r\n);\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => (\r\n  <header>\r\n    <span className='title'>Minesweeper</span>\r\n\r\n    <a className='icon' href='https://github.com/FakeMetalFan/minesweeper' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n  </header>\r\n);\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './CellFactory.scss';\r\n\r\nexport const CellFactory = ({ state, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\r\n  const { isHidden, isFlagged, isEmpty, isMined, isIncorrectGuess, isBustedMine, value } = state;\r\n\r\n  if (isHidden) return (<button className='cell' onClick={cellRevealHandler} onContextMenu={flagPlantingHandler} />);\r\n\r\n  if (isFlagged) return (<button className='cell' onContextMenu={flagPlantingHandler}>\r\n    <FontAwesomeIcon icon={['far', 'flag']} />\r\n  </button>);\r\n\r\n  if (isEmpty) return (<button className='cell cell__visible' />);\r\n\r\n  if (isMined || isIncorrectGuess || isBustedMine) return (<button\r\n    className={`cell ${isIncorrectGuess ? 'cell__incorrect-guess' : isBustedMine ? 'cell__busted-mine' : ''}`}\r\n  >\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </button>);\r\n\r\n  return (<button className={`cell cell__visible cell__visible__${value}`} onMouseDown={neighborsRevealHandler}>\r\n    {value}\r\n  </button>);\r\n};\r\n","import React from 'react';\r\n\r\nimport { CellFactory } from '../';\r\nimport './Field.scss';\r\n\r\nexport const Field = ({\r\n  columnsCount,\r\n  disabled,\r\n  state,\r\n  cellRevealHandler,\r\n  flagPlantingHandler,\r\n  neighborsRevealHandler,\r\n}) => (\r\n  <div\r\n    className={`field${disabled ? ' disabled' : ''}`}\r\n    style={{gridTemplateColumns: `repeat(${columnsCount}, 1fr)`}}\r\n    onContextMenu={event => {event.preventDefault();}}\r\n  >\r\n    {state.map((cell, address) => <CellFactory\r\n      key={address}\r\n      state={cell}\r\n      cellRevealHandler={() => {cellRevealHandler(cell, address);}}\r\n      flagPlantingHandler={event => {\r\n        event.preventDefault();\r\n\r\n        flagPlantingHandler(cell, address);\r\n      }}\r\n      neighborsRevealHandler={({ target, nativeEvent }) => {\r\n        const { which } = nativeEvent;\r\n\r\n        const mouseupHandler = event => {\r\n          which !== event.which && neighborsRevealHandler(address);\r\n\r\n          target.removeEventListener('mouseup', mouseupHandler);\r\n        };\r\n\r\n        target.addEventListener('mouseup', mouseupHandler);\r\n      }}\r\n    />)}\r\n  </div>\r\n);\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fn();\r\n    else didMount.current = true;\r\n    // eslint-disable-next-line\r\n  }, deps);\r\n};\r\n","export const formatCount = count => {\r\n  if (count < 1) return '000';\r\n  if (count < 10) return `00${count}`;\r\n  if (count < 100) return `0${count}`;\r\n\r\n  return `${count}`;\r\n};\r\n","import React, { useRef, useState } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\n\r\nimport { formatCount } from 'utils/count-formatter';\r\n\r\nimport './Indicators.scss';\r\n\r\nexport const Indicators = ({ minesCount, smileyFaceClickHandler, shouldStartCountingSeconds, isBust, isVictory }) => {\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n  const intervalId = useRef();\r\n\r\n  useDidUpdate(() => {\r\n    shouldStartCountingSeconds && (intervalId.current = setInterval(() => {\r\n      setSecondsCount(seconds => seconds + 1);\r\n    }, 1e3));\r\n  }, shouldStartCountingSeconds);\r\n\r\n  useDidUpdate(() => {\r\n    (isBust || isVictory) && clearInterval(intervalId.current);\r\n  }, isBust, isVictory);\r\n\r\n  return (\r\n    <div className='indicators'>\r\n      <div className='mines-count'>{formatCount(minesCount)}</div>\r\n      <div className='smiley-face' onClick={() => {\r\n        clearInterval(intervalId.current);\r\n        setSecondsCount(0);\r\n        smileyFaceClickHandler();\r\n      }}>\r\n        <FontAwesomeIcon icon={['far', isVictory ? 'smile' : isBust ? 'frown' : 'meh']} />\r\n      </div>\r\n      <div className='timer'>{formatCount(secondsCount)}</div>\r\n    </div>\r\n  );\r\n};\r\n","export const cellValue = {\r\n  BustedMine: -3,\r\n  IncorrectGuess: -2,\r\n  Mine: -1,\r\n  Empty: 0,\r\n  One: 1,\r\n  Two: 2,\r\n  Three: 3,\r\n  Four: 4,\r\n  Five: 5,\r\n  Six: 6,\r\n  Seven: 7,\r\n  Eight: 8,\r\n};\r\n","export const cellState = {\r\n  Hidden: 0,\r\n  Visible: 1,\r\n  Flagged: 2,\r\n};\r\n","export const fieldHeight = {\r\n  SM: 9,\r\n  MD: 16,\r\n  BG: 16,\r\n};\r\n","export const fieldProducerType = {\r\n  SM: 0,\r\n  MD: 1,\r\n  BG: 2,\r\n};\r\n","export const fieldWidth = {\r\n  SM: 9,\r\n  MD: 16,\r\n  BG: 30,\r\n};\r\n","export const minesCount = {\r\n  SM: 10,\r\n  MD: 30,\r\n  BG: 99,\r\n};\r\n","import { immerable } from 'immer';\r\n\r\nimport { cellValue, cellState } from 'const';\r\n\r\nexport class Cell {\r\n  [immerable] = true;\r\n\r\n  constructor(\r\n    value = cellValue.Empty,\r\n    state = cellState.Hidden\r\n  ) {\r\n    this.value = value;\r\n    this.state = state;\r\n  }\r\n\r\n  get isMined() {\r\n    return this.value === cellValue.Mine;\r\n  }\r\n\r\n  get isBustedMine() {\r\n    return this.value === cellValue.BustedMine;\r\n  }\r\n\r\n  get isIncorrectGuess() {\r\n    return this.value === cellValue.IncorrectGuess;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.value === cellValue.Empty;\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.state === cellState.Hidden;\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.state === cellState.Flagged;\r\n  }\r\n\r\n  get isFloodFillAble() {\r\n    return !this.isMined && this.isHidden && !this.isFlagged;\r\n  }\r\n\r\n  get isMisplacedFlag() {\r\n    return !this.isMined && this.isFlagged;\r\n  }\r\n\r\n  get isUnrevealedMine() {\r\n    return this.isMined && !this.isFlagged;\r\n  }\r\n}\r\n","export class CellAddressUtils {\r\n  constructor(\r\n    fieldWidth\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n  }\r\n\r\n  to2DAddresses(address) {\r\n    const rowAddress = address % this._fieldWidth;\r\n\r\n    return [rowAddress, (address - rowAddress) / this._fieldWidth];\r\n  }\r\n\r\n  to1DAddress(rowAddress, cellAddress) {\r\n    return cellAddress * this._fieldWidth + rowAddress;\r\n  }\r\n}\r\n","import { CellAddressUtils } from './cell-address-utils';\r\n\r\nexport class CellNeighborsUtils {\r\n  constructor(\r\n    fieldWidth,\r\n    fieldHeight\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n    this._fieldHeight = fieldHeight;\r\n    this._cellAddressUtils = new CellAddressUtils(fieldWidth);\r\n  }\r\n\r\n  isFloodFillAble(state, address) {\r\n    return !this.getNeighborsAddresses(address).some(addr => state[addr].isUnrevealedMine);\r\n  }\r\n\r\n  getNeighborsAddresses(address) {\r\n    const [rowAddress, cellAddress] = this._cellAddressUtils.to2DAddresses(address);\r\n    const addresses = [];\r\n\r\n    for (let rowAddressOffset = -1; rowAddressOffset < 2; rowAddressOffset++)\r\n      for (let cellAddressOffset = -1; cellAddressOffset < 2; cellAddressOffset++)\r\n        if (rowAddressOffset || cellAddressOffset) {\r\n          const rowAddressWithOffset = rowAddress + rowAddressOffset;\r\n          const cellAddressWithOffset = cellAddress + cellAddressOffset;\r\n\r\n          this._doesAddressExist(rowAddressWithOffset, this._fieldWidth)\r\n            && this._doesAddressExist(cellAddressWithOffset, this._fieldHeight)\r\n              && addresses.push(this._cellAddressUtils.to1DAddress(rowAddressWithOffset, cellAddressWithOffset));\r\n        }\r\n\r\n    return addresses;\r\n  }\r\n\r\n  countMinedNeighbors(state, address) {\r\n    return this._countNeighborsBy(state, address, 'isMined');\r\n  }\r\n\r\n  canRevealNeighbors(state, address) {\r\n    return this.countMinedNeighbors(state, address) === this._countNeighborsBy(state, address, 'isFlagged');\r\n  }\r\n\r\n  _countNeighborsBy(state, address, propName) {\r\n    return this.getNeighborsAddresses(address).reduce((acc, addr) => state[addr][propName] ? acc + 1: acc, 0);\r\n  }\r\n\r\n  _doesAddressExist(address, criteria) {\r\n    return -1 < address && address < criteria;\r\n  }\r\n}\r\n","import produce from 'immer';\r\n\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport range from 'lodash/range';\r\nimport difference from 'lodash/difference';\r\n\r\nimport { cellValue, cellState } from 'const';\r\n\r\nimport { Cell } from './cell';\r\nimport { CellNeighborsUtils } from './cell-neighbors-utils';\r\n\r\nexport class FieldProducer {\r\n  constructor(\r\n    width,\r\n    height,\r\n    minesCount\r\n  ) {\r\n    this.width = width;\r\n    this.minesCount = minesCount;\r\n\r\n    this._height = height;\r\n    this._cellNeighborsUtils = new CellNeighborsUtils(width, height);\r\n  }\r\n\r\n  getEmptyState() {\r\n    return Array.from({ length: this._length }, () => new Cell());\r\n  }\r\n\r\n  getInitialState(state, address) {\r\n    return this._getFloodFilledState(produce(state, draft => {\r\n      const addresses =\r\n        difference(range(this._length), [address, ...this._cellNeighborsUtils.getNeighborsAddresses(address)]);\r\n\r\n      const randomAddressesSet = new Set();\r\n\r\n      while (randomAddressesSet.size < this.minesCount)\r\n        randomAddressesSet.add(addresses[Math.random() * addresses.length | 0]);\r\n\r\n      randomAddressesSet.forEach(addr => {\r\n        draft[addr].value = cellValue.Mine;\r\n      });\r\n\r\n      draft.forEach((cell, addr) => {\r\n        !cell.isMined && (cell.value = this._cellNeighborsUtils.countMinedNeighbors(draft, addr));\r\n      });\r\n    }), address);\r\n  }\r\n\r\n  getCellRevealedState(state, { isMined }, addr) {\r\n    if (isMined) return this._getBustedState(produce(state, draft => {\r\n      draft[addr] = new Cell(cellValue.BustedMine, cellState.Visible);\r\n    }));\r\n\r\n    return this._getFloodFilledState(state, addr);\r\n  }\r\n\r\n  getFlagPlantedState(state, { isFlagged }, address) {\r\n    return produce(state, draft => {\r\n      draft[address].state = cellState[isFlagged ? 'Hidden' : 'Flagged'];\r\n    });\r\n  }\r\n\r\n  getNeighborsRevealedState(state, addr) {\r\n    if (this._cellNeighborsUtils.isFloodFillAble(state, addr)) return this._getFloodFilledState(state, addr);\r\n\r\n    if (this._cellNeighborsUtils.canRevealNeighbors(state, addr)) return this._getBustedState(produce(state, draft => {\r\n      this._cellNeighborsUtils.getNeighborsAddresses(addr).forEach(address => {\r\n        const cell = draft[address];\r\n        const { isUnrevealedMine, isMisplacedFlag } = cell;\r\n\r\n        isUnrevealedMine && (cell.value = cellValue.BustedMine);\r\n        isMisplacedFlag && (cell.value = cellValue.IncorrectGuess);\r\n\r\n        cell.state = cellState.Visible;\r\n      });\r\n    }));\r\n\r\n    return cloneDeep(state);\r\n  }\r\n\r\n  getMinesMarkedState(state) {\r\n    return produce(state, draft => {\r\n      draft.forEach(cell => {\r\n        cell.isMined && (cell.state = cellState.Flagged);\r\n      });\r\n    });\r\n  }\r\n\r\n  _getFloodFilledState(state, address) {\r\n    return produce(state, draft => {\r\n      draft[address].state = cellState.Visible;\r\n\r\n      const floodFill = neighborAddress => {\r\n        this._cellNeighborsUtils.isFloodFillAble(draft, neighborAddress)\r\n          && this._cellNeighborsUtils.getNeighborsAddresses(neighborAddress).forEach(addr => {\r\n            const cell = draft[addr];\r\n\r\n            if (cell.isFloodFillAble) {\r\n              cell.state = cellState.Visible;\r\n\r\n              floodFill(addr);\r\n            }\r\n          });\r\n      };\r\n\r\n      floodFill(address);\r\n    });\r\n  }\r\n\r\n  _getBustedState(state) {\r\n    return produce(state, draft => {\r\n      draft.forEach((cell, addr) => {\r\n        const { isUnrevealedMine, isMisplacedFlag } = cell;\r\n\r\n        isUnrevealedMine && (cell.state = cellState.Visible);\r\n        isMisplacedFlag && (draft[addr] = new Cell(cellValue.IncorrectGuess, cellState.Visible));\r\n      });\r\n    });\r\n  }\r\n\r\n  get _length() {\r\n    return this.width * this._height;\r\n  }\r\n}\r\n","import { fieldHeight, fieldProducerType, fieldWidth, minesCount } from 'const';\r\n\r\nimport { FieldProducer } from './internals/field-producer';\r\n\r\nexport class FieldProducerFactory {\r\n  constructor(\r\n    type\r\n  ) {\r\n    switch (type) {\r\n      case fieldProducerType.SM:\r\n        return new FieldProducer(fieldWidth.SM, fieldHeight.SM, minesCount.SM);\r\n      case fieldProducerType.MD:\r\n        return new FieldProducer(fieldWidth.MD, fieldHeight.MD, minesCount.MD);\r\n      case fieldProducerType.BG:\r\n        return new FieldProducer(fieldWidth.BG, fieldHeight.BG, minesCount.BG);\r\n      default:\r\n        throw new Error(`FieldProducer of type \"${type}\" does not exist!`);\r\n    }\r\n  }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport reject from 'lodash/reject';\r\nimport some from 'lodash/some';\r\n\r\nimport { Field, Indicators } from 'components';\r\n\r\nimport { FieldProducerFactory } from 'view-models/field-producer-factory';\r\n\r\nimport { fieldProducerType } from 'const';\r\n\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\n\r\nimport './Minesweeper.scss';\r\n\r\nexport const Minesweeper = () => {\r\n  const [fieldProducer] = useState(new FieldProducerFactory(fieldProducerType.MD));\r\n\r\n  const [field, setField] = useState([]);\r\n  const [minesCount, setMinesCount] = useState(fieldProducer.minesCount);\r\n\r\n  const [isInit, setIsInit] = useState(false);\r\n  const [isBust, setIsBust] = useState(false);\r\n  const [isVictory, setIsVictory] = useState(false);\r\n\r\n  const handleCellReveal = (cell, address) => {\r\n    if (isInit) setField(fieldProducer.getCellRevealedState(field, cell, address));\r\n    else {\r\n      setField(fieldProducer.getInitialState(field, address));\r\n      setIsInit(true);\r\n    }\r\n  };\r\n\r\n  const handleFlagPlanting = (cell, address) => {\r\n    setField(fieldProducer.getFlagPlantedState(field, cell, address));\r\n    setMinesCount(minesCount + (cell.isFlagged ? 1 : -1));\r\n  };\r\n\r\n  const handleNeighborsReveal = address => {\r\n    setField(fieldProducer.getNeighborsRevealedState(field, address));\r\n  };\r\n\r\n  const handleSmileyFaceClick = () => {\r\n    setField(fieldProducer.getEmptyState());\r\n    setMinesCount(fieldProducer.minesCount);\r\n    setIsInit(false);\r\n    setIsBust(false);\r\n    setIsVictory(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setField(fieldProducer.getEmptyState());\r\n  }, [fieldProducer]);\r\n\r\n  useDidUpdate(() => {\r\n    if (some(field, 'isBustedMine')) setIsBust(true);\r\n    else if (!some(reject(field, 'isMined'), 'isHidden')) {\r\n      setField(fieldProducer.getMinesMarkedState(field));\r\n      setMinesCount(0);\r\n      setIsVictory(true);\r\n    }\r\n  }, field);\r\n\r\n  return (\r\n    <div className='minesweeper'>\r\n      <Indicators\r\n        minesCount={minesCount}\r\n        isBust={isBust}\r\n        isVictory={isVictory}\r\n        shouldStartCountingSeconds={isInit}\r\n        smileyFaceClickHandler={handleSmileyFaceClick}\r\n      />\r\n\r\n      <Field\r\n        columnsCount={fieldProducer.width}\r\n        disabled={isBust || isVictory}\r\n        state={field}\r\n        cellRevealHandler={handleCellReveal}\r\n        flagPlantingHandler={handleFlagPlanting}\r\n        neighborsRevealHandler={handleNeighborsReveal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Header, Minesweeper, Footer } from 'core';\r\n\r\nexport const App = () => (\r\n  <>\r\n    <Header />\r\n    <Minesweeper />\r\n    <Footer />\r\n  </>\r\n);\r\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { faFlag, faMeh, faFrown, faSmile } from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import React, { StrictMode }  from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport { App } from 'App';\r\n\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nimport './index.scss';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}