{"version":3,"sources":["constants/cell-appearance.ts","constants/cell-value.ts","components/Footer/index.tsx","components/Header/index.tsx","contexts/minesweeper.ts","utils/add-id.ts","constants/mine-fields-params.ts","hooks/use-did-update.ts","utils/cell-checker.ts","utils/mine-field-checker.ts","utils/index-utils.ts","utils/neighbors-utils.ts","hooks/use-mine-field.ts","components/Counter/index.tsx","components/Face/index.tsx","containers/Indicators/index.tsx","hooks/use-interval.ts","utils/join-class-names.ts","components/Bomb/index.tsx","components/Cell/index.tsx","containers/MineField/index.tsx","components/Radio/index.tsx","containers/MineFieldParams/index.tsx","containers/Minesweeper/index.tsx","App.tsx","setupIcons.ts","index.tsx"],"names":["CellAppearance","CellValue","Footer","className","href","target","rel","icon","Date","getFullYear","memo","Header","MinesweeperContext","createContext","mineField","mineFieldParams","mineFieldStatus","setMineFieldParams","setupMineField","revealCell","toggleFlag","revealNeighbors","reset","addId","item","id","nanoid","smallMineFieldParams","name","rowsCount","columnsCount","minesCount","mineFieldsParams","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","CellChecker","cell","key","value","this","isEqual","Empty","Mine","Incorrect","Busted","Hidden","Flagged","isMined","isFlagged","MineFieldChecker","some","isBusted","reject","isHidden","IndexUtils","length","index","rowIndex","columnIndex","isValidArrayIndex","NeighborsUtils","indexUtils","to2D","indexes","rowIndexOffset","columnIndexOffset","targetRowIndex","targetColumnIndex","push","to1D","getIndexes","isUnsolved","countMined","countBy","reduce","acc","useMineField","useState","mineFieldLength","emptyMineField","useMemo","Array","from","appearance","setMineField","initialMineFieldStatus","isSetup","isSolved","hiddenMinesCount","setMineFieldStatus","neighborsUtils","getFloodFilledMineField","useCallback","prevMineField","draftFn","produce","draft","Visible","floodFill","canBeFloodFilled","forEach","neighbor","getBustedMineField","isSolvedWrong","restIndexes","difference","range","minedIndexes","Set","size","add","Math","floor","random","prevMineFieldStatus","canBeRevealed","mineFieldChecker","formatCount","count","toString","Counter","Face","onClick","type","getFaceIcon","Indicators","useContext","secondsCount","setSecondsCount","handleFaceClick","delay","fnRef","intervalId","setInterval","clearInterval","useInterval","joinClassNames","classNames","filter","Boolean","join","Bomb","Cell","onMouseDown","onContextMenu","isEmpty","isIncorrect","visibleClassName","handleContextMenu","aria-label","event","MineField","rowClassName","handleCellClick","handleCellMouseDown","nativeEvent","addEventListener","handleMouseUp","which","removeEventListener","handleCellContextMenu","style","width","preventDefault","map","Radio","checked","onChange","defaultChecked","MineFieldParams","itemClassName","handleMineFieldPropsChange","props","Minesweeper","Provider","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c06cfe5.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\r\nexport enum CellAppearance {\r\n  Hidden,\r\n  Visible,\r\n  Flagged,\r\n}\r\n","// eslint-disable-next-line no-shadow\r\nexport enum CellValue {\r\n  Empty,\r\n  One,\r\n  Two,\r\n  Three,\r\n  Four,\r\n  Five,\r\n  Six,\r\n  Seven,\r\n  Eight,\r\n  Mine,\r\n  Incorrect,\r\n  Busted,\r\n}\r\n","import './Footer.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nconst Footer = () => {\r\n  const className = 'Footer';\r\n\r\n  return (\r\n    <footer className={className}>\r\n      <span>\r\n        Powered by\r\n        <a\r\n          className={`${className}Link`}\r\n          href=\"https://github.com/FakeMetalFan\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <FontAwesomeIcon icon={['fab', 'github']} />\r\n        </a>\r\n        &copy;\r\n        <span>{new Date().getFullYear()}</span>\r\n      </span>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default memo(Footer);\r\n","import './Header.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nconst Header = () => {\r\n  const className = 'Header';\r\n\r\n  return (\r\n    <header className={className}>\r\n      <span className={`${className}Title`}>Minesweeper</span>\r\n\r\n      <a\r\n        className={`${className}Link`}\r\n        href=\"https://github.com/FakeMetalFan/minesweeper\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default memo(Header);\r\n","import { useMineField } from 'hooks/use-mine-field';\r\nimport { createContext } from 'react';\r\n\r\ntype Value = ReturnType<typeof useMineField>;\r\n\r\nexport const MinesweeperContext = createContext<Value>({\r\n  mineField: [],\r\n  mineFieldParams: {} as MineFieldParams,\r\n  mineFieldStatus: {} as MineFieldStatus,\r\n  /* eslint-disable @typescript-eslint/no-empty-function */\r\n  setMineFieldParams: () => {},\r\n  setupMineField: () => {},\r\n  revealCell: () => {},\r\n  toggleFlag: () => {},\r\n  revealNeighbors: () => {},\r\n  reset: () => {},\r\n});\r\n","import { nanoid } from 'nanoid';\r\n\r\nexport const addId = <T extends Record<string, unknown>>(item: T) => ({\r\n  ...item,\r\n  id: nanoid(),\r\n});\r\n","import { addId } from 'utils/add-id';\r\n\r\nexport const smallMineFieldParams = addId({\r\n  name: 'Beginner',\r\n  rowsCount: 9,\r\n  columnsCount: 9,\r\n  minesCount: 9,\r\n});\r\n\r\nexport const mineFieldsParams = [\r\n  smallMineFieldParams,\r\n  addId({\r\n    name: 'Intermediate',\r\n    rowsCount: 16,\r\n    columnsCount: 16,\r\n    minesCount: 40,\r\n  }),\r\n  addId({\r\n    name: 'Expert',\r\n    rowsCount: 30,\r\n    columnsCount: 16,\r\n    minesCount: 99,\r\n  }),\r\n];\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn: () => void, ...deps: unknown[]) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      fn();\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n};\r\n","import { CellAppearance } from 'constants/cell-appearance';\r\nimport { CellValue } from 'constants/cell-value';\r\n\r\nexport class CellChecker {\r\n  constructor(private cell: Cell) {}\r\n\r\n  private isEqual(key: keyof Cell, value: Cell[keyof Cell]) {\r\n    return this.cell[key] === value;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.isEqual('value', CellValue.Empty);\r\n  }\r\n\r\n  get isMined() {\r\n    return this.isEqual('value', CellValue.Mine);\r\n  }\r\n\r\n  get isIncorrect() {\r\n    return this.isEqual('value', CellValue.Incorrect);\r\n  }\r\n\r\n  get isBusted() {\r\n    return this.isEqual('value', CellValue.Busted);\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.isEqual('appearance', CellAppearance.Hidden);\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.isEqual('appearance', CellAppearance.Flagged);\r\n  }\r\n\r\n  get isUnsolved() {\r\n    return this.isMined && !this.isFlagged;\r\n  }\r\n\r\n  get isSolvedWrong() {\r\n    return !this.isMined && this.isFlagged;\r\n  }\r\n}\r\n","import { reject } from 'lodash-es';\r\nimport { CellChecker } from 'utils/cell-checker';\r\n\r\nexport class MineFieldChecker {\r\n  constructor(private mineField: Cell[]) {}\r\n\r\n  isBusted() {\r\n    return this.mineField.some((cell) => new CellChecker(cell).isBusted);\r\n  }\r\n\r\n  isSolved() {\r\n    return !reject(\r\n      this.mineField,\r\n      (cell) => new CellChecker(cell).isMined\r\n    ).some((cell) => new CellChecker(cell).isHidden);\r\n  }\r\n}\r\n","export class IndexUtils {\r\n  constructor(private length: number) {}\r\n\r\n  to2D(index: number) {\r\n    const rowIndex = index % this.length;\r\n\r\n    return { rowIndex, columnIndex: (index - rowIndex) / this.length };\r\n  }\r\n\r\n  to1D(rowIndex: number, columnIndex: number) {\r\n    return columnIndex * this.length + rowIndex;\r\n  }\r\n}\r\n","import { CellChecker } from 'utils/cell-checker';\r\nimport { IndexUtils } from 'utils/index-utils';\r\n\r\nconst isValidArrayIndex = (index: number, length: number) =>\r\n  index > -1 && index < length;\r\n\r\nexport class NeighborsUtils {\r\n  constructor(\r\n    private rowsCount: number,\r\n    private columnsCount: number,\r\n    private indexUtils = new IndexUtils(rowsCount)\r\n  ) {}\r\n\r\n  getIndexes({ index }: Cell) {\r\n    const { rowIndex, columnIndex } = this.indexUtils.to2D(index);\r\n    const indexes = [];\r\n\r\n    for (let rowIndexOffset = -1; rowIndexOffset < 2; rowIndexOffset += 1) {\r\n      for (\r\n        let columnIndexOffset = -1;\r\n        columnIndexOffset < 2;\r\n        columnIndexOffset += 1\r\n      ) {\r\n        if (rowIndexOffset || columnIndexOffset) {\r\n          const targetRowIndex = rowIndex + rowIndexOffset;\r\n          const targetColumnIndex = columnIndex + columnIndexOffset;\r\n\r\n          if (\r\n            isValidArrayIndex(targetRowIndex, this.rowsCount) &&\r\n            isValidArrayIndex(targetColumnIndex, this.columnsCount)\r\n          ) {\r\n            indexes.push(\r\n              this.indexUtils.to1D(targetRowIndex, targetColumnIndex)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return indexes;\r\n  }\r\n\r\n  canBeFloodFilled(mineField: Cell[], cell: Cell) {\r\n    return !this.getIndexes(cell).some(\r\n      (index) => new CellChecker(mineField[index]).isUnsolved\r\n    );\r\n  }\r\n\r\n  canBeRevealed(mineField: Cell[], cell: Cell) {\r\n    return (\r\n      this.countMined(mineField, cell) ===\r\n      this.countBy(mineField, cell, 'isFlagged')\r\n    );\r\n  }\r\n\r\n  countMined(mineField: Cell[], cell: Cell) {\r\n    return this.countBy(mineField, cell, 'isMined');\r\n  }\r\n\r\n  private countBy(mineField: Cell[], cell: Cell, key: keyof CellChecker) {\r\n    return this.getIndexes(cell).reduce(\r\n      (acc, index) => (new CellChecker(mineField[index])[key] ? acc + 1 : acc),\r\n      0\r\n    );\r\n  }\r\n}\r\n","import { CellAppearance } from 'constants/cell-appearance';\r\nimport { CellValue } from 'constants/cell-value';\r\nimport { smallMineFieldParams } from 'constants/mine-fields-params';\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\nimport produce, { Draft } from 'immer';\r\nimport { difference, range } from 'lodash-es';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport { addId } from 'utils/add-id';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { MineFieldChecker } from 'utils/mine-field-checker';\r\nimport { NeighborsUtils } from 'utils/neighbors-utils';\r\n\r\ntype DraftFn = (mineField: Draft<Cell[]>) => void;\r\n\r\nexport const useMineField = () => {\r\n  const [mineFieldParams, setMineFieldParams] = useState(smallMineFieldParams);\r\n\r\n  const { rowsCount, columnsCount, minesCount } = mineFieldParams;\r\n  const mineFieldLength = rowsCount * columnsCount;\r\n\r\n  const emptyMineField = useMemo(\r\n    () =>\r\n      Array.from({ length: mineFieldLength }, (item, index) =>\r\n        addId({\r\n          index,\r\n          value: CellValue.Empty,\r\n          appearance: CellAppearance.Hidden,\r\n        })\r\n      ),\r\n    [mineFieldLength]\r\n  );\r\n\r\n  const [mineField, setMineField] = useState(emptyMineField);\r\n\r\n  const initialMineFieldStatus = useMemo(\r\n    () => ({\r\n      isSetup: false,\r\n      isBusted: false,\r\n      isSolved: false,\r\n      hiddenMinesCount: minesCount,\r\n    }),\r\n    [minesCount]\r\n  );\r\n\r\n  const [mineFieldStatus, setMineFieldStatus] = useState(\r\n    initialMineFieldStatus\r\n  );\r\n\r\n  const neighborsUtils = useMemo(\r\n    () => new NeighborsUtils(rowsCount, columnsCount),\r\n    [rowsCount, columnsCount]\r\n  );\r\n\r\n  const getFloodFilledMineField = useCallback(\r\n    (prevMineField: Cell[], cell: Cell, draftFn?: DraftFn) =>\r\n      produce(prevMineField, (draft) => {\r\n        draftFn?.(draft);\r\n        /* eslint-disable no-param-reassign */\r\n        draft[cell.index].appearance = CellAppearance.Visible;\r\n\r\n        (function floodFill(target: Cell) {\r\n          if (neighborsUtils.canBeFloodFilled(draft, target)) {\r\n            neighborsUtils.getIndexes(target).forEach((index) => {\r\n              const neighbor = draft[index];\r\n              const { isMined, isHidden, isFlagged } = new CellChecker(\r\n                neighbor\r\n              );\r\n\r\n              if (!isMined && isHidden && !isFlagged) {\r\n                neighbor.appearance = CellAppearance.Visible;\r\n\r\n                floodFill(neighbor);\r\n              }\r\n            });\r\n          }\r\n        })(cell);\r\n      }),\r\n    [neighborsUtils]\r\n  );\r\n\r\n  const getBustedMineField = useCallback(\r\n    (prevMineField: Cell[], draftFn: DraftFn) =>\r\n      produce(prevMineField, (draft) => {\r\n        draftFn(draft);\r\n\r\n        draft.forEach((cell, index) => {\r\n          const { isUnsolved, isSolvedWrong } = new CellChecker(cell);\r\n\r\n          if (isUnsolved) {\r\n            cell.appearance = CellAppearance.Visible;\r\n          } else if (isSolvedWrong) {\r\n            draft[index] = {\r\n              ...cell,\r\n              value: CellValue.Incorrect,\r\n              appearance: CellAppearance.Visible,\r\n            };\r\n          }\r\n        });\r\n      }),\r\n    []\r\n  );\r\n\r\n  const setupMineField = useCallback(\r\n    (cell: Cell) => {\r\n      setMineField((prevMineField) =>\r\n        getFloodFilledMineField(prevMineField, cell, (draft) => {\r\n          const restIndexes = difference(range(mineFieldLength), [\r\n            cell.index,\r\n            ...neighborsUtils.getIndexes(cell),\r\n          ]);\r\n          const minedIndexes = new Set<number>();\r\n\r\n          while (minedIndexes.size < minesCount) {\r\n            minedIndexes.add(\r\n              restIndexes[Math.floor(Math.random() * restIndexes.length)]\r\n            );\r\n          }\r\n\r\n          minedIndexes.forEach((index) => {\r\n            draft[index].value = CellValue.Mine;\r\n          });\r\n\r\n          draft.forEach((item) => {\r\n            if (!new CellChecker(item).isMined) {\r\n              item.value = neighborsUtils.countMined(draft, item);\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSetup: true,\r\n      }));\r\n    },\r\n    [getFloodFilledMineField, mineFieldLength, minesCount, neighborsUtils]\r\n  );\r\n\r\n  const revealCell = useCallback(\r\n    (cell: Cell) => {\r\n      setMineField((prevMineField) =>\r\n        new CellChecker(cell).isMined\r\n          ? getBustedMineField(prevMineField, (draft) => {\r\n              draft[cell.index] = {\r\n                ...cell,\r\n                value: CellValue.Busted,\r\n                appearance: CellAppearance.Visible,\r\n              };\r\n            })\r\n          : getFloodFilledMineField(prevMineField, cell)\r\n      );\r\n    },\r\n    [getBustedMineField, getFloodFilledMineField]\r\n  );\r\n\r\n  const toggleFlag = useCallback((cell: Cell) => {\r\n    const { isFlagged } = new CellChecker(cell);\r\n\r\n    setMineField((prevMineField) =>\r\n      produce(prevMineField, (draft) => {\r\n        draft[cell.index].appearance = isFlagged\r\n          ? CellAppearance.Hidden\r\n          : CellAppearance.Flagged;\r\n      })\r\n    );\r\n\r\n    setMineFieldStatus((prevMineFieldStatus) =>\r\n      produce(prevMineFieldStatus, (draft) => {\r\n        draft.hiddenMinesCount += isFlagged ? 1 : -1;\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const revealNeighbors = useCallback(\r\n    (cell: Cell) => {\r\n      setMineField((prevMineField) => {\r\n        if (neighborsUtils.canBeFloodFilled(prevMineField, cell)) {\r\n          return getFloodFilledMineField(prevMineField, cell);\r\n        }\r\n\r\n        if (neighborsUtils.canBeRevealed(prevMineField, cell)) {\r\n          return getBustedMineField(prevMineField, (draft) => {\r\n            neighborsUtils.getIndexes(cell).forEach((index) => {\r\n              const neighbor = draft[index];\r\n              const { isUnsolved, isSolvedWrong } = new CellChecker(neighbor);\r\n\r\n              if (isUnsolved) {\r\n                neighbor.value = CellValue.Busted;\r\n              } else if (isSolvedWrong) {\r\n                neighbor.value = CellValue.Incorrect;\r\n              }\r\n\r\n              neighbor.appearance = CellAppearance.Visible;\r\n            });\r\n          });\r\n        }\r\n\r\n        return prevMineField;\r\n      });\r\n    },\r\n    [getBustedMineField, getFloodFilledMineField, neighborsUtils]\r\n  );\r\n\r\n  const reset = useCallback(() => {\r\n    setMineField(emptyMineField);\r\n\r\n    setMineFieldStatus(initialMineFieldStatus);\r\n  }, [emptyMineField, initialMineFieldStatus]);\r\n\r\n  useDidUpdate(() => {\r\n    reset();\r\n  }, emptyMineField);\r\n\r\n  useDidUpdate(() => {\r\n    const mineFieldChecker = new MineFieldChecker(mineField);\r\n\r\n    if (mineFieldChecker.isBusted()) {\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isBusted: true,\r\n      }));\r\n    } else if (mineFieldChecker.isSolved()) {\r\n      setMineField((prevMineField) =>\r\n        produce(prevMineField, (draft) => {\r\n          draft.forEach((cell) => {\r\n            if (new CellChecker(cell).isMined) {\r\n              cell.appearance = CellAppearance.Flagged;\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSolved: true,\r\n        hiddenMinesCount: 0,\r\n      }));\r\n    }\r\n  }, mineField);\r\n\r\n  return {\r\n    mineField,\r\n    mineFieldParams,\r\n    mineFieldStatus,\r\n    setMineFieldParams,\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n    reset,\r\n  };\r\n};\r\n","import React, { memo } from 'react';\r\n\r\nconst formatCount = (count: number) => {\r\n  if (count < 1) {\r\n    return '000';\r\n  }\r\n\r\n  if (count < 10) {\r\n    return `00${count}`;\r\n  }\r\n\r\n  if (count < 100) {\r\n    return `0${count}`;\r\n  }\r\n\r\n  return count.toString();\r\n};\r\n\r\nconst Counter = ({ count }: { count: number }) => (\r\n  <div className=\"Counter\">{formatCount(count)}</div>\r\n);\r\n\r\nexport default memo(Counter);\r\n","import './Face.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\ninterface Props {\r\n  icon?: JSX.Element;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst Face = ({\r\n  icon = <FontAwesomeIcon icon={['far', 'meh']} />,\r\n  onClick,\r\n}: Props) => (\r\n  <button type=\"button\" className=\"Face\" onClick={onClick}>\r\n    {icon}\r\n  </button>\r\n);\r\n\r\nexport default memo(Face);\r\n","import './Indicators.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Counter from 'components/Counter';\r\nimport Face from 'components/Face';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\nimport { useInterval } from 'hooks/use-interval';\r\nimport React, { useCallback, useContext, useState } from 'react';\r\n\r\nconst getFaceIcon = ({ isSolved, isBusted }: MineFieldStatus) => {\r\n  if (isSolved) {\r\n    return <FontAwesomeIcon icon={['far', 'smile']} />;\r\n  }\r\n\r\n  if (isBusted) {\r\n    return <FontAwesomeIcon icon={['far', 'frown']} />;\r\n  }\r\n\r\n  return void 0;\r\n};\r\n\r\nconst Indicators = () => {\r\n  const { mineFieldStatus, mineFieldParams, reset } = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const { isSetup, isSolved, isBusted, hiddenMinesCount } = mineFieldStatus;\r\n\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n\r\n  const handleFaceClick = useCallback(() => {\r\n    setSecondsCount(0);\r\n\r\n    reset();\r\n  }, [reset]);\r\n\r\n  useInterval(\r\n    () => {\r\n      setSecondsCount(secondsCount + 1);\r\n    },\r\n    isSetup && !(isSolved || isBusted) ? 1e3 : void 0\r\n  );\r\n\r\n  useDidUpdate(() => {\r\n    setSecondsCount(0);\r\n  }, mineFieldParams);\r\n\r\n  return (\r\n    <div className=\"Indicators\">\r\n      <Counter count={hiddenMinesCount} />\r\n      <Face icon={getFaceIcon(mineFieldStatus)} onClick={handleFaceClick} />\r\n      <Counter count={secondsCount} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Indicators;\r\n","import { useEffect, useRef } from 'react';\r\n\r\ntype Fn = () => void;\r\n\r\nexport const useInterval = (fn: Fn, delay?: number) => {\r\n  const fnRef = useRef<Fn>();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!delay) {\r\n      return void 0;\r\n    }\r\n\r\n    const intervalId = setInterval(() => {\r\n      fnRef.current?.();\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [delay]);\r\n};\r\n","export const joinClassNames = (...classNames: string[]) =>\r\n  classNames.filter(Boolean).join(' ');\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\nconst Bomb = ({ className }: { className?: string }) => (\r\n  <button type=\"button\" className={className}>\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </button>\r\n);\r\n\r\nexport default Bomb;\r\n","import './Cell.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo, SyntheticEvent } from 'react';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { joinClassNames } from 'utils/join-class-names';\r\n\r\nimport Bomb from '../Bomb';\r\n\r\ninterface Props {\r\n  cell: Cell;\r\n  onClick?: (cell: Cell) => void;\r\n  onMouseDown?: (event: SyntheticEvent<HTMLButtonElement>, cell: Cell) => void;\r\n  onContextMenu?: (cell: Cell) => void;\r\n}\r\n\r\nconst Cell = ({ cell, onClick, onMouseDown, onContextMenu }: Props) => {\r\n  const {\r\n    isHidden,\r\n    isEmpty,\r\n    isFlagged,\r\n    isMined,\r\n    isIncorrect,\r\n    isBusted,\r\n  } = new CellChecker(cell);\r\n\r\n  const { value } = cell;\r\n\r\n  const className = 'Cell';\r\n  const visibleClassName = `${className}__visible`;\r\n\r\n  const handleClick = () => {\r\n    onClick?.(cell);\r\n  };\r\n\r\n  const handleContextMenu = () => {\r\n    onContextMenu?.(cell);\r\n  };\r\n\r\n  const handleMouseDown = (event: SyntheticEvent<HTMLButtonElement>) => {\r\n    onMouseDown?.(event, cell);\r\n  };\r\n\r\n  if (isHidden) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Cell\"\r\n        className={className}\r\n        onClick={handleClick}\r\n        onContextMenu={handleContextMenu}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isFlagged) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className={className}\r\n        onContextMenu={handleContextMenu}\r\n      >\r\n        <FontAwesomeIcon icon={['far', 'flag']} />\r\n      </button>\r\n    );\r\n  }\r\n\r\n  if (isEmpty) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Cell\"\r\n        className={joinClassNames(className, visibleClassName)}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isMined) {\r\n    return <Bomb className={className} />;\r\n  }\r\n\r\n  if (isIncorrect) {\r\n    return (\r\n      <Bomb className={joinClassNames(className, `${className}__wrong`)} />\r\n    );\r\n  }\r\n\r\n  if (isBusted) {\r\n    return (\r\n      <Bomb className={joinClassNames(className, `${className}__busted`)} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={joinClassNames(\r\n        className,\r\n        `${className}__${value}`,\r\n        visibleClassName\r\n      )}\r\n      onMouseDown={handleMouseDown}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(Cell);\r\n","import './MineField.scss';\r\n\r\nimport Cell from 'components/Cell';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport React, { SyntheticEvent, useCallback, useContext } from 'react';\r\nimport { joinClassNames } from 'utils/join-class-names';\r\n\r\nconst MineField = () => {\r\n  const {\r\n    mineFieldParams: { rowsCount },\r\n    mineField,\r\n    mineFieldStatus: { isSetup, isBusted, isSolved },\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const className = 'MineField';\r\n  const rowClassName = `${className}Row`;\r\n\r\n  const cellWidth = 32;\r\n\r\n  const handleContextMenu = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleCellClick = useCallback(\r\n    (cell: Cell) => {\r\n      (isSetup ? revealCell : setupMineField)(cell);\r\n    },\r\n    [isSetup, revealCell, setupMineField]\r\n  );\r\n\r\n  const handleCellMouseDown = useCallback(\r\n    (\r\n      { target, nativeEvent }: SyntheticEvent<HTMLButtonElement>,\r\n      cell: Cell\r\n    ) => {\r\n      const handleMouseUp = (event: Event) => {\r\n        if ((nativeEvent as MouseEvent).which !== (event as MouseEvent).which) {\r\n          revealNeighbors(cell);\r\n        }\r\n\r\n        target.removeEventListener('mouseup', handleMouseUp);\r\n      };\r\n\r\n      target.addEventListener('mouseup', handleMouseUp);\r\n    },\r\n    [revealNeighbors]\r\n  );\r\n\r\n  const handleCellContextMenu = useCallback(\r\n    (cell: Cell) => {\r\n      toggleFlag(cell);\r\n    },\r\n    [toggleFlag]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={className}\r\n      style={{ width: rowsCount * cellWidth }}\r\n      onContextMenu={handleContextMenu}\r\n    >\r\n      <div\r\n        className={joinClassNames(\r\n          rowClassName,\r\n          `${rowClassName}__count-${rowsCount}`,\r\n          `${isBusted || isSolved ? `${rowClassName}__disabled` : ''}`\r\n        )}\r\n      >\r\n        {mineField.map((cell) => (\r\n          <Cell\r\n            cell={cell}\r\n            onClick={handleCellClick}\r\n            onMouseDown={handleCellMouseDown}\r\n            onContextMenu={handleCellContextMenu}\r\n            key={cell.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MineField;\r\n","import React, { memo } from 'react';\r\n\r\ninterface Props<T> {\r\n  item: T;\r\n  name: string;\r\n  checked?: boolean;\r\n  className?: string;\r\n  onChange?: (item: T) => void;\r\n}\r\n\r\nconst Radio = <T extends { name: string }>({\r\n  item,\r\n  name,\r\n  checked,\r\n  className,\r\n  onChange,\r\n}: Props<T>) => {\r\n  const handleChange = () => {\r\n    onChange?.(item);\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <input\r\n        type=\"radio\"\r\n        name={name}\r\n        className={`${className}Radio`}\r\n        defaultChecked={checked}\r\n        onChange={handleChange}\r\n      />\r\n      {item.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Radio) as typeof Radio;\r\n","import './MineFieldParams.scss';\r\n\r\nimport Radio from 'components/Radio';\r\nimport { mineFieldsParams } from 'constants/mine-fields-params';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport React, { useCallback, useContext } from 'react';\r\n\r\nconst MineFieldParams = () => {\r\n  const { mineFieldParams, setMineFieldParams } = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const className = 'MineFieldProps';\r\n  const itemClassName = `${className}Item`;\r\n\r\n  const handleMineFieldPropsChange = useCallback(\r\n    (props: MineFieldParams) => {\r\n      setMineFieldParams(props);\r\n    },\r\n    [setMineFieldParams]\r\n  );\r\n\r\n  return (\r\n    <form className={className}>\r\n      {mineFieldsParams.map((item) => {\r\n        const { name, id } = item;\r\n\r\n        return (\r\n          <Radio\r\n            item={item}\r\n            name=\"MineFieldProps\"\r\n            className={itemClassName}\r\n            checked={name === mineFieldParams.name}\r\n            onChange={handleMineFieldPropsChange}\r\n            key={id}\r\n          />\r\n        );\r\n      })}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MineFieldParams;\r\n","import './Minesweeper.scss';\r\n\r\nimport Footer from 'components/Footer';\r\nimport Header from 'components/Header';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport { useMineField } from 'hooks/use-mine-field';\r\nimport React from 'react';\r\n\r\nimport Indicators from '../Indicators';\r\nimport MineField from '../MineField';\r\nimport MineFieldParams from '../MineFieldParams';\r\n\r\nconst Minesweeper = () => (\r\n  <MinesweeperContext.Provider value={{ ...useMineField() }}>\r\n    <Header />\r\n\r\n    <main className=\"Minesweeper\">\r\n      <Indicators />\r\n      <MineField />\r\n      <MineFieldParams />\r\n    </main>\r\n\r\n    <Footer />\r\n  </MinesweeperContext.Provider>\r\n);\r\n\r\nexport default Minesweeper;\r\n","import Minesweeper from 'containers/Minesweeper';\r\nimport React from 'react';\r\n\r\nconst App = () => <Minesweeper />;\r\n\r\nexport default App;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport {\r\n  faFlag,\r\n  faFrown,\r\n  faMeh,\r\n  faSmile,\r\n} from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import 'index.scss';\r\n\r\nimport App from 'App';\r\nimport React, { StrictMode } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}