{"version":3,"sources":["const/index.ts","utils/add-uuid.ts","contexts/minesweeper.ts","hooks/use-did-update.ts","components/Controls/_format-count.ts","components/Controls/_ResetIcon.tsx","components/Controls/index.tsx","hooks/use-interval.ts","components/Footer/index.tsx","components/Header/index.tsx","utils/index-utils.ts","utils/cell-checker.ts","utils/join-class-names.ts","components/CellFactory/_const.ts","components/CellFactory/_BombIcon.tsx","components/CellFactory/index.tsx","components/MineField/index.tsx","components/MineFieldProps/index.tsx","utils/mine-field-utils.ts","utils/neighbors-utils.ts","containers/Minesweeper/index.tsx","hooks/use-mine-field.ts","App.tsx","setupIcons.ts","index.tsx"],"names":["MineFieldRowsCount","MineFieldColumnsCount","MineFieldMinesCount","MineFieldPropsKey","CellValue","CellAppearance","addUUID","item","uuid","UUID","smallMineFieldProps","name","rowsCount","SM","columnsCount","minesCount","mineFieldsProps","Map","set","MD","BG","MinesweeperContext","createContext","mineField","mineFieldProps","defaultMineFieldProps","mineFieldStatus","isSetup","isBusted","isSolved","hiddenMinesCount","setMineFieldProps","setupMineField","revealCell","toggleFlag","revealNeighbors","reset","MinesweeperProvider","Provider","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","formatCount","count","toString","ResetIcon","classNamePrefix","onClick","icon","className","Controls","delay","useContext","useState","secondsCount","setSecondsCount","handleSecondsCount","useCallback","prevSecondsCount","intervalId","setInterval","clearInterval","Footer","href","target","rel","Date","getFullYear","Header","IndexUtils","mineFieldRowsCount","index","rowIndex","this","columnIndex","CellChecker","cell","prop","criteria","checkCell","Empty","Mine","Incorrect","Busted","Hidden","Flagged","isMined","isFlagged","joinClassNames","classNames","join","trim","BombIcon","classNameModifier","classNameSuffix","CellFactory","props","borderRight","borderBottom","value","onMouseDown","onContextMenu","isHidden","isEmpty","isIncorrect","memo","MineField","indexUtils","useMemo","rowClassName","style","width","event","preventDefault","map","cellIndex","to2D","handleCellClick","nativeEvent","addEventListener","handleMouseUp","which","removeEventListener","handleMouseDown","handleCellContextMenu","key","MineFieldProps","items","Array","from","values","type","defaultChecked","onChange","MineFieldUtils","some","_","isValidArrayIndex","length","NeighborsUtils","mineFieldColumnsCount","indexes","rowIndexOffset","columnIndexOffset","targetedRowIndex","targetedColumnIndex","push","to1D","getIndexes","neighborIndex","isUnsolved","countMined","countBy","criteriaFn","reduce","acc","Minesweeper","initialMineFieldProps","emptyMineField","appearance","initialMineFieldStatus","neighborsUtils","setMineField","setMineFieldStatus","getFloodFilledMineField","prevMineField","draftFn","produce","draft","Visible","floodFill","canFloodFill","forEach","getBustedMineField","isSolvedWrong","mineFieldUtils","prevMineFieldStatus","minesIndexes","Set","size","add","Math","floor","random","canReveal","useMineField","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.f582777f.chunk.js","sourcesContent":["import { addUUID } from 'utils/add-uuid';\r\nimport { MineFieldsPropsVM } from 'view-models';\r\n\r\n/* eslint-disable no-shadow */\r\nexport enum MineFieldRowsCount {\r\n  SM = 9,\r\n  MD = 16,\r\n  BG = 30,\r\n}\r\n\r\nexport enum MineFieldColumnsCount {\r\n  SM = 9,\r\n  MD = 16,\r\n  BG = 16,\r\n}\r\n\r\nexport enum MineFieldMinesCount {\r\n  SM = 10,\r\n  MD = 40,\r\n  BG = 99,\r\n}\r\n\r\nexport enum MineFieldPropsKey {\r\n  SM,\r\n  MD,\r\n  BG,\r\n}\r\n\r\nexport enum CellValue {\r\n  Empty,\r\n  One,\r\n  Two,\r\n  Three,\r\n  Four,\r\n  Five,\r\n  Six,\r\n  Seven,\r\n  Eight,\r\n  Mine,\r\n  Incorrect,\r\n  Busted,\r\n}\r\n\r\nexport enum CellAppearance {\r\n  Hidden,\r\n  Visible,\r\n  Flagged,\r\n}\r\n\r\nconst smallMineFieldProps = addUUID({\r\n  name: 'Beginner',\r\n  rowsCount: MineFieldRowsCount.SM,\r\n  columnsCount: MineFieldColumnsCount.SM,\r\n  minesCount: MineFieldMinesCount.SM,\r\n});\r\n\r\nexport const mineFieldsProps: MineFieldsPropsVM = new Map()\r\n  .set(MineFieldPropsKey.SM, smallMineFieldProps)\r\n  .set(\r\n    MineFieldPropsKey.MD,\r\n    addUUID({\r\n      name: 'Intermediate',\r\n      rowsCount: MineFieldRowsCount.MD,\r\n      columnsCount: MineFieldColumnsCount.MD,\r\n      minesCount: MineFieldMinesCount.MD,\r\n    })\r\n  )\r\n  .set(\r\n    MineFieldPropsKey.BG,\r\n    addUUID({\r\n      name: 'Expert',\r\n      rowsCount: MineFieldRowsCount.BG,\r\n      columnsCount: MineFieldColumnsCount.BG,\r\n      minesCount: MineFieldMinesCount.BG,\r\n    })\r\n  );\r\n\r\nexport { smallMineFieldProps as defaultMineFieldProps };\r\n","import { v4 as UUID } from 'uuid';\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport const addUUID = <T extends {}>(item: T) => ({ ...item, uuid: UUID() });\r\n","import { defaultMineFieldProps, mineFieldsProps } from 'const';\r\nimport { useMineField } from 'hooks/use-mine-field';\r\nimport { createContext } from 'react';\r\nimport { MineFieldsPropsVM } from 'view-models';\r\n\r\ntype MinesweeperContextValue = Readonly<\r\n  ReturnType<typeof useMineField> & {\r\n    readonly mineFieldsProps: MineFieldsPropsVM;\r\n  }\r\n>;\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\nexport const MinesweeperContext = createContext<MinesweeperContextValue>({\r\n  mineFieldsProps,\r\n  mineField: [],\r\n  mineFieldProps: defaultMineFieldProps,\r\n  mineFieldStatus: {\r\n    isSetup: false,\r\n    isBusted: false,\r\n    isSolved: false,\r\n    hiddenMinesCount: 0,\r\n  },\r\n  setMineFieldProps: () => {},\r\n  setupMineField: () => {},\r\n  revealCell: () => {},\r\n  toggleFlag: () => {},\r\n  revealNeighbors: () => {},\r\n  reset: () => {},\r\n});\r\n\r\nexport const { Provider: MinesweeperProvider } = MinesweeperContext;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const useDidUpdate = (fn: () => void, ...deps: any[]) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      fn();\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n};\r\n","export const formatCount = (count: number) => {\r\n  if (count < 1) {\r\n    return '000';\r\n  }\r\n\r\n  if (count < 10) {\r\n    return `00${count}`;\r\n  }\r\n\r\n  if (count < 100) {\r\n    return `0${count}`;\r\n  }\r\n\r\n  return count.toString();\r\n};\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\ntype ResetIconProps = Readonly<{\r\n  readonly isSolved: boolean;\r\n  readonly isBusted: boolean;\r\n  readonly classNamePrefix: string;\r\n  readonly onClick: () => void;\r\n}>;\r\n\r\nconst ResetIcon = ({\r\n  classNamePrefix,\r\n  isSolved,\r\n  isBusted,\r\n  onClick,\r\n}: ResetIconProps) => {\r\n  let icon = <FontAwesomeIcon icon={['far', 'meh']} />;\r\n\r\n  if (isSolved) {\r\n    icon = <FontAwesomeIcon icon={['far', 'smile']} />;\r\n  }\r\n\r\n  if (isBusted) {\r\n    icon = <FontAwesomeIcon icon={['far', 'frown']} />;\r\n  }\r\n\r\n  return (\r\n    /* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\r\n    <div className={`${classNamePrefix}ResetIcon`} onClick={onClick}>\r\n      {icon}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetIcon;\r\n","import './_controls.scss';\r\n\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\nimport { useInterval } from 'hooks/use-interval';\r\nimport React, { useCallback, useContext, useState } from 'react';\r\n\r\nimport { formatCount } from './_format-count';\r\nimport ResetIcon from './_ResetIcon';\r\n\r\nconst INTERVAL_DELAY = 1e3;\r\n\r\nconst Controls = () => {\r\n  const {\r\n    mineFieldStatus: { isSetup, isSolved, isBusted, hiddenMinesCount },\r\n    mineFieldProps,\r\n    reset,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n\r\n  const classNamePrefix = 'Controls';\r\n\r\n  const handleSecondsCount = useCallback(() => {\r\n    setSecondsCount((prevSecondsCount) => prevSecondsCount + 1);\r\n  }, []);\r\n\r\n  const handleResetIconClick = () => {\r\n    setSecondsCount(0);\r\n    reset();\r\n  };\r\n\r\n  useInterval(\r\n    handleSecondsCount,\r\n    isSetup && !(isSolved || isBusted) ? INTERVAL_DELAY : void 0\r\n  );\r\n\r\n  useDidUpdate(() => {\r\n    setSecondsCount(0);\r\n  }, mineFieldProps);\r\n\r\n  return (\r\n    <div className={classNamePrefix}>\r\n      <div>{formatCount(hiddenMinesCount)}</div>\r\n\r\n      <ResetIcon\r\n        isSolved={isSolved}\r\n        isBusted={isBusted}\r\n        classNamePrefix={classNamePrefix}\r\n        onClick={handleResetIconClick}\r\n      />\r\n\r\n      <div>{formatCount(secondsCount)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import { useEffect } from 'react';\r\n\r\nexport const useInterval = (fn: () => void, delay?: number) => {\r\n  // eslint-disable-next-line consistent-return\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fn();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [delay]);\r\n};\r\n","import './_footer.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\nconst Footer = () => {\r\n  const classNamePrefix = 'Footer';\r\n\r\n  return (\r\n    <footer className={classNamePrefix}>\r\n      <span>\r\n        Powered by\r\n        <a\r\n          className={`${classNamePrefix}Link`}\r\n          href=\"https://github.com/FakeMetalFan\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <FontAwesomeIcon icon={['fab', 'github']} />\r\n        </a>\r\n        &copy;<span>{new Date().getFullYear()}</span>\r\n      </span>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import './_header.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\nconst Header = () => {\r\n  const classNamePrefix = 'Header';\r\n\r\n  return (\r\n    <header className={classNamePrefix}>\r\n      <span className={`${classNamePrefix}Title`}>Minesweeper</span>\r\n\r\n      <a\r\n        className={`${classNamePrefix}Link`}\r\n        href=\"https://github.com/FakeMetalFan/minesweeper\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export class IndexUtils {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly mineFieldRowsCount: number) {}\r\n\r\n  to2D(index: number) {\r\n    const rowIndex = index % this.mineFieldRowsCount;\r\n\r\n    return {\r\n      rowIndex,\r\n      columnIndex: (index - rowIndex) / this.mineFieldRowsCount,\r\n    };\r\n  }\r\n\r\n  to1D(rowIndex: number, columnIndex: number) {\r\n    return columnIndex * this.mineFieldRowsCount + rowIndex;\r\n  }\r\n}\r\n","import { CellAppearance, CellValue } from 'const';\r\nimport { CellVM } from 'view-models';\r\n\r\nexport class CellChecker {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly cell: CellVM) {}\r\n\r\n  private checkCell(prop: keyof CellVM, criteria: CellValue | CellAppearance) {\r\n    return this.cell[prop] === criteria;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.checkCell('value', CellValue.Empty);\r\n  }\r\n\r\n  get isMined() {\r\n    return this.checkCell('value', CellValue.Mine);\r\n  }\r\n\r\n  get isIncorrect() {\r\n    return this.checkCell('value', CellValue.Incorrect);\r\n  }\r\n\r\n  get isBusted() {\r\n    return this.checkCell('value', CellValue.Busted);\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.checkCell('appearance', CellAppearance.Hidden);\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.checkCell('appearance', CellAppearance.Flagged);\r\n  }\r\n\r\n  get isUnsolved() {\r\n    return this.isMined && !this.isFlagged;\r\n  }\r\n\r\n  get isSolvedWrong() {\r\n    return !this.isMined && this.isFlagged;\r\n  }\r\n}\r\n","export const joinClassNames = (...classNames: string[]) =>\r\n  classNames.join(' ').trim();\r\n","export const classNamePrefix = 'Cell';\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { joinClassNames } from 'utils/join-class-names';\r\n\r\nimport { classNamePrefix } from './_const';\r\n\r\ntype BombIconProps = Readonly<{\r\n  readonly classNameModifier?: string;\r\n  readonly classNameSuffix: string;\r\n}>;\r\n\r\nconst BombIcon = ({ classNameModifier, classNameSuffix }: BombIconProps) => (\r\n  <td\r\n    className={joinClassNames(\r\n      classNamePrefix,\r\n      classNameModifier ? `${classNamePrefix}${classNameModifier}` : '',\r\n      classNameSuffix\r\n    )}\r\n  >\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </td>\r\n);\r\n\r\nexport default BombIcon;\r\n","import './_cell-factory.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo, SyntheticEvent } from 'react';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { joinClassNames } from 'utils/join-class-names';\r\nimport { CellVM } from 'view-models';\r\n\r\nimport BombIcon from './_BombIcon';\r\nimport { classNamePrefix } from './_const';\r\n\r\ntype CellFactoryProps = Readonly<\r\n  {\r\n    readonly borderRight: boolean;\r\n    readonly borderBottom: boolean;\r\n    readonly onClick: () => void;\r\n    readonly onMouseDown: (event: SyntheticEvent<HTMLTableCellElement>) => void;\r\n    readonly onContextMenu: () => void;\r\n  } & CellVM\r\n>;\r\n\r\nconst CellFactory = (props: CellFactoryProps) => {\r\n  const {\r\n    borderRight,\r\n    borderBottom,\r\n    value,\r\n    onClick,\r\n    onMouseDown,\r\n    onContextMenu,\r\n  } = props;\r\n\r\n  const {\r\n    isHidden,\r\n    isEmpty,\r\n    isFlagged,\r\n    isMined,\r\n    isIncorrect,\r\n    isBusted,\r\n  } = new CellChecker(props);\r\n\r\n  const classNameSuffix = joinClassNames(\r\n    borderRight ? 'Cell__border-right' : '',\r\n    borderBottom ? 'Cell__border-bottom' : ''\r\n  );\r\n\r\n  if (isHidden) {\r\n    return (\r\n      /* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions */\r\n      <td\r\n        className={joinClassNames(classNamePrefix, classNameSuffix)}\r\n        onClick={onClick}\r\n        onContextMenu={onContextMenu}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isFlagged) {\r\n    return (\r\n      <td\r\n        className={joinClassNames(classNamePrefix, classNameSuffix)}\r\n        onContextMenu={onContextMenu}\r\n      >\r\n        <FontAwesomeIcon icon={['far', 'flag']} />\r\n      </td>\r\n    );\r\n  }\r\n\r\n  if (isEmpty) {\r\n    return (\r\n      <td\r\n        className={joinClassNames(\r\n          classNamePrefix,\r\n          `${classNamePrefix}__empty`,\r\n          classNameSuffix\r\n        )}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isMined) {\r\n    return <BombIcon classNameSuffix={classNameSuffix} />;\r\n  }\r\n\r\n  if (isIncorrect) {\r\n    return (\r\n      <BombIcon\r\n        classNameModifier=\"__incorrect\"\r\n        classNameSuffix={classNameSuffix}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isBusted) {\r\n    return (\r\n      <BombIcon\r\n        classNameModifier=\"__busted\"\r\n        classNameSuffix={classNameSuffix}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <td\r\n      className={joinClassNames(\r\n        classNamePrefix,\r\n        `${classNamePrefix}__${value}`,\r\n        classNameSuffix\r\n      )}\r\n      onMouseDown={onMouseDown}\r\n    >\r\n      {value}\r\n    </td>\r\n  );\r\n};\r\n\r\n// TODO: optimize the component properly.\r\nexport default memo(CellFactory);\r\n","import './_mine-field.scss';\r\n\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport React, { SyntheticEvent, useContext, useMemo } from 'react';\r\nimport { IndexUtils } from 'utils/index-utils';\r\n\r\nimport CellFactory from '../CellFactory';\r\n\r\nconst CELL_SIZE = 32;\r\n\r\nconst MineField = () => {\r\n  const {\r\n    mineFieldProps: { rowsCount, columnsCount },\r\n    mineField,\r\n    mineFieldStatus: { isSetup, isBusted, isSolved },\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const indexUtils = useMemo(() => new IndexUtils(rowsCount), [rowsCount]);\r\n\r\n  const classNamePrefix = 'MineField';\r\n  const rowClassName = `${classNamePrefix}Row`;\r\n\r\n  const handleTableContextMenu = (event: SyntheticEvent<HTMLTableElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleCellClick = (cellIndex: number) => {\r\n    (isSetup ? revealCell : setupMineField)(cellIndex);\r\n  };\r\n\r\n  const handleMouseDown = (\r\n    { target, nativeEvent }: SyntheticEvent<HTMLTableCellElement>,\r\n    cellIndex: number\r\n  ) => {\r\n    const handleMouseUp = (event: Event) => {\r\n      if ((nativeEvent as MouseEvent).which !== (event as MouseEvent).which) {\r\n        revealNeighbors(cellIndex);\r\n      }\r\n\r\n      target.removeEventListener('mouseup', handleMouseUp);\r\n    };\r\n\r\n    target.addEventListener('mouseup', handleMouseUp);\r\n  };\r\n\r\n  const handleCellContextMenu = (cellIndex: number) => {\r\n    toggleFlag(cellIndex);\r\n  };\r\n\r\n  return (\r\n    <table\r\n      className={classNamePrefix}\r\n      style={{ width: rowsCount * CELL_SIZE }}\r\n      onContextMenu={handleTableContextMenu}\r\n    >\r\n      <tbody>\r\n        <tr\r\n          className={\r\n            isBusted || isSolved\r\n              ? `${rowClassName} ${rowClassName}__disabled`\r\n              : void 0\r\n          }\r\n        >\r\n          {mineField.map((cell, cellIndex) => {\r\n            const { rowIndex, columnIndex } = indexUtils.to2D(cellIndex);\r\n\r\n            return (\r\n              <CellFactory\r\n                {...cell}\r\n                borderRight={rowIndex === rowsCount - 1}\r\n                borderBottom={columnIndex === columnsCount - 1}\r\n                onClick={() => {\r\n                  handleCellClick(cellIndex);\r\n                }}\r\n                onMouseDown={(event) => {\r\n                  handleMouseDown(event, cellIndex);\r\n                }}\r\n                onContextMenu={() => {\r\n                  handleCellContextMenu(cellIndex);\r\n                }}\r\n                key={cell.uuid}\r\n              />\r\n            );\r\n          })}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default MineField;\r\n","import './_mine-field-props.scss';\r\n\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport React, { useContext, useMemo } from 'react';\r\n\r\nconst MineFieldProps = () => {\r\n  const { mineFieldsProps, mineFieldProps, setMineFieldProps } = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const items = useMemo(() => Array.from(mineFieldsProps.values()), [\r\n    mineFieldsProps,\r\n  ]);\r\n\r\n  const classNamePrefix = 'MineFieldProps';\r\n\r\n  return (\r\n    <form className={classNamePrefix}>\r\n      {items.map((item) => {\r\n        const { uuid, name } = item;\r\n\r\n        return (\r\n          <div key={uuid}>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"mineFieldProp\"\r\n              className={`${classNamePrefix}RadioButton`}\r\n              defaultChecked={name === mineFieldProps.name}\r\n              onChange={() => {\r\n                setMineFieldProps(item);\r\n              }}\r\n            />\r\n            &nbsp;\r\n            {name}\r\n          </div>\r\n        );\r\n      })}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MineFieldProps;\r\n","import * as _ from 'lodash';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { MineFieldVM } from 'view-models';\r\n\r\nexport class MineFieldUtils {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly mineField: MineFieldVM) {}\r\n\r\n  isBusted() {\r\n    return this.mineField.some((cell) => new CellChecker(cell).isBusted);\r\n  }\r\n\r\n  isSolved() {\r\n    return !_.reject(\r\n      this.mineField,\r\n      (cell) => new CellChecker(cell).isMined\r\n    ).some((cell) => new CellChecker(cell).isHidden);\r\n  }\r\n}\r\n","import { CellChecker } from 'utils/cell-checker';\r\nimport { IndexUtils } from 'utils/index-utils';\r\nimport { CellVM, MineFieldVM } from 'view-models';\r\n\r\nconst isValidArrayIndex = (index: number, length: number) =>\r\n  index > -1 && index < length;\r\n\r\nexport class NeighborsUtils {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(\r\n    private readonly mineFieldRowsCount: number,\r\n    private readonly mineFieldColumnsCount: number,\r\n    private readonly indexUtils = new IndexUtils(mineFieldRowsCount)\r\n  ) {}\r\n\r\n  getIndexes(index: number) {\r\n    const indexes: number[] = [];\r\n\r\n    const { rowIndex, columnIndex } = this.indexUtils.to2D(index);\r\n\r\n    for (let rowIndexOffset = -1; rowIndexOffset < 2; rowIndexOffset += 1) {\r\n      for (\r\n        let columnIndexOffset = -1;\r\n        columnIndexOffset < 2;\r\n        columnIndexOffset += 1\r\n      ) {\r\n        if (rowIndexOffset || columnIndexOffset) {\r\n          const targetedRowIndex = rowIndex + rowIndexOffset;\r\n          const targetedColumnIndex = columnIndex + columnIndexOffset;\r\n\r\n          if (\r\n            isValidArrayIndex(targetedRowIndex, this.mineFieldRowsCount) &&\r\n            isValidArrayIndex(targetedColumnIndex, this.mineFieldColumnsCount)\r\n          ) {\r\n            indexes.push(\r\n              this.indexUtils.to1D(targetedRowIndex, targetedColumnIndex)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return indexes;\r\n  }\r\n\r\n  canFloodFill(mineField: MineFieldVM, index: number) {\r\n    return !this.getIndexes(index).some(\r\n      (neighborIndex) => new CellChecker(mineField[neighborIndex]).isUnsolved\r\n    );\r\n  }\r\n\r\n  canReveal(mineField: MineFieldVM, index: number) {\r\n    return (\r\n      this.countMined(mineField, index) ===\r\n      this.countBy(mineField, index, (cell) => new CellChecker(cell).isFlagged)\r\n    );\r\n  }\r\n\r\n  countMined(mineField: MineFieldVM, index: number) {\r\n    return this.countBy(\r\n      mineField,\r\n      index,\r\n      (cell) => new CellChecker(cell).isMined\r\n    );\r\n  }\r\n\r\n  private countBy(\r\n    mineField: MineFieldVM,\r\n    index: number,\r\n    criteriaFn: (cell: CellVM) => boolean\r\n  ) {\r\n    return this.getIndexes(index).reduce(\r\n      (acc, neighborIndex) =>\r\n        criteriaFn(mineField[neighborIndex]) ? acc + 1 : acc,\r\n      0\r\n    );\r\n  }\r\n}\r\n","import './_minesweeper.scss';\r\n\r\nimport Controls from 'components/Controls';\r\nimport Footer from 'components/Footer';\r\nimport Header from 'components/Header';\r\nimport MineField from 'components/MineField';\r\nimport MineFieldProps from 'components/MineFieldProps';\r\nimport { defaultMineFieldProps, mineFieldsProps } from 'const';\r\nimport { MinesweeperProvider } from 'contexts/minesweeper';\r\nimport { useMineField } from 'hooks/use-mine-field';\r\nimport React from 'react';\r\n\r\nconst Minesweeper = () => {\r\n  const mineField = useMineField(defaultMineFieldProps);\r\n\r\n  return (\r\n    <MinesweeperProvider value={{ ...mineField, mineFieldsProps }}>\r\n      <Header />\r\n\r\n      <main className=\"Minesweeper\">\r\n        <Controls />\r\n        <MineField />\r\n        <MineFieldProps />\r\n      </main>\r\n\r\n      <Footer />\r\n    </MinesweeperProvider>\r\n  );\r\n};\r\n\r\nexport default Minesweeper;\r\n","import { CellAppearance, CellValue } from 'const';\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\nimport produce, { Draft } from 'immer';\r\nimport * as _ from 'lodash';\r\nimport { useMemo, useState } from 'react';\r\nimport { addUUID } from 'utils/add-uuid';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { MineFieldUtils } from 'utils/mine-field-utils';\r\nimport { NeighborsUtils } from 'utils/neighbors-utils';\r\nimport { CellVM, MineFieldPropsVM, MineFieldVM } from 'view-models';\r\n\r\ntype DraftFn = (mineField: Draft<MineFieldVM>) => void;\r\n\r\nexport const useMineField = (initialMineFieldProps: MineFieldPropsVM) => {\r\n  const [mineFieldProps, setMineFieldProps] = useState(initialMineFieldProps);\r\n\r\n  const { rowsCount, columnsCount, minesCount } = mineFieldProps;\r\n\r\n  const length = rowsCount * columnsCount;\r\n\r\n  const emptyMineField = useMemo(\r\n    () =>\r\n      Array.from({ length }, () =>\r\n        addUUID({ value: CellValue.Empty, appearance: CellAppearance.Hidden })\r\n      ),\r\n    [length]\r\n  );\r\n\r\n  const initialMineFieldStatus = useMemo(\r\n    () => ({\r\n      isSetup: false,\r\n      isBusted: false,\r\n      isSolved: false,\r\n      hiddenMinesCount: minesCount,\r\n    }),\r\n    [minesCount]\r\n  );\r\n\r\n  const neighborsUtils = useMemo(\r\n    () => new NeighborsUtils(rowsCount, columnsCount),\r\n    [rowsCount, columnsCount]\r\n  );\r\n\r\n  const [mineField, setMineField] = useState(emptyMineField);\r\n\r\n  const [mineFieldStatus, setMineFieldStatus] = useState(\r\n    initialMineFieldStatus\r\n  );\r\n\r\n  const getFloodFilledMineField = (\r\n    prevMineField: CellVM[],\r\n    cellIndex: number,\r\n    draftFn?: DraftFn\r\n  ) =>\r\n    produce(prevMineField, (draft) => {\r\n      draftFn?.(draft);\r\n\r\n      /* eslint-disable no-param-reassign */\r\n      draft[cellIndex].appearance = CellAppearance.Visible;\r\n\r\n      (function floodFill(index: number) {\r\n        if (neighborsUtils.canFloodFill(draft, index)) {\r\n          neighborsUtils.getIndexes(index).forEach((neighborIndex) => {\r\n            const cell = draft[neighborIndex];\r\n\r\n            const { isMined, isHidden, isFlagged } = new CellChecker(cell);\r\n\r\n            if (!isMined && isHidden && !isFlagged) {\r\n              cell.appearance = CellAppearance.Visible;\r\n\r\n              floodFill(neighborIndex);\r\n            }\r\n          });\r\n        }\r\n      })(cellIndex);\r\n    });\r\n\r\n  const getBustedMineField = (prevMineField: CellVM[], draftFn: DraftFn) =>\r\n    produce(prevMineField, (draft) => {\r\n      draftFn(draft);\r\n\r\n      draft.forEach((cell, index) => {\r\n        const { isUnsolved, isSolvedWrong } = new CellChecker(cell);\r\n\r\n        if (isUnsolved) {\r\n          cell.appearance = CellAppearance.Visible;\r\n        } else if (isSolvedWrong) {\r\n          draft[index] = {\r\n            ...cell,\r\n            value: CellValue.Incorrect,\r\n            appearance: CellAppearance.Visible,\r\n          };\r\n        }\r\n      });\r\n    });\r\n\r\n  const setupMineField = (cellIndex: number) => {\r\n    setMineField((prevMineField) =>\r\n      getFloodFilledMineField(prevMineField, cellIndex, (draft) => {\r\n        const indexes = _.difference(_.range(length), [\r\n          cellIndex,\r\n          ...neighborsUtils.getIndexes(cellIndex),\r\n        ]);\r\n\r\n        const minesIndexes = new Set<number>();\r\n\r\n        while (minesIndexes.size < minesCount) {\r\n          minesIndexes.add(indexes[Math.floor(Math.random() * indexes.length)]);\r\n        }\r\n\r\n        minesIndexes.forEach((index) => {\r\n          draft[index].value = CellValue.Mine;\r\n        });\r\n\r\n        draft.forEach((cell, index) => {\r\n          if (!new CellChecker(cell).isMined) {\r\n            cell.value = neighborsUtils.countMined(draft, index);\r\n          }\r\n        });\r\n      })\r\n    );\r\n\r\n    setMineFieldStatus((prevMineFieldStatus) => ({\r\n      ...prevMineFieldStatus,\r\n      isSetup: true,\r\n    }));\r\n  };\r\n\r\n  const revealCell = (cellIndex: number) => {\r\n    setMineField((prevMineField) => {\r\n      const cell = prevMineField[cellIndex];\r\n\r\n      return new CellChecker(cell).isMined\r\n        ? getBustedMineField(prevMineField, (draft) => {\r\n            draft[cellIndex] = {\r\n              ...cell,\r\n              value: CellValue.Busted,\r\n              appearance: CellAppearance.Visible,\r\n            };\r\n          })\r\n        : getFloodFilledMineField(prevMineField, cellIndex);\r\n    });\r\n  };\r\n\r\n  const toggleFlag = (cellIndex: number) => {\r\n    const { isFlagged } = new CellChecker(mineField[cellIndex]);\r\n\r\n    setMineField((prevMineField) =>\r\n      produce(prevMineField, (draft) => {\r\n        draft[cellIndex].appearance = isFlagged\r\n          ? CellAppearance.Hidden\r\n          : CellAppearance.Flagged;\r\n      })\r\n    );\r\n\r\n    setMineFieldStatus((prevMineFieldStatus) =>\r\n      produce(prevMineFieldStatus, (draft) => {\r\n        draft.hiddenMinesCount += isFlagged ? 1 : -1;\r\n      })\r\n    );\r\n  };\r\n\r\n  const revealNeighbors = (cellIndex: number) => {\r\n    setMineField((prevMineField) => {\r\n      if (neighborsUtils.canFloodFill(prevMineField, cellIndex)) {\r\n        return getFloodFilledMineField(prevMineField, cellIndex);\r\n      }\r\n\r\n      if (neighborsUtils.canReveal(prevMineField, cellIndex)) {\r\n        return getBustedMineField(prevMineField, (draft) => {\r\n          neighborsUtils.getIndexes(cellIndex).forEach((index) => {\r\n            const cell = draft[index];\r\n\r\n            const { isUnsolved, isSolvedWrong } = new CellChecker(cell);\r\n\r\n            if (isUnsolved) {\r\n              cell.value = CellValue.Busted;\r\n            } else if (isSolvedWrong) {\r\n              cell.value = CellValue.Incorrect;\r\n            }\r\n\r\n            cell.appearance = CellAppearance.Visible;\r\n          });\r\n        });\r\n      }\r\n\r\n      return prevMineField;\r\n    });\r\n  };\r\n\r\n  const reset = () => {\r\n    setMineField(emptyMineField);\r\n    setMineFieldStatus(initialMineFieldStatus);\r\n  };\r\n\r\n  useDidUpdate(() => {\r\n    reset();\r\n  }, emptyMineField);\r\n\r\n  useDidUpdate(() => {\r\n    const mineFieldUtils = new MineFieldUtils(mineField);\r\n\r\n    if (mineFieldUtils.isBusted()) {\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isBusted: true,\r\n      }));\r\n    } else if (mineFieldUtils.isSolved()) {\r\n      setMineField((prevMineField) =>\r\n        produce(prevMineField, (draft) => {\r\n          draft.forEach((cell) => {\r\n            if (new CellChecker(cell).isMined) {\r\n              cell.appearance = CellAppearance.Flagged;\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSolved: true,\r\n        hiddenMinesCount: 0,\r\n      }));\r\n    }\r\n  }, mineField);\r\n\r\n  return {\r\n    mineField,\r\n    mineFieldProps,\r\n    mineFieldStatus,\r\n    setMineFieldProps,\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n    reset,\r\n  };\r\n};\r\n","import Minesweeper from 'containers/Minesweeper';\r\nimport React from 'react';\r\n\r\nconst App = () => <Minesweeper />;\r\n\r\nexport default App;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport {\r\n  faFlag,\r\n  faFrown,\r\n  faMeh,\r\n  faSmile,\r\n} from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import 'index.scss';\r\n\r\nimport App from 'App';\r\nimport React, { StrictMode } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}