{"version":3,"sources":["components/Cell/cell.module.scss","containers/MineField/mineField.module.scss","components/Footer/footer.module.scss","components/Header/header.module.scss","containers/MineFieldParams/mineFieldParams.module.scss","components/Face/face.module.scss","containers/Indicators/indicators.module.scss","containers/Minesweeper/minesweeper.module.scss","constants/cellAppearance.ts","components/Footer/index.tsx","components/Header/index.tsx","contexts/minesweeper.ts","constants/cellValue.ts","utils/addId.ts","constants/mineFieldsParams.ts","hooks/useDidUpdate.ts","utils/cellChecker.ts","utils/mineFieldChecker.ts","utils/indexUtils.ts","utils/neighborsUtils.ts","hooks/useMineField.ts","utils/formatCount.ts","components/Counter/index.tsx","components/Face/index.tsx","hooks/useCallbackRef.ts","hooks/useInterval.ts","containers/Indicators/index.tsx","components/Cell/index.tsx","containers/MineField/index.tsx","components/Radio/index.tsx","containers/MineFieldParams/index.tsx","containers/Minesweeper/index.tsx","App.tsx","setupIcons.ts","index.tsx"],"names":["module","exports","CellAppearance","Footer","className","styles","footer","link","href","target","rel","icon","Date","getFullYear","memo","Header","header","MinesweeperContext","createContext","mineField","mineFieldParams","mineFieldStatus","setMineFieldParams","setup","openCell","toggleFlag","openNeighbors","reset","MinesweeperProvider","Provider","CellValue","addId","item","id","nanoid","smallMineFieldParams","name","width","height","minesCount","mineFieldsParams","useDidUpdate","callback","didMount","useRef","deps","useEffect","current","CellChecker","cell","key","value","this","isEqual","Empty","Mine","Hidden","Visible","Flagged","Wrong","Busted","isMined","isFlagged","MineFieldChecker","some","isBusted","reject","isVisible","IndexUtils","length","index","rowIndex","columnIndex","isValidArrayIndex","NeighborsUtils","indexUtils","to2D","indexes","rowIndexOffset","columnIndexOffset","targetRowIndex","targetColumnIndex","push","to1D","getIndexes","countMined","countBy","reduce","acc","useMineField","useState","emptyMineField","useMemo","Array","from","appearance","setMineField","initialMineFieldStatus","isSetup","isSolved","hiddenMinesCount","setMineFieldStatus","neighborsUtils","getFloodFilledMineField","draftCallback","produce","draft","floodFill","canFloodFill","forEach","neighbor","isHidden","getBustedMineField","isMisplacedFlag","mineFieldChecker","prevMineFieldStatus","prevMineField","restIndexes","difference","range","minedIndexes","Set","size","add","Math","floor","random","canOpen","formatCount","count","toString","Counter","Face","frown","smile","onClick","type","face","useCallbackRef","callbackRef","useCallback","args","call","useInterval","interval","intervalId","setInterval","clearInterval","Indicators","useContext","secondsCount","setSecondsCount","handleFaceClick","indicators","Cell","onMouseDown","onContextMenu","isEmpty","isWrong","visibleStyles","classNames","visible","handleContextMenu","aria-label","busted","wrong","event","MineField","handleCellClick","handleCellMouseDown","nativeEvent","addEventListener","handleMouseUp","which","removeEventListener","handleCellContextMenu","data-testid","mine_field","preventDefault","row","disabled","style","Number","parseFloat","cellStyles","cellSize","map","Radio","checked","onChange","defaultChecked","MineFieldParams","handleMineFieldParamsChange","mine_field_params","radio","Minesweeper","minesweeper","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","setupIcons","render","document","getElementById"],"mappings":"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","file":"static/js/main.6227fdfe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cellSize\":\"32px\",\"cell\":\"cell_cell__14Twb\",\"visible\":\"cell_visible__Ladne\",\"busted\":\"cell_busted__3Eypx\",\"wrong\":\"cell_wrong__VEfOs\",\"value_1\":\"cell_value_1__23PsV\",\"value_2\":\"cell_value_2__1Q9Ag\",\"value_3\":\"cell_value_3__1_bSN\",\"value_4\":\"cell_value_4__Tvv7G\",\"value_5\":\"cell_value_5__pfAPd\",\"value_6\":\"cell_value_6__19hZL\",\"value_7\":\"cell_value_7__1IqTn\",\"value_8\":\"cell_value_8__2-ysP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mine_field\":\"mineField_mine_field__2Fl0L\",\"row\":\"mineField_row__35wCK\",\"row_9\":\"mineField_row_9__2tIGm\",\"row_16\":\"mineField_row_16__3WJBK\",\"row_30\":\"mineField_row_30__2cLbb\",\"disabled\":\"mineField_disabled__deIQ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__3SziO\",\"link\":\"footer_link__2dFa3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2yLQj\",\"link\":\"header_link__3R6BL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mine_field_params\":\"mineFieldParams_mine_field_params__1t4La\",\"radio\":\"mineFieldParams_radio__2JQc5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"face\":\"face_face__1V5r6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"indicators\":\"indicators_indicators__xiJJ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"minesweeper\":\"minesweeper_minesweeper__24ziS\"};","// eslint-disable-next-line no-shadow\nenum CellAppearance {\n  Hidden,\n  Visible,\n  Flagged,\n  Busted,\n  Wrong,\n}\n\nexport default CellAppearance;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { memo } from 'react';\n\nimport styles from './footer.module.scss';\n\nconst Footer = () => (\n  <footer className={styles.footer}>\n    <span>\n      Powered by\n      <a\n        className={styles.link}\n        href=\"https://github.com/FakeMetalFan\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <FontAwesomeIcon icon={['fab', 'github']} />\n      </a>\n      &copy;\n      <span>{new Date().getFullYear()}</span>\n    </span>\n  </footer>\n);\n\nexport default memo(Footer);\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { memo } from 'react';\n\nimport styles from './header.module.scss';\n\nconst Header = () => (\n  <header className={styles.header}>\n    Minesweeper\n    <a\n      className={styles.link}\n      href=\"https://github.com/FakeMetalFan/minesweeper\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <FontAwesomeIcon icon={['fab', 'github']} />\n    </a>\n  </header>\n);\n\nexport default memo(Header);\n","import useMineField from 'hooks/useMineField';\nimport { createContext } from 'react';\n\nconst MinesweeperContext = createContext<ReturnType<typeof useMineField>>({\n  mineField: [],\n  mineFieldParams: {} as MineFieldParams,\n  mineFieldStatus: {} as MineFieldStatus,\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  setMineFieldParams: () => {},\n  setup: () => {},\n  openCell: () => {},\n  toggleFlag: () => {},\n  openNeighbors: () => {},\n  reset: () => {},\n});\n\nexport const { Provider: MinesweeperProvider } = MinesweeperContext;\n\nexport default MinesweeperContext;\n","// eslint-disable-next-line no-shadow\nenum CellValue {\n  Empty,\n  One,\n  Two,\n  Three,\n  Four,\n  Five,\n  Six,\n  Seven,\n  Eight,\n  Mine,\n}\n\nexport default CellValue;\n","import { nanoid } from 'nanoid';\n\nconst addId = <T extends Record<string, unknown>>(item: T) => ({\n  ...item,\n  id: nanoid(),\n});\n\nexport default addId;\n","import addId from 'utils/addId';\n\nexport const smallMineFieldParams = addId({\n  name: 'Beginner',\n  width: 9,\n  height: 9,\n  minesCount: 10,\n});\n\nconst mineFieldsParams = [\n  smallMineFieldParams,\n  addId({\n    name: 'Intermediate',\n    width: 16,\n    height: 16,\n    minesCount: 40,\n  }),\n  addId({\n    name: 'Expert',\n    width: 30,\n    height: 16,\n    minesCount: 99,\n  }),\n];\n\nexport default mineFieldsParams;\n","import { useEffect, useRef } from 'react';\n\nconst useDidUpdate = (callback: () => void, ...deps: unknown[]) => {\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) {\n      callback();\n    } else {\n      didMount.current = true;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n};\n\nexport default useDidUpdate;\n","import CellAppearance from 'constants/cellAppearance';\nimport CellValue from 'constants/cellValue';\n\nclass CellChecker {\n  constructor(private cell: Cell) {}\n\n  private isEqual(key: keyof Cell, value: Cell[keyof Cell]) {\n    return this.cell[key] === value;\n  }\n\n  get isEmpty() {\n    return this.isEqual('value', CellValue.Empty);\n  }\n\n  get isMined() {\n    return this.isEqual('value', CellValue.Mine);\n  }\n\n  get isHidden() {\n    return this.isEqual('appearance', CellAppearance.Hidden);\n  }\n\n  get isVisible() {\n    return this.isEqual('appearance', CellAppearance.Visible);\n  }\n\n  get isFlagged() {\n    return this.isEqual('appearance', CellAppearance.Flagged);\n  }\n\n  get isWrong() {\n    return this.isEqual('appearance', CellAppearance.Wrong);\n  }\n\n  get isBusted() {\n    return this.isEqual('appearance', CellAppearance.Busted);\n  }\n\n  get isMisplacedFlag() {\n    return !this.isMined && this.isFlagged;\n  }\n}\n\nexport default CellChecker;\n","import { reject } from 'lodash-es';\nimport CellChecker from 'utils/cellChecker';\n\nclass MineFieldChecker {\n  constructor(private mineField: Cell[]) {}\n\n  isBusted() {\n    return this.mineField.some((cell) => new CellChecker(cell).isBusted);\n  }\n\n  isSolved() {\n    return !reject(\n      this.mineField,\n      (cell) => new CellChecker(cell).isMined\n    ).some((cell) => !new CellChecker(cell).isVisible);\n  }\n}\n\nexport default MineFieldChecker;\n","class IndexUtils {\n  constructor(private length: number) {}\n\n  to2D(index: number) {\n    const rowIndex = index % this.length;\n\n    return { rowIndex, columnIndex: (index - rowIndex) / this.length };\n  }\n\n  to1D(rowIndex: number, columnIndex: number) {\n    return columnIndex * this.length + rowIndex;\n  }\n}\n\nexport default IndexUtils;\n","import CellChecker from 'utils/cellChecker';\nimport IndexUtils from 'utils/indexUtils';\n\nconst isValidArrayIndex = (index: number, length: number) =>\n  index > -1 && index < length;\n\nclass NeighborsUtils {\n  private indexUtils = new IndexUtils(this.width);\n\n  constructor(private width: number, private height: number) {}\n\n  getIndexes({ index }: Cell) {\n    const { rowIndex, columnIndex } = this.indexUtils.to2D(index);\n    const indexes = [];\n\n    for (let rowIndexOffset = -1; rowIndexOffset < 2; rowIndexOffset += 1) {\n      for (\n        let columnIndexOffset = -1;\n        columnIndexOffset < 2;\n        columnIndexOffset += 1\n      ) {\n        if (rowIndexOffset || columnIndexOffset) {\n          const targetRowIndex = rowIndex + rowIndexOffset;\n          const targetColumnIndex = columnIndex + columnIndexOffset;\n\n          if (\n            isValidArrayIndex(targetRowIndex, this.width) &&\n            isValidArrayIndex(targetColumnIndex, this.height)\n          ) {\n            indexes.push(\n              this.indexUtils.to1D(targetRowIndex, targetColumnIndex)\n            );\n          }\n        }\n      }\n    }\n\n    return indexes;\n  }\n\n  canFloodFill(mineField: Cell[], cell: Cell) {\n    return !this.getIndexes(cell).some((index) => {\n      const { isMined, isFlagged } = new CellChecker(mineField[index]);\n\n      return isMined && !isFlagged;\n    });\n  }\n\n  canOpen(mineField: Cell[], cell: Cell) {\n    return (\n      this.countMined(mineField, cell) ===\n      this.countBy(mineField, cell, 'isFlagged')\n    );\n  }\n\n  countMined(mineField: Cell[], cell: Cell) {\n    return this.countBy(mineField, cell, 'isMined');\n  }\n\n  private countBy(mineField: Cell[], cell: Cell, key: keyof CellChecker) {\n    return this.getIndexes(cell).reduce(\n      (acc, index) => (new CellChecker(mineField[index])[key] ? acc + 1 : acc),\n      0\n    );\n  }\n}\n\nexport default NeighborsUtils;\n","import CellAppearance from 'constants/cellAppearance';\nimport CellValue from 'constants/cellValue';\nimport { smallMineFieldParams } from 'constants/mineFieldsParams';\nimport useDidUpdate from 'hooks/useDidUpdate';\nimport produce, { Draft } from 'immer';\nimport { difference, range } from 'lodash-es';\nimport { useMemo, useState } from 'react';\nimport addId from 'utils/addId';\nimport CellChecker from 'utils/cellChecker';\nimport MineFieldChecker from 'utils/mineFieldChecker';\nimport NeighborsUtils from 'utils/neighborsUtils';\n\ntype DraftCallback = (draft: Draft<Cell[]>) => void;\n\nconst useMineField = () => {\n  const [mineFieldParams, setMineFieldParams] = useState(smallMineFieldParams);\n\n  const { width, height, minesCount } = mineFieldParams;\n  const length = width * height;\n\n  const emptyMineField = useMemo(\n    () =>\n      Array.from({ length }, (item, index) =>\n        addId({\n          index,\n          value: CellValue.Empty,\n          appearance: CellAppearance.Hidden,\n        })\n      ),\n    [length]\n  );\n\n  const [mineField, setMineField] = useState(emptyMineField);\n\n  const initialMineFieldStatus = {\n    isSetup: false,\n    isBusted: false,\n    isSolved: false,\n    hiddenMinesCount: minesCount,\n  };\n\n  const [mineFieldStatus, setMineFieldStatus] = useState(\n    initialMineFieldStatus\n  );\n\n  const neighborsUtils = new NeighborsUtils(width, height);\n\n  const getFloodFilledMineField = (cell: Cell, draftCallback?: DraftCallback) =>\n    produce(mineField, (draft) => {\n      draftCallback?.(draft);\n      /* eslint-disable no-param-reassign */\n      draft[cell.index].appearance = CellAppearance.Visible;\n\n      (function floodFill(item: Cell) {\n        if (neighborsUtils.canFloodFill(draft, item)) {\n          neighborsUtils.getIndexes(item).forEach((index) => {\n            const neighbor = draft[index];\n            const { isMined, isHidden, isFlagged } = new CellChecker(neighbor);\n\n            if (!isMined && isHidden && !isFlagged) {\n              neighbor.appearance = CellAppearance.Visible;\n\n              floodFill(neighbor);\n            }\n          });\n        }\n      })(cell);\n    });\n\n  const getBustedMineField = (cell: Cell, draftCallback: DraftCallback) =>\n    produce(mineField, (draft) => {\n      draftCallback(draft);\n      draft.forEach((item) => {\n        const {\n          isMisplacedFlag,\n          isMined,\n          isBusted,\n          isFlagged,\n        } = new CellChecker(item);\n\n        if (isMisplacedFlag) {\n          item.appearance = CellAppearance.Wrong;\n        } else if (isMined && !isBusted && !isFlagged) {\n          item.appearance = CellAppearance.Visible;\n        }\n      });\n    });\n\n  const setup = (cell: Cell) => {\n    setMineField(\n      getFloodFilledMineField(cell, (draft) => {\n        const restIndexes = difference(range(length), [\n          cell.index,\n          ...neighborsUtils.getIndexes(cell),\n        ]);\n        const minedIndexes = new Set<number>();\n\n        while (minedIndexes.size < minesCount) {\n          minedIndexes.add(\n            restIndexes[Math.floor(Math.random() * restIndexes.length)]\n          );\n        }\n\n        minedIndexes.forEach((index) => {\n          draft[index].value = CellValue.Mine;\n        });\n\n        draft.forEach((item) => {\n          if (!new CellChecker(item).isMined) {\n            item.value = neighborsUtils.countMined(draft, item);\n          }\n        });\n      })\n    );\n\n    setMineFieldStatus((prevMineFieldStatus) => ({\n      ...prevMineFieldStatus,\n      isSetup: true,\n    }));\n  };\n\n  const openCell = (cell: Cell) => {\n    setMineField(\n      new CellChecker(cell).isMined\n        ? getBustedMineField(cell, (draft) => {\n            draft[cell.index].appearance = CellAppearance.Busted;\n          })\n        : getFloodFilledMineField(cell)\n    );\n  };\n\n  const toggleFlag = (cell: Cell) => {\n    const { isFlagged } = new CellChecker(cell);\n\n    setMineField((prevMineField) =>\n      produce(prevMineField, (draft) => {\n        draft[cell.index].appearance = isFlagged\n          ? CellAppearance.Hidden\n          : CellAppearance.Flagged;\n      })\n    );\n\n    setMineFieldStatus((prevMineFieldStatus) =>\n      produce(prevMineFieldStatus, (draft) => {\n        draft.hiddenMinesCount += isFlagged ? 1 : -1;\n      })\n    );\n  };\n\n  const openNeighbors = (cell: Cell) => {\n    if (neighborsUtils.canFloodFill(mineField, cell)) {\n      setMineField(getFloodFilledMineField(cell));\n    } else if (neighborsUtils.canOpen(mineField, cell)) {\n      setMineField(\n        getBustedMineField(cell, (draft) => {\n          neighborsUtils.getIndexes(cell).forEach((index) => {\n            const neighbor = draft[index];\n            const { isMined, isFlagged, isMisplacedFlag } = new CellChecker(\n              neighbor\n            );\n\n            if (isMined && !isFlagged) {\n              neighbor.appearance = CellAppearance.Busted;\n            } else if (!isMisplacedFlag) {\n              neighbor.appearance = CellAppearance.Visible;\n            }\n          });\n        })\n      );\n    }\n  };\n\n  const reset = () => {\n    setMineField(emptyMineField);\n    setMineFieldStatus(initialMineFieldStatus);\n  };\n\n  useDidUpdate(() => {\n    reset();\n  }, emptyMineField);\n\n  useDidUpdate(() => {\n    const mineFieldChecker = new MineFieldChecker(mineField);\n\n    if (mineFieldChecker.isBusted()) {\n      setMineFieldStatus((prevMineFieldStatus) => ({\n        ...prevMineFieldStatus,\n        isBusted: true,\n      }));\n    } else if (mineFieldChecker.isSolved()) {\n      setMineField((prevMineField) =>\n        produce(prevMineField, (draft) => {\n          draft.forEach((cell) => {\n            if (new CellChecker(cell).isMined) {\n              cell.appearance = CellAppearance.Flagged;\n            }\n          });\n        })\n      );\n\n      setMineFieldStatus((prevMineFieldStatus) => ({\n        ...prevMineFieldStatus,\n        isSolved: true,\n        hiddenMinesCount: 0,\n      }));\n    }\n  }, mineField);\n\n  return {\n    mineField,\n    mineFieldParams,\n    mineFieldStatus,\n    setMineFieldParams,\n    setup,\n    openCell,\n    toggleFlag,\n    openNeighbors,\n    reset,\n  };\n};\n\nexport default useMineField;\n","const formatCount = (count = 0) => {\n  if (count < 1) {\n    return '000';\n  }\n\n  if (count < 10) {\n    return `00${count}`;\n  }\n\n  if (count < 100) {\n    return `0${count}`;\n  }\n\n  return count.toString();\n};\n\nexport default formatCount;\n","import { memo } from 'react';\nimport formatCount from 'utils/formatCount';\n\nconst Counter = ({ count }: { count: number }) => (\n  <div>{formatCount(count)}</div>\n);\n\nexport default memo(Counter);\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { memo } from 'react';\n\nimport styles from './face.module.scss';\n\ninterface Props {\n  frown?: boolean;\n  smile?: boolean;\n  onClick?: () => void;\n}\n\nconst Face = ({ frown, smile, onClick }: Props) => {\n  let icon = <FontAwesomeIcon icon={['far', 'meh']} />;\n\n  if (frown) {\n    icon = <FontAwesomeIcon icon={['far', 'frown']} />;\n  }\n\n  if (smile) {\n    icon = <FontAwesomeIcon icon={['far', 'smile']} />;\n  }\n\n  return (\n    <button type=\"button\" className={styles.face} onClick={onClick}>\n      {icon}\n    </button>\n  );\n};\n\nexport default memo(Face);\n","import { useCallback, useEffect, useRef } from 'react';\n\nconst useCallbackRef = (callback: (...args: never[]) => void) => {\n  const callbackRef = useRef<typeof callback>();\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  return useCallback((...args: []) => {\n    callbackRef.current?.(...args);\n  }, []);\n};\n\nexport default useCallbackRef;\n","import { useEffect, useRef } from 'react';\n\nconst useInterval = (callback: () => void, interval?: number | null) => {\n  const callbackRef = useRef<typeof callback>();\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  useEffect(() => {\n    if (!interval) {\n      return undefined;\n    }\n\n    const intervalId = setInterval(() => {\n      callbackRef.current?.();\n    }, interval);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [interval]);\n};\n\nexport default useInterval;\n","import Counter from 'components/Counter';\nimport Face from 'components/Face';\nimport MinesweeperContext from 'contexts/minesweeper';\nimport useCallbackRef from 'hooks/useCallbackRef';\nimport useDidUpdate from 'hooks/useDidUpdate';\nimport useInterval from 'hooks/useInterval';\nimport { useContext, useState } from 'react';\n\nimport styles from './indicators.module.scss';\n\nconst Indicators = () => {\n  const { mineFieldStatus, mineFieldParams, reset } = useContext(\n    MinesweeperContext\n  );\n\n  const { isSetup, isSolved, isBusted, hiddenMinesCount } = mineFieldStatus;\n\n  const [secondsCount, setSecondsCount] = useState(0);\n\n  const handleFaceClick = useCallbackRef(() => {\n    setSecondsCount(0);\n    reset();\n  });\n\n  useInterval(\n    () => {\n      setSecondsCount(secondsCount + 1);\n    },\n    isSetup && !(isSolved || isBusted) ? 1e3 : null\n  );\n\n  useDidUpdate(() => {\n    setSecondsCount(0);\n  }, mineFieldParams);\n\n  return (\n    <div className={styles.indicators}>\n      <Counter count={hiddenMinesCount} />\n      <Face frown={isBusted} smile={isSolved} onClick={handleFaceClick} />\n      <Counter count={secondsCount} />\n    </div>\n  );\n};\n\nexport default Indicators;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classNames from 'classnames';\nimport { memo, SyntheticEvent } from 'react';\nimport CellChecker from 'utils/cellChecker';\n\nimport styles from './cell.module.scss';\n\ninterface Props {\n  cell: Cell;\n  onClick?: (cell: Cell) => void;\n  onMouseDown?: (event: SyntheticEvent<HTMLButtonElement>, cell: Cell) => void;\n  onContextMenu?: (cell: Cell) => void;\n}\n\nconst Cell = ({ cell, onClick, onMouseDown, onContextMenu }: Props) => {\n  const {\n    isHidden,\n    isEmpty,\n    isFlagged,\n    isMined,\n    isWrong,\n    isBusted,\n  } = new CellChecker(cell);\n\n  const { value } = cell;\n\n  const visibleStyles = classNames(styles.cell, styles.visible);\n\n  const handleClick = () => {\n    onClick?.(cell);\n  };\n\n  const handleContextMenu = () => {\n    onContextMenu?.(cell);\n  };\n\n  const handleMouseDown = (event: SyntheticEvent<HTMLButtonElement>) => {\n    onMouseDown?.(event, cell);\n  };\n\n  if (isHidden) {\n    return (\n      <button\n        type=\"button\"\n        aria-label=\"cell\"\n        className={styles.cell}\n        onClick={handleClick}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  if (isFlagged) {\n    return (\n      <button\n        type=\"button\"\n        className={styles.cell}\n        onContextMenu={handleContextMenu}\n      >\n        <FontAwesomeIcon icon={['far', 'flag']} />\n      </button>\n    );\n  }\n\n  if (isEmpty) {\n    return <button type=\"button\" aria-label=\"cell\" className={visibleStyles} />;\n  }\n\n  if (isMined || isBusted || isWrong) {\n    return (\n      <button\n        type=\"button\"\n        className={classNames(visibleStyles, {\n          [styles.busted]: isBusted,\n          [styles.wrong]: isWrong,\n        })}\n      >\n        <FontAwesomeIcon icon={['fas', 'bomb']} />\n      </button>\n    );\n  }\n\n  return (\n    <button\n      type=\"button\"\n      className={classNames(visibleStyles, styles[`value_${value}`])}\n      onMouseDown={handleMouseDown}\n    >\n      {value}\n    </button>\n  );\n};\n\nexport default memo(Cell);\n","import classNames from 'classnames';\nimport Cell from 'components/Cell';\nimport cellStyles from 'components/Cell/cell.module.scss';\nimport MinesweeperContext from 'contexts/minesweeper';\nimport useCallbackRef from 'hooks/useCallbackRef';\nimport { SyntheticEvent, useContext } from 'react';\n\nimport styles from './mineField.module.scss';\n\nconst MineField = () => {\n  const {\n    mineFieldParams: { width = 0 } = {},\n    mineField = [],\n    mineFieldStatus: {\n      isSetup,\n      isBusted,\n      isSolved,\n    } = {} as Partial<MineFieldStatus>,\n    setup,\n    openCell,\n    toggleFlag,\n    openNeighbors,\n  } = useContext(MinesweeperContext);\n\n  const handleContextMenu = (event: SyntheticEvent<HTMLDivElement>) => {\n    event.preventDefault();\n  };\n\n  const handleCellClick = useCallbackRef((cell: Cell) => {\n    (isSetup ? openCell : setup)(cell);\n  });\n\n  const handleCellMouseDown = useCallbackRef(\n    (\n      { target, nativeEvent }: SyntheticEvent<HTMLButtonElement>,\n      cell: Cell\n    ) => {\n      const handleMouseUp = (event: Event) => {\n        if ((nativeEvent as MouseEvent).which !== (event as MouseEvent).which) {\n          openNeighbors(cell);\n        }\n\n        target.removeEventListener('mouseup', handleMouseUp);\n      };\n\n      target.addEventListener('mouseup', handleMouseUp);\n    }\n  );\n\n  const handleCellContextMenu = useCallbackRef(toggleFlag);\n\n  return (\n    <div\n      data-testid={styles.mine_field}\n      className={styles.mine_field}\n      onContextMenu={handleContextMenu}\n    >\n      <div\n        data-testid={styles.row}\n        className={classNames(styles.row, styles[`row_${width}`], {\n          [styles.disabled]: isBusted || isSolved,\n        })}\n        style={{ width: width * Number.parseFloat(cellStyles.cellSize) }}\n      >\n        {mineField.map((cell) => (\n          <Cell\n            cell={cell}\n            onClick={handleCellClick}\n            onMouseDown={handleCellMouseDown}\n            onContextMenu={handleCellContextMenu}\n            key={cell.id}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MineField;\n","import { memo } from 'react';\n\ninterface Props<T> {\n  item: T;\n  name: string;\n  checked?: boolean;\n  className?: string;\n  onChange?: (item: T) => void;\n}\n\nconst Radio = <T extends { name: string }>({\n  item,\n  name,\n  checked,\n  className,\n  onChange,\n}: Props<T>) => {\n  const handleChange = () => {\n    onChange?.(item);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"radio\"\n        name={name}\n        className={className}\n        defaultChecked={checked}\n        onChange={handleChange}\n      />\n      {item.name}\n    </div>\n  );\n};\n\nexport default memo(Radio) as typeof Radio;\n","import Radio from 'components/Radio';\nimport mineFieldsParams from 'constants/mineFieldsParams';\nimport MinesweeperContext from 'contexts/minesweeper';\nimport useCallbackRef from 'hooks/useCallbackRef';\nimport { useContext } from 'react';\n\nimport styles from './mineFieldParams.module.scss';\n\nconst MineFieldParams = () => {\n  const { mineFieldParams, setMineFieldParams } = useContext(\n    MinesweeperContext\n  );\n\n  const handleMineFieldParamsChange = useCallbackRef(setMineFieldParams);\n\n  return (\n    <form className={styles.mine_field_params}>\n      {mineFieldsParams.map((item) => {\n        const { name, id } = item;\n\n        return (\n          <Radio\n            key={id}\n            item={item}\n            name=\"mine-field-params\"\n            className={styles.radio}\n            checked={name === mineFieldParams.name}\n            onChange={handleMineFieldParamsChange}\n          />\n        );\n      })}\n    </form>\n  );\n};\n\nexport default MineFieldParams;\n","import Footer from 'components/Footer';\nimport Header from 'components/Header';\nimport { MinesweeperProvider } from 'contexts/minesweeper';\nimport useMineField from 'hooks/useMineField';\n\nimport Indicators from '../Indicators';\nimport MineField from '../MineField';\nimport MineFieldParams from '../MineFieldParams';\nimport styles from './minesweeper.module.scss';\n\nconst Minesweeper = () => (\n  <MinesweeperProvider value={useMineField()}>\n    <Header />\n    <main className={styles.minesweeper}>\n      <Indicators />\n      <MineField />\n      <MineFieldParams />\n    </main>\n    <Footer />\n  </MinesweeperProvider>\n);\n\nexport default Minesweeper;\n","import Minesweeper from 'containers/Minesweeper';\n\nconst App = () => <Minesweeper />;\n\nexport default App;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport {\n  faFlag,\n  faFrown,\n  faMeh,\n  faSmile,\n} from '@fortawesome/free-regular-svg-icons';\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\n\nconst setupIcons = () => {\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\n};\n\nexport default setupIcons;\n","import 'index.scss';\n\nimport App from 'App';\nimport { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport setupIcons from 'setupIcons';\n\nsetupIcons();\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}