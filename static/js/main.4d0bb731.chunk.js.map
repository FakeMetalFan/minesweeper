{"version":3,"sources":["const/index.ts","components/Footer/index.tsx","components/Header/index.tsx","utils/add-uuid.ts","contexts/minesweeper.ts","hooks/use-did-update.ts","utils/cell-checker.ts","utils/mine-field-checker.ts","utils/index-utils.ts","utils/neighbors-utils.ts","components/Counter/index.tsx","components/FaceIcon/index.tsx","containers/Indicators/index.tsx","hooks/use-interval.ts","utils/join-class-names.ts","components/BombIcon/index.tsx","components/CellFactory/index.tsx","containers/MineField/index.tsx","components/RadioButton/index.tsx","containers/MineFieldProps/index.tsx","containers/Minesweeper/index.tsx","hooks/use-mine-field.ts","App.tsx","setupIcons.ts","index.tsx"],"names":["MineFieldRowsCount","MineFieldColumnsCount","MineFieldMinesCount","MineFieldPropsKey","CellValue","CellAppearance","Footer","classNamePrefix","className","href","target","rel","icon","Date","getFullYear","memo","Header","addUUID","item","uuid","UUID","smallMineFieldProps","name","rowsCount","SM","columnsCount","minesCount","mineFieldsProps","Map","set","MD","BG","MinesweeperContext","createContext","mineField","mineFieldProps","defaultMineFieldProps","mineFieldStatus","isSetup","isBusted","isSolved","hiddenMinesCount","setMineFieldProps","setupMineField","revealCell","toggleFlag","revealNeighbors","reset","MinesweeperProvider","Provider","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","CellChecker","cell","prop","criteria","this","checkCell","Empty","Mine","Incorrect","Busted","Hidden","Flagged","isMined","isFlagged","MineFieldChecker","some","reject","isHidden","IndexUtils","mineFieldRowsCount","index","rowIndex","columnIndex","isValidArrayIndex","length","NeighborsUtils","mineFieldColumnsCount","indexUtils","indexes","to2D","rowIndexOffset","columnIndexOffset","targetedRowIndex","targetedColumnIndex","push","to1D","getIndexes","isUnsolved","countMined","countBy","neighbor","criteriaFn","reduce","acc","neighborIndex","formatCount","count","toString","Counter","FaceIcon","onClick","type","Indicators","faceIcon","useContext","useState","secondsCount","setSecondsCount","handleFaceIconClick","useCallback","delay","fnRef","intervalId","setInterval","clearInterval","useInterval","joinClassNames","classNames","filter","Boolean","join","trim","BombIcon","CellFactory","props","withBorderRight","withBorderBottom","onMouseDown","onContextMenu","value","isEmpty","isIncorrect","classNameSuffix","handleContextMenu","aria-label","event","MineField","rowClassNamePrefix","handleCellClick","handleCellMouseDown","nativeEvent","addEventListener","handleMouseUp","which","removeEventListener","handleCellContextMenu","style","width","preventDefault","map","cellIndex","RadioButton","checked","onChange","defaultChecked","MineFieldProps","radioButtonClassNamePrefix","handleMineFieldPropsChange","Array","from","values","Minesweeper","initialMineFieldProps","emptyMineField","useMemo","appearance","initialMineFieldStatus","neighborsUtils","setMineField","setMineFieldStatus","getFloodFilledMineField","prevMineField","draftFn","produce","draft","Visible","floodFill","canFloodFill","forEach","getBustedMineField","isSolvedWrong","difference","range","minesIndexes","Set","size","add","Math","floor","random","prevMineFieldStatus","canReveal","mineFieldUtils","useMineField","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d0bb731.chunk.js","sourcesContent":["import { addUUID } from 'utils/add-uuid';\r\nimport { MineFieldsProps } from 'view-models';\r\n\r\n/* eslint-disable no-shadow */\r\nexport enum MineFieldRowsCount {\r\n  SM = 9,\r\n  MD = 16,\r\n  BG = 30,\r\n}\r\n\r\nexport enum MineFieldColumnsCount {\r\n  SM = 9,\r\n  MD = 16,\r\n  BG = 16,\r\n}\r\n\r\nexport enum MineFieldMinesCount {\r\n  SM = 10,\r\n  MD = 40,\r\n  BG = 99,\r\n}\r\n\r\nexport enum MineFieldPropsKey {\r\n  SM,\r\n  MD,\r\n  BG,\r\n}\r\n\r\nexport enum CellValue {\r\n  Empty,\r\n  One,\r\n  Two,\r\n  Three,\r\n  Four,\r\n  Five,\r\n  Six,\r\n  Seven,\r\n  Eight,\r\n  Mine,\r\n  Incorrect,\r\n  Busted,\r\n}\r\n\r\nexport enum CellAppearance {\r\n  Hidden,\r\n  Visible,\r\n  Flagged,\r\n}\r\n\r\nconst smallMineFieldProps = addUUID({\r\n  name: 'Beginner',\r\n  rowsCount: MineFieldRowsCount.SM,\r\n  columnsCount: MineFieldColumnsCount.SM,\r\n  minesCount: MineFieldMinesCount.SM,\r\n});\r\n\r\nexport const mineFieldsProps: MineFieldsProps = new Map()\r\n  .set(MineFieldPropsKey.SM, smallMineFieldProps)\r\n  .set(\r\n    MineFieldPropsKey.MD,\r\n    addUUID({\r\n      name: 'Intermediate',\r\n      rowsCount: MineFieldRowsCount.MD,\r\n      columnsCount: MineFieldColumnsCount.MD,\r\n      minesCount: MineFieldMinesCount.MD,\r\n    })\r\n  )\r\n  .set(\r\n    MineFieldPropsKey.BG,\r\n    addUUID({\r\n      name: 'Expert',\r\n      rowsCount: MineFieldRowsCount.BG,\r\n      columnsCount: MineFieldColumnsCount.BG,\r\n      minesCount: MineFieldMinesCount.BG,\r\n    })\r\n  );\r\n\r\nexport { smallMineFieldProps as defaultMineFieldProps };\r\n","import './Footer.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nconst Footer = () => {\r\n  const classNamePrefix = 'Footer';\r\n\r\n  return (\r\n    <footer className={classNamePrefix}>\r\n      <span>\r\n        Powered by\r\n        <a\r\n          className={`${classNamePrefix}Link`}\r\n          href=\"https://github.com/FakeMetalFan\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <FontAwesomeIcon icon={['fab', 'github']} />\r\n        </a>\r\n        &copy;<span>{new Date().getFullYear()}</span>\r\n      </span>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default memo(Footer);\r\n","import './Header.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nconst Header = () => {\r\n  const classNamePrefix = 'Header';\r\n\r\n  return (\r\n    <header className={classNamePrefix}>\r\n      <span className={`${classNamePrefix}Title`}>Minesweeper</span>\r\n\r\n      <a\r\n        className={`${classNamePrefix}Link`}\r\n        href=\"https://github.com/FakeMetalFan/minesweeper\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default memo(Header);\r\n","import { v4 as UUID } from 'uuid';\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport const addUUID = <T extends {}>(item: T) => ({ ...item, uuid: UUID() });\r\n","import { defaultMineFieldProps, mineFieldsProps } from 'const';\r\nimport { useMineField } from 'hooks/use-mine-field';\r\nimport { createContext } from 'react';\r\nimport { MineFieldsProps } from 'view-models';\r\n\r\ntype MinesweeperContextValue = Readonly<\r\n  ReturnType<typeof useMineField> & {\r\n    readonly mineFieldsProps: MineFieldsProps;\r\n  }\r\n>;\r\n\r\nexport const MinesweeperContext = createContext<MinesweeperContextValue>({\r\n  mineFieldsProps,\r\n  mineField: [],\r\n  mineFieldProps: defaultMineFieldProps,\r\n  mineFieldStatus: {\r\n    isSetup: false,\r\n    isBusted: false,\r\n    isSolved: false,\r\n    hiddenMinesCount: 0,\r\n  },\r\n  /* eslint-disable @typescript-eslint/no-empty-function */\r\n  setMineFieldProps: () => {},\r\n  setupMineField: () => {},\r\n  revealCell: () => {},\r\n  toggleFlag: () => {},\r\n  revealNeighbors: () => {},\r\n  reset: () => {},\r\n});\r\n\r\nexport const { Provider: MinesweeperProvider } = MinesweeperContext;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const useDidUpdate = (fn: () => void, ...deps: any[]) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      fn();\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n};\r\n","import { CellAppearance, CellValue } from 'const';\r\nimport { CellVM } from 'view-models';\r\n\r\nexport class CellChecker {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly cell: CellVM) {}\r\n\r\n  private checkCell(prop: keyof CellVM, criteria: CellValue | CellAppearance) {\r\n    return this.cell[prop] === criteria;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.checkCell('value', CellValue.Empty);\r\n  }\r\n\r\n  get isMined() {\r\n    return this.checkCell('value', CellValue.Mine);\r\n  }\r\n\r\n  get isIncorrect() {\r\n    return this.checkCell('value', CellValue.Incorrect);\r\n  }\r\n\r\n  get isBusted() {\r\n    return this.checkCell('value', CellValue.Busted);\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.checkCell('appearance', CellAppearance.Hidden);\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.checkCell('appearance', CellAppearance.Flagged);\r\n  }\r\n\r\n  get isUnsolved() {\r\n    return this.isMined && !this.isFlagged;\r\n  }\r\n\r\n  get isSolvedWrong() {\r\n    return !this.isMined && this.isFlagged;\r\n  }\r\n}\r\n","import { reject } from 'lodash-es';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { MineFieldVM } from 'view-models';\r\n\r\nexport class MineFieldChecker {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly mineField: MineFieldVM) {}\r\n\r\n  isBusted() {\r\n    return this.mineField.some((cell) => new CellChecker(cell).isBusted);\r\n  }\r\n\r\n  isSolved() {\r\n    return !reject(\r\n      this.mineField,\r\n      (cell) => new CellChecker(cell).isMined\r\n    ).some((cell) => new CellChecker(cell).isHidden);\r\n  }\r\n}\r\n","export class IndexUtils {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(private readonly mineFieldRowsCount: number) {}\r\n\r\n  to2D(index: number) {\r\n    const rowIndex = index % this.mineFieldRowsCount;\r\n\r\n    return {\r\n      rowIndex,\r\n      columnIndex: (index - rowIndex) / this.mineFieldRowsCount,\r\n    };\r\n  }\r\n\r\n  to1D(rowIndex: number, columnIndex: number) {\r\n    return columnIndex * this.mineFieldRowsCount + rowIndex;\r\n  }\r\n}\r\n","import { CellChecker } from 'utils/cell-checker';\r\nimport { IndexUtils } from 'utils/index-utils';\r\nimport { CellVM, MineFieldVM } from 'view-models';\r\n\r\nconst isValidArrayIndex = (index: number, length: number) =>\r\n  index > -1 && index < length;\r\n\r\nexport class NeighborsUtils {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor(\r\n    private readonly mineFieldRowsCount: number,\r\n    private readonly mineFieldColumnsCount: number,\r\n    private readonly indexUtils = new IndexUtils(mineFieldRowsCount)\r\n  ) {}\r\n\r\n  getIndexes({ index }: CellVM) {\r\n    const indexes: number[] = [];\r\n\r\n    const { rowIndex, columnIndex } = this.indexUtils.to2D(index);\r\n\r\n    for (let rowIndexOffset = -1; rowIndexOffset < 2; rowIndexOffset += 1) {\r\n      for (\r\n        let columnIndexOffset = -1;\r\n        columnIndexOffset < 2;\r\n        columnIndexOffset += 1\r\n      ) {\r\n        if (rowIndexOffset || columnIndexOffset) {\r\n          const targetedRowIndex = rowIndex + rowIndexOffset;\r\n          const targetedColumnIndex = columnIndex + columnIndexOffset;\r\n\r\n          if (\r\n            isValidArrayIndex(targetedRowIndex, this.mineFieldRowsCount) &&\r\n            isValidArrayIndex(targetedColumnIndex, this.mineFieldColumnsCount)\r\n          ) {\r\n            indexes.push(\r\n              this.indexUtils.to1D(targetedRowIndex, targetedColumnIndex)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return indexes;\r\n  }\r\n\r\n  canFloodFill(mineField: MineFieldVM, cell: CellVM) {\r\n    return !this.getIndexes(cell).some(\r\n      (index) => new CellChecker(mineField[index]).isUnsolved\r\n    );\r\n  }\r\n\r\n  canReveal(mineField: MineFieldVM, cell: CellVM) {\r\n    return (\r\n      this.countMined(mineField, cell) ===\r\n      this.countBy(\r\n        mineField,\r\n        cell,\r\n        (neighbor) => new CellChecker(neighbor).isFlagged\r\n      )\r\n    );\r\n  }\r\n\r\n  countMined(mineField: MineFieldVM, cell: CellVM) {\r\n    return this.countBy(\r\n      mineField,\r\n      cell,\r\n      (neighbor) => new CellChecker(neighbor).isMined\r\n    );\r\n  }\r\n\r\n  private countBy(\r\n    mineField: MineFieldVM,\r\n    cell: CellVM,\r\n    criteriaFn: (item: CellVM) => boolean\r\n  ) {\r\n    return this.getIndexes(cell).reduce(\r\n      (acc, neighborIndex) =>\r\n        criteriaFn(mineField[neighborIndex]) ? acc + 1 : acc,\r\n      0\r\n    );\r\n  }\r\n}\r\n","import React, { memo } from 'react';\r\n\r\nconst formatCount = (count: number) => {\r\n  if (count < 1) {\r\n    return '000';\r\n  }\r\n\r\n  if (count < 10) {\r\n    return `00${count}`;\r\n  }\r\n\r\n  if (count < 100) {\r\n    return `0${count}`;\r\n  }\r\n\r\n  return count.toString();\r\n};\r\n\r\nconst Counter = ({ count }: Readonly<{ readonly count: number }>) => (\r\n  <div className=\"Counter\">{formatCount(count)}</div>\r\n);\r\n\r\nexport default memo(Counter);\r\n","import './FaceIcon.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\ntype FaceIconProps = Readonly<{\r\n  readonly icon?: JSX.Element;\r\n  readonly onClick: () => void;\r\n}>;\r\n\r\nconst FaceIcon = ({\r\n  icon = <FontAwesomeIcon icon={['far', 'meh']} />,\r\n  onClick,\r\n}: FaceIconProps) => (\r\n  <button type=\"button\" className=\"FaceIcon\" onClick={onClick}>\r\n    {icon}\r\n  </button>\r\n);\r\n\r\nexport default memo(FaceIcon);\r\n","import './Indicators.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Counter from 'components/Counter';\r\nimport FaceIcon from 'components/FaceIcon';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\nimport { useInterval } from 'hooks/use-interval';\r\nimport React, { useCallback, useContext, useState } from 'react';\r\n\r\nconst INTERVAL_DELAY = 1e3;\r\n\r\nconst Indicators = () => {\r\n  const {\r\n    mineFieldStatus: { isSetup, isSolved, isBusted, hiddenMinesCount },\r\n    mineFieldProps,\r\n    reset,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n\r\n  let faceIcon: JSX.Element | undefined;\r\n\r\n  if (isSolved) {\r\n    faceIcon = <FontAwesomeIcon icon={['far', 'smile']} />;\r\n  } else if (isBusted) {\r\n    faceIcon = <FontAwesomeIcon icon={['far', 'frown']} />;\r\n  }\r\n\r\n  const handleFaceIconClick = useCallback(() => {\r\n    setSecondsCount(0);\r\n    reset();\r\n  }, [reset]);\r\n\r\n  useInterval(\r\n    () => {\r\n      setSecondsCount(secondsCount + 1);\r\n    },\r\n    isSetup && !(isSolved || isBusted) ? INTERVAL_DELAY : void 0\r\n  );\r\n\r\n  useDidUpdate(() => {\r\n    setSecondsCount(0);\r\n  }, mineFieldProps);\r\n\r\n  return (\r\n    <div className=\"Indicators\">\r\n      <Counter count={hiddenMinesCount} />\r\n      <FaceIcon icon={faceIcon} onClick={handleFaceIconClick} />\r\n      <Counter count={secondsCount} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Indicators;\r\n","import { useEffect, useRef } from 'react';\r\n\r\ntype Fn = () => void;\r\n\r\nexport const useInterval = (fn: Fn, delay?: number) => {\r\n  const fnRef = useRef<Fn>();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  });\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current?.();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","export const joinClassNames = (...classNames: (string | undefined)[]) =>\r\n  classNames.filter(Boolean).join(' ').trim();\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\nconst BombIcon = ({ className }: Readonly<{ readonly className?: string }>) => (\r\n  <button type=\"button\" className={className}>\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </button>\r\n);\r\n\r\nexport default BombIcon; // CellFactory is already optimized, no need for React.memo here;\r\n","import './CellFactory.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { joinClassNames } from 'utils/join-class-names';\r\nimport { CellEvent, CellVM } from 'view-models';\r\n\r\nimport BombIcon from '../BombIcon';\r\n\r\ntype CellFactoryProps = Readonly<{\r\n  readonly cell: CellVM;\r\n  readonly withBorderRight?: boolean;\r\n  readonly withBorderBottom?: boolean;\r\n  readonly onClick: (cell: CellVM) => void;\r\n  readonly onMouseDown: (event: CellEvent, cell: CellVM) => void;\r\n  readonly onContextMenu: (cell: CellVM) => void;\r\n}>;\r\n\r\nconst CellFactory = (props: CellFactoryProps) => {\r\n  const {\r\n    cell,\r\n    withBorderRight,\r\n    withBorderBottom,\r\n    onClick,\r\n    onMouseDown,\r\n    onContextMenu,\r\n  } = props;\r\n\r\n  const { value } = cell;\r\n\r\n  const {\r\n    isHidden,\r\n    isEmpty,\r\n    isFlagged,\r\n    isMined,\r\n    isIncorrect,\r\n    isBusted,\r\n  } = new CellChecker(cell);\r\n\r\n  const classNamePrefix = 'Cell';\r\n\r\n  const classNameSuffix = joinClassNames(\r\n    withBorderRight ? 'Cell__border-right' : '',\r\n    withBorderBottom ? 'Cell__border-bottom' : ''\r\n  );\r\n\r\n  const handleClick = () => {\r\n    onClick(cell);\r\n  };\r\n\r\n  const handleContextMenu = () => {\r\n    onContextMenu(cell);\r\n  };\r\n\r\n  const handleMouseDown = (event: CellEvent) => {\r\n    onMouseDown(event, cell);\r\n  };\r\n\r\n  if (isHidden) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Cell\"\r\n        className={joinClassNames(classNamePrefix, classNameSuffix)}\r\n        onClick={handleClick}\r\n        onContextMenu={handleContextMenu}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isFlagged) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className={joinClassNames(classNamePrefix, classNameSuffix)}\r\n        onContextMenu={handleContextMenu}\r\n      >\r\n        <FontAwesomeIcon icon={['far', 'flag']} />\r\n      </button>\r\n    );\r\n  }\r\n\r\n  if (isEmpty) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Cell\"\r\n        className={joinClassNames(\r\n          classNamePrefix,\r\n          `${classNamePrefix}__empty`,\r\n          classNameSuffix\r\n        )}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isMined) {\r\n    return (\r\n      <BombIcon className={joinClassNames(classNamePrefix, classNameSuffix)} />\r\n    );\r\n  }\r\n\r\n  if (isIncorrect) {\r\n    return (\r\n      <BombIcon\r\n        className={joinClassNames(\r\n          classNamePrefix,\r\n          `${classNamePrefix}__incorrect`,\r\n          classNameSuffix\r\n        )}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isBusted) {\r\n    return (\r\n      <BombIcon\r\n        className={joinClassNames(\r\n          classNamePrefix,\r\n          `${classNamePrefix}__busted`,\r\n          classNameSuffix\r\n        )}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={joinClassNames(\r\n        classNamePrefix,\r\n        `${classNamePrefix}__${value}`,\r\n        classNameSuffix\r\n      )}\r\n      onMouseDown={handleMouseDown}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(CellFactory);\r\n","import './MineField.scss';\r\n\r\nimport CellFactory from 'components/CellFactory';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport React, { SyntheticEvent, useCallback, useContext } from 'react';\r\nimport { IndexUtils } from 'utils/index-utils';\r\nimport { joinClassNames } from 'utils/join-class-names';\r\nimport { CellEvent, CellVM } from 'view-models';\r\n\r\nconst CELL_SIZE = 32;\r\n\r\nconst MineField = () => {\r\n  const {\r\n    mineFieldProps: { rowsCount, columnsCount },\r\n    mineField,\r\n    mineFieldStatus: { isSetup, isBusted, isSolved },\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const indexUtils = new IndexUtils(rowsCount);\r\n\r\n  const classNamePrefix = 'MineField';\r\n  const rowClassNamePrefix = `${classNamePrefix}Row`;\r\n\r\n  const handleContextMenu = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleCellClick = useCallback(\r\n    (cell: CellVM) => {\r\n      (isSetup ? revealCell : setupMineField)(cell);\r\n    },\r\n    [isSetup, revealCell, setupMineField]\r\n  );\r\n\r\n  const handleCellMouseDown = useCallback(\r\n    ({ target, nativeEvent }: CellEvent, cell: CellVM) => {\r\n      const handleMouseUp = (event: Event) => {\r\n        if ((nativeEvent as MouseEvent).which !== (event as MouseEvent).which) {\r\n          revealNeighbors(cell);\r\n        }\r\n\r\n        target.removeEventListener('mouseup', handleMouseUp);\r\n      };\r\n\r\n      target.addEventListener('mouseup', handleMouseUp);\r\n    },\r\n    [revealNeighbors]\r\n  );\r\n\r\n  const handleCellContextMenu = useCallback(\r\n    (cell: CellVM) => {\r\n      toggleFlag(cell);\r\n    },\r\n    [toggleFlag]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={classNamePrefix}\r\n      style={{ width: rowsCount * CELL_SIZE }}\r\n      onContextMenu={handleContextMenu}\r\n    >\r\n      <div\r\n        className={joinClassNames(\r\n          rowClassNamePrefix,\r\n          `${isBusted || isSolved ? `${rowClassNamePrefix}__disabled` : ''}`\r\n        )}\r\n      >\r\n        {mineField.map((cell, cellIndex) => {\r\n          const { rowIndex, columnIndex } = indexUtils.to2D(cellIndex);\r\n\r\n          return (\r\n            <CellFactory\r\n              cell={cell}\r\n              withBorderRight={rowIndex === rowsCount - 1}\r\n              withBorderBottom={columnIndex === columnsCount - 1}\r\n              onClick={handleCellClick}\r\n              onMouseDown={handleCellMouseDown}\r\n              onContextMenu={handleCellContextMenu}\r\n              key={cell.uuid}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MineField;\r\n","import React, { memo } from 'react';\r\n\r\ntype RadioButtonProps<T> = Readonly<{\r\n  readonly item: T;\r\n  readonly name: string;\r\n  readonly checked?: boolean;\r\n  readonly className?: string;\r\n  readonly onChange: (item: T) => void;\r\n}>;\r\n\r\nconst RadioButton = <T extends Readonly<{ readonly name: string }>>({\r\n  item,\r\n  name,\r\n  checked,\r\n  className,\r\n  onChange,\r\n}: RadioButtonProps<T>) => {\r\n  const handleChange = () => {\r\n    onChange(item);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"radio\"\r\n        name={name}\r\n        className={className}\r\n        defaultChecked={checked}\r\n        onChange={handleChange}\r\n      />\r\n      {item.name}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(RadioButton) as typeof RadioButton;\r\n","import './MineFieldProps.scss';\r\n\r\nimport RadioButton from 'components/RadioButton';\r\nimport { MinesweeperContext } from 'contexts/minesweeper';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport { MineFieldPropsVM } from 'view-models';\r\n\r\nconst MineFieldProps = () => {\r\n  const { mineFieldsProps, mineFieldProps, setMineFieldProps } = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const classNamePrefix = 'MineFieldProps';\r\n  const radioButtonClassNamePrefix = `${classNamePrefix}RadioButton`;\r\n\r\n  const handleMineFieldPropsChange = useCallback(\r\n    (props: MineFieldPropsVM) => {\r\n      setMineFieldProps(props);\r\n    },\r\n    [setMineFieldProps]\r\n  );\r\n\r\n  return (\r\n    <form className={classNamePrefix}>\r\n      {Array.from(mineFieldsProps.values()).map((item) => {\r\n        const { name, uuid } = item;\r\n\r\n        return (\r\n          <div className={radioButtonClassNamePrefix} key={uuid}>\r\n            <RadioButton\r\n              item={item}\r\n              name=\"MineFieldProps\"\r\n              className={`${radioButtonClassNamePrefix}Radio`}\r\n              checked={name === mineFieldProps.name}\r\n              onChange={handleMineFieldPropsChange}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MineFieldProps;\r\n","import './Minesweeper.scss';\r\n\r\nimport Footer from 'components/Footer';\r\nimport Header from 'components/Header';\r\nimport { defaultMineFieldProps, mineFieldsProps } from 'const';\r\nimport { MinesweeperProvider } from 'contexts/minesweeper';\r\nimport { useMineField } from 'hooks/use-mine-field';\r\nimport React from 'react';\r\n\r\nimport Indicators from '../Indicators';\r\nimport MineField from '../MineField';\r\nimport MineFieldProps from '../MineFieldProps';\r\n\r\nconst Minesweeper = () => {\r\n  const mineField = useMineField(defaultMineFieldProps);\r\n\r\n  return (\r\n    <MinesweeperProvider value={{ ...mineField, mineFieldsProps }}>\r\n      <Header />\r\n\r\n      <main className=\"Minesweeper\">\r\n        <Indicators />\r\n        <MineField />\r\n        <MineFieldProps />\r\n      </main>\r\n\r\n      <Footer />\r\n    </MinesweeperProvider>\r\n  );\r\n};\r\n\r\nexport default Minesweeper;\r\n","import { CellAppearance, CellValue } from 'const';\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\nimport produce, { Draft } from 'immer';\r\nimport { difference, range } from 'lodash-es';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport { addUUID } from 'utils/add-uuid';\r\nimport { CellChecker } from 'utils/cell-checker';\r\nimport { MineFieldChecker } from 'utils/mine-field-checker';\r\nimport { NeighborsUtils } from 'utils/neighbors-utils';\r\nimport { CellVM, MineFieldPropsVM, MineFieldVM } from 'view-models';\r\n\r\ntype DraftFn = (mineField: Draft<MineFieldVM>) => void;\r\n\r\nexport const useMineField = (initialMineFieldProps: MineFieldPropsVM) => {\r\n  const [mineFieldProps, setMineFieldProps] = useState(initialMineFieldProps);\r\n\r\n  const { rowsCount, columnsCount, minesCount } = mineFieldProps;\r\n\r\n  const length = rowsCount * columnsCount;\r\n\r\n  const emptyMineField = useMemo(\r\n    () =>\r\n      Array.from({ length }, (item, index) =>\r\n        addUUID({\r\n          index,\r\n          value: CellValue.Empty,\r\n          appearance: CellAppearance.Hidden,\r\n        })\r\n      ),\r\n    [length]\r\n  );\r\n\r\n  const initialMineFieldStatus = useMemo(\r\n    () => ({\r\n      isSetup: false,\r\n      isBusted: false,\r\n      isSolved: false,\r\n      hiddenMinesCount: minesCount,\r\n    }),\r\n    [minesCount]\r\n  );\r\n\r\n  const neighborsUtils = useMemo(\r\n    () => new NeighborsUtils(rowsCount, columnsCount),\r\n    [rowsCount, columnsCount]\r\n  );\r\n\r\n  const [mineField, setMineField] = useState(emptyMineField);\r\n\r\n  const [mineFieldStatus, setMineFieldStatus] = useState(\r\n    initialMineFieldStatus\r\n  );\r\n\r\n  const getFloodFilledMineField = useCallback(\r\n    (prevMineField: CellVM[], cell: CellVM, draftFn?: DraftFn) =>\r\n      produce(prevMineField, (draft) => {\r\n        draftFn?.(draft);\r\n\r\n        /* eslint-disable no-param-reassign */\r\n        draft[cell.index].appearance = CellAppearance.Visible;\r\n\r\n        (function floodFill(target: CellVM) {\r\n          if (neighborsUtils.canFloodFill(draft, target)) {\r\n            neighborsUtils.getIndexes(target).forEach((index) => {\r\n              const neighbor = draft[index];\r\n\r\n              const { isMined, isHidden, isFlagged } = new CellChecker(\r\n                neighbor\r\n              );\r\n\r\n              if (!isMined && isHidden && !isFlagged) {\r\n                neighbor.appearance = CellAppearance.Visible;\r\n\r\n                floodFill(neighbor);\r\n              }\r\n            });\r\n          }\r\n        })(cell);\r\n      }),\r\n    [neighborsUtils]\r\n  );\r\n\r\n  const getBustedMineField = useCallback(\r\n    (prevMineField: CellVM[], draftFn: DraftFn) =>\r\n      produce(prevMineField, (draft) => {\r\n        draftFn(draft);\r\n\r\n        draft.forEach((cell, index) => {\r\n          const { isUnsolved, isSolvedWrong } = new CellChecker(cell);\r\n\r\n          if (isUnsolved) {\r\n            cell.appearance = CellAppearance.Visible;\r\n          } else if (isSolvedWrong) {\r\n            draft[index] = {\r\n              ...cell,\r\n              value: CellValue.Incorrect,\r\n              appearance: CellAppearance.Visible,\r\n            };\r\n          }\r\n        });\r\n      }),\r\n    []\r\n  );\r\n\r\n  const setupMineField = useCallback(\r\n    (cell: CellVM) => {\r\n      setMineField((prevMineField) =>\r\n        getFloodFilledMineField(prevMineField, cell, (draft) => {\r\n          const indexes = difference(range(length), [\r\n            cell.index,\r\n            ...neighborsUtils.getIndexes(cell),\r\n          ]);\r\n\r\n          const minesIndexes = new Set<number>();\r\n\r\n          while (minesIndexes.size < minesCount) {\r\n            minesIndexes.add(\r\n              indexes[Math.floor(Math.random() * indexes.length)]\r\n            );\r\n          }\r\n\r\n          minesIndexes.forEach((index) => {\r\n            draft[index].value = CellValue.Mine;\r\n          });\r\n\r\n          draft.forEach((item) => {\r\n            if (!new CellChecker(item).isMined) {\r\n              item.value = neighborsUtils.countMined(draft, item);\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSetup: true,\r\n      }));\r\n    },\r\n    [getFloodFilledMineField, length, minesCount, neighborsUtils]\r\n  );\r\n\r\n  const revealCell = useCallback(\r\n    (cell: CellVM) => {\r\n      setMineField((prevMineField) =>\r\n        new CellChecker(cell).isMined\r\n          ? getBustedMineField(prevMineField, (draft) => {\r\n              draft[cell.index] = {\r\n                ...cell,\r\n                value: CellValue.Busted,\r\n                appearance: CellAppearance.Visible,\r\n              };\r\n            })\r\n          : getFloodFilledMineField(prevMineField, cell)\r\n      );\r\n    },\r\n    [getBustedMineField, getFloodFilledMineField]\r\n  );\r\n\r\n  const toggleFlag = useCallback((cell: CellVM) => {\r\n    const { isFlagged } = new CellChecker(cell);\r\n\r\n    setMineField((prevMineField) =>\r\n      produce(prevMineField, (draft) => {\r\n        draft[cell.index].appearance = isFlagged\r\n          ? CellAppearance.Hidden\r\n          : CellAppearance.Flagged;\r\n      })\r\n    );\r\n\r\n    setMineFieldStatus((prevMineFieldStatus) =>\r\n      produce(prevMineFieldStatus, (draft) => {\r\n        draft.hiddenMinesCount += isFlagged ? 1 : -1;\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const revealNeighbors = useCallback(\r\n    (cell: CellVM) => {\r\n      setMineField((prevMineField) => {\r\n        if (neighborsUtils.canFloodFill(prevMineField, cell)) {\r\n          return getFloodFilledMineField(prevMineField, cell);\r\n        }\r\n\r\n        if (neighborsUtils.canReveal(prevMineField, cell)) {\r\n          return getBustedMineField(prevMineField, (draft) => {\r\n            neighborsUtils.getIndexes(cell).forEach((index) => {\r\n              const neighbor = draft[index];\r\n\r\n              const { isUnsolved, isSolvedWrong } = new CellChecker(neighbor);\r\n\r\n              if (isUnsolved) {\r\n                neighbor.value = CellValue.Busted;\r\n              } else if (isSolvedWrong) {\r\n                neighbor.value = CellValue.Incorrect;\r\n              }\r\n\r\n              neighbor.appearance = CellAppearance.Visible;\r\n            });\r\n          });\r\n        }\r\n\r\n        return prevMineField;\r\n      });\r\n    },\r\n    [getBustedMineField, getFloodFilledMineField, neighborsUtils]\r\n  );\r\n\r\n  const reset = useCallback(() => {\r\n    setMineField(emptyMineField);\r\n    setMineFieldStatus(initialMineFieldStatus);\r\n  }, [emptyMineField, initialMineFieldStatus]);\r\n\r\n  useDidUpdate(() => {\r\n    reset();\r\n  }, emptyMineField);\r\n\r\n  useDidUpdate(() => {\r\n    const mineFieldUtils = new MineFieldChecker(mineField);\r\n\r\n    if (mineFieldUtils.isBusted()) {\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isBusted: true,\r\n      }));\r\n    } else if (mineFieldUtils.isSolved()) {\r\n      setMineField((prevMineField) =>\r\n        produce(prevMineField, (draft) => {\r\n          draft.forEach((cell) => {\r\n            if (new CellChecker(cell).isMined) {\r\n              cell.appearance = CellAppearance.Flagged;\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSolved: true,\r\n        hiddenMinesCount: 0,\r\n      }));\r\n    }\r\n  }, mineField);\r\n\r\n  return {\r\n    mineField,\r\n    mineFieldProps,\r\n    mineFieldStatus,\r\n    setMineFieldProps,\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n    reset,\r\n  };\r\n};\r\n","import Minesweeper from 'containers/Minesweeper';\r\nimport React from 'react';\r\n\r\nconst App = () => <Minesweeper />;\r\n\r\nexport default App;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport {\r\n  faFlag,\r\n  faFrown,\r\n  faMeh,\r\n  faSmile,\r\n} from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import 'index.scss';\r\n\r\nimport App from 'App';\r\nimport React, { StrictMode } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}