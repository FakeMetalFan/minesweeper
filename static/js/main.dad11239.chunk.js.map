{"version":3,"sources":["core/Footer/Footer.js","core/Header/Header.js","const/cell-value.js","const/cell-state.js","view-models/internals/cell.js","view-models/internals/cell-address-utils.js","view-models/internals/cell-neighbors-utils.js","view-models/field-producer.js","components/CellFactory/CellFactory.js","components/Field/Field.js","hooks/use-did-update.js","utils/count-formatter.js","components/Indicators/Indicators.js","core/Minesweeper/Minesweeper.js","App.js","setupIcons.js","index.js"],"names":["Footer","className","href","target","rel","icon","Date","getFullYear","Header","cellValue","cellState","Hidden","Visible","Flagged","Cell","value","state","immerable","this","isMined","isHidden","isFlagged","CellAddressUtils","fieldWidth","_fieldWidth","address","rowAddress","cellAddress","CellNeighborsUtils","fieldHeight","_fieldHeight","_cellAddressUtils","getNeighborsAddresses","some","addr","isUnrevealedMine","to2DAddresses","addresses","rowAddressOffset","cellAddressOffset","rowAddressWithOffset","cellAddressWithOffset","_doesAddressExist","push","to1DAddress","_countNeighborsBy","countMinedNeighbors","propName","reduce","acc","criteria","FieldProducer","width","height","minesCount","_height","_cellNeighborsUtils","Array","from","length","_length","_getFloodFilledState","produce","draft","difference","range","randomAddressesSet","Set","size","add","Math","random","forEach","cell","_getBustedState","isFloodFillAble","canRevealNeighbors","isMisplacedFlag","cloneDeep","floodFill","neighborAddress","CellFactory","cellRevealHandler","flagPlantingHandler","neighborsRevealHandler","isEmpty","isIncorrectGuess","isBustedMine","onClick","onContextMenu","onMouseDown","Field","columnsCount","disabled","style","gridTemplateColumns","event","preventDefault","map","key","which","nativeEvent","addEventListener","mouseupHandler","removeEventListener","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","formatCount","count","Indicators","smileyFaceClickHandler","shouldStartCountingSeconds","isBust","isVictory","useState","secondsCount","setSecondsCount","intervalId","setInterval","seconds","clearInterval","Minesweeper","fieldProducer","field","setField","setMinesCount","isInit","setIsInit","setIsBust","setIsVictory","getEmptyState","reject","getMinesMarkedState","getCellRevealedState","getInitialState","getFlagPlantedState","getNeighborsRevealedState","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.dad11239.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => (\r\n  <footer>\r\n    <span>\r\n      Powered by\r\n      <a className='icon' href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n      &copy;<span>{new Date().getFullYear()}</span>\r\n    </span>\r\n  </footer>\r\n);\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => (\r\n  <header>\r\n    <span className='title'>Minesweeper</span>\r\n\r\n    <a className='icon' href='https://github.com/FakeMetalFan/minesweeper' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n  </header>\r\n);\r\n","export const cellValue = {\r\n  BustedMine: -3,\r\n  IncorrectGuess: -2,\r\n  Mine: -1,\r\n  Empty: 0,\r\n  One: 1,\r\n  Two: 2,\r\n  Three: 3,\r\n  Four: 4,\r\n  Five: 5,\r\n  Six: 6,\r\n  Seven: 7,\r\n  Eight: 8,\r\n};\r\n","export const cellState = {\r\n  Hidden: 0,\r\n  Visible: 1,\r\n  Flagged: 2,\r\n};\r\n","import { immerable } from 'immer';\r\n\r\nimport { cellValue, cellState } from 'const';\r\n\r\nexport class Cell {\r\n  [immerable] = true;\r\n\r\n  constructor(\r\n    value = cellValue.Empty,\r\n    state = cellState.Hidden\r\n  ) {\r\n    this.value = value;\r\n    this.state = state;\r\n  }\r\n\r\n  get isMined() {\r\n    return this.value === cellValue.Mine;\r\n  }\r\n\r\n  get isBustedMine() {\r\n    return this.value === cellValue.BustedMine;\r\n  }\r\n\r\n  get isIncorrectGuess() {\r\n    return this.value === cellValue.IncorrectGuess;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.value === cellValue.Empty;\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.state === cellState.Hidden;\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.state === cellState.Flagged;\r\n  }\r\n\r\n  get isFloodFillAble() {\r\n    return !this.isMined && this.isHidden && !this.isFlagged;\r\n  }\r\n\r\n  get isMisplacedFlag() {\r\n    return !this.isMined && this.isFlagged;\r\n  }\r\n\r\n  get isUnrevealedMine() {\r\n    return this.isMined && !this.isFlagged;\r\n  }\r\n}\r\n","export class CellAddressUtils {\r\n  constructor(\r\n    fieldWidth\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n  }\r\n\r\n  to2DAddresses(address) {\r\n    const rowAddress = address % this._fieldWidth;\r\n\r\n    return [rowAddress, (address - rowAddress) / this._fieldWidth];\r\n  }\r\n\r\n  to1DAddress(rowAddress, cellAddress) {\r\n    return cellAddress * this._fieldWidth + rowAddress;\r\n  }\r\n}\r\n","import { CellAddressUtils } from './cell-address-utils';\r\n\r\nexport class CellNeighborsUtils {\r\n  constructor(\r\n    fieldWidth,\r\n    fieldHeight\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n    this._fieldHeight = fieldHeight;\r\n    this._cellAddressUtils = new CellAddressUtils(fieldWidth);\r\n  }\r\n\r\n  isFloodFillAble(state, address) {\r\n    return !this.getNeighborsAddresses(address).some(addr => state[addr].isUnrevealedMine);\r\n  }\r\n\r\n  getNeighborsAddresses(address) {\r\n    const [rowAddress, cellAddress] = this._cellAddressUtils.to2DAddresses(address);\r\n    const addresses = [];\r\n\r\n    for (let rowAddressOffset = -1; rowAddressOffset < 2; rowAddressOffset++)\r\n      for (let cellAddressOffset = -1; cellAddressOffset < 2; cellAddressOffset++)\r\n        if (rowAddressOffset || cellAddressOffset) {\r\n          const rowAddressWithOffset = rowAddress + rowAddressOffset;\r\n          const cellAddressWithOffset = cellAddress + cellAddressOffset;\r\n\r\n          this._doesAddressExist(rowAddressWithOffset, this._fieldWidth)\r\n            && this._doesAddressExist(cellAddressWithOffset, this._fieldHeight)\r\n              && addresses.push(this._cellAddressUtils.to1DAddress(rowAddressWithOffset, cellAddressWithOffset));\r\n        }\r\n\r\n    return addresses;\r\n  }\r\n\r\n  countMinedNeighbors(state, address) {\r\n    return this._countNeighborsBy(state, address, 'isMined');\r\n  }\r\n\r\n  canRevealNeighbors(state, address) {\r\n    return this.countMinedNeighbors(state, address) === this._countNeighborsBy(state, address, 'isFlagged');\r\n  }\r\n\r\n  _countNeighborsBy(state, address, propName) {\r\n    return this.getNeighborsAddresses(address).reduce((acc, addr) => state[addr][propName] ? acc + 1: acc, 0);\r\n  }\r\n\r\n  _doesAddressExist(address, criteria) {\r\n    return -1 < address && address < criteria;\r\n  }\r\n}\r\n","import produce from 'immer';\r\n\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport range from 'lodash/range';\r\nimport difference from 'lodash/difference';\r\n\r\nimport { cellValue, cellState } from 'const';\r\n\r\nimport { Cell, CellNeighborsUtils } from './internals';\r\n\r\nexport class FieldProducer {\r\n  constructor(\r\n    width,\r\n    height,\r\n    minesCount\r\n  ) {\r\n    this.width = width;\r\n    this.minesCount = minesCount;\r\n\r\n    this._height = height;\r\n    this._cellNeighborsUtils = new CellNeighborsUtils(width, height);\r\n  }\r\n\r\n  getEmptyState() {\r\n    return Array.from({ length: this._length }, () => new Cell());\r\n  }\r\n\r\n  getInitialState(state, address) {\r\n    return this._getFloodFilledState(produce(state, draft => {\r\n      const addresses =\r\n        difference(range(this._length), [address, ...this._cellNeighborsUtils.getNeighborsAddresses(address)]);\r\n\r\n      const randomAddressesSet = new Set();\r\n\r\n      while (randomAddressesSet.size < this.minesCount)\r\n        randomAddressesSet.add(addresses[Math.random() * addresses.length | 0]);\r\n\r\n      randomAddressesSet.forEach(addr => {\r\n        draft[addr].value = cellValue.Mine;\r\n      });\r\n\r\n      draft.forEach((cell, addr) => {\r\n        !cell.isMined && (cell.value = this._cellNeighborsUtils.countMinedNeighbors(draft, addr));\r\n      });\r\n    }), address);\r\n  }\r\n\r\n  getCellRevealedState(state, { isMined }, addr) {\r\n    if (isMined) return this._getBustedState(produce(state, draft => {\r\n      draft[addr] = new Cell(cellValue.BustedMine, cellState.Visible);\r\n    }));\r\n\r\n    return this._getFloodFilledState(state, addr);\r\n  }\r\n\r\n  getFlagPlantedState(state, { isFlagged }, address) {\r\n    return produce(state, draft => {\r\n      draft[address].state = cellState[isFlagged ? 'Hidden' : 'Flagged'];\r\n    });\r\n  }\r\n\r\n  getNeighborsRevealedState(state, addr) {\r\n    if (this._cellNeighborsUtils.isFloodFillAble(state, addr)) return this._getFloodFilledState(state, addr);\r\n\r\n    if (this._cellNeighborsUtils.canRevealNeighbors(state, addr)) return this._getBustedState(produce(state, draft => {\r\n      this._cellNeighborsUtils.getNeighborsAddresses(addr).forEach(address => {\r\n        const cell = draft[address];\r\n        const { isUnrevealedMine, isMisplacedFlag } = cell;\r\n\r\n        isUnrevealedMine && (cell.value = cellValue.BustedMine);\r\n        isMisplacedFlag && (cell.value = cellValue.IncorrectGuess);\r\n\r\n        cell.state = cellState.Visible;\r\n      });\r\n    }));\r\n\r\n    return cloneDeep(state);\r\n  }\r\n\r\n  getMinesMarkedState(state) {\r\n    return produce(state, draft => {\r\n      draft.forEach(cell => {\r\n        cell.isMined && (cell.state = cellState.Flagged);\r\n      });\r\n    });\r\n  }\r\n\r\n  _getFloodFilledState(state, address) {\r\n    return produce(state, draft => {\r\n      draft[address].state = cellState.Visible;\r\n\r\n      const floodFill = neighborAddress => {\r\n        this._cellNeighborsUtils.isFloodFillAble(draft, neighborAddress)\r\n          && this._cellNeighborsUtils.getNeighborsAddresses(neighborAddress).forEach(addr => {\r\n            const cell = draft[addr];\r\n\r\n            if (cell.isFloodFillAble) {\r\n              cell.state = cellState.Visible;\r\n\r\n              floodFill(addr);\r\n            }\r\n          });\r\n      };\r\n\r\n      floodFill(address);\r\n    });\r\n  }\r\n\r\n  _getBustedState(state) {\r\n    return produce(state, draft => {\r\n      draft.forEach((cell, addr) => {\r\n        const { isUnrevealedMine, isMisplacedFlag } = cell;\r\n\r\n        isUnrevealedMine && (cell.state = cellState.Visible);\r\n        isMisplacedFlag && (draft[addr] = new Cell(cellValue.IncorrectGuess, cellState.Visible));\r\n      });\r\n    });\r\n  }\r\n\r\n  get _length() {\r\n    return this.width * this._height;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './CellFactory.scss';\r\n\r\nexport const CellFactory = ({ state, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\r\n  const { isHidden, isFlagged, isEmpty, isMined, isIncorrectGuess, isBustedMine, value } = state;\r\n\r\n  if (isHidden) return (<button className='cell' onClick={cellRevealHandler} onContextMenu={flagPlantingHandler} />);\r\n\r\n  if (isFlagged) return (<button className='cell' onContextMenu={flagPlantingHandler}>\r\n    <FontAwesomeIcon icon={['far', 'flag']} />\r\n  </button>);\r\n\r\n  if (isEmpty) return (<button className='cell cell__visible' />);\r\n\r\n  if (isMined || isIncorrectGuess || isBustedMine) return (<button\r\n    className={`cell ${isIncorrectGuess ? 'cell__incorrect-guess' : isBustedMine ? 'cell__busted-mine' : ''}`}\r\n  >\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </button>);\r\n\r\n  return (<button className={`cell cell__visible cell__visible__${value}`} onMouseDown={neighborsRevealHandler}>\r\n    {value}\r\n  </button>);\r\n};\r\n","import React from 'react';\r\n\r\nimport { CellFactory } from '../';\r\nimport './Field.scss';\r\n\r\nexport const Field = ({\r\n  columnsCount,\r\n  disabled,\r\n  state,\r\n  cellRevealHandler,\r\n  flagPlantingHandler,\r\n  neighborsRevealHandler,\r\n}) => (\r\n  <div\r\n    className={`field${disabled ? ' disabled' : ''}`}\r\n    style={{gridTemplateColumns: `repeat(${columnsCount}, 1fr)`}}\r\n    onContextMenu={event => {event.preventDefault();}}\r\n  >\r\n    {state.map((cell, address) => <CellFactory\r\n      key={address}\r\n      state={cell}\r\n      cellRevealHandler={() => {cellRevealHandler(cell, address);}}\r\n      flagPlantingHandler={event => {\r\n        event.preventDefault();\r\n\r\n        flagPlantingHandler(cell, address);\r\n      }}\r\n      neighborsRevealHandler={({ target, nativeEvent }) => {\r\n        const { which } = nativeEvent;\r\n\r\n        const mouseupHandler = event => {\r\n          which !== event.which && neighborsRevealHandler(address);\r\n\r\n          target.removeEventListener('mouseup', mouseupHandler);\r\n        };\r\n\r\n        target.addEventListener('mouseup', mouseupHandler);\r\n      }}\r\n    />)}\r\n  </div>\r\n);\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fn();\r\n    else didMount.current = true;\r\n    // eslint-disable-next-line\r\n  }, deps);\r\n};\r\n","export const formatCount = count => {\r\n  if (count < 1) return '000';\r\n  if (count < 10) return `00${count}`;\r\n  if (count < 100) return `0${count}`;\r\n\r\n  return `${count}`;\r\n};\r\n","import React, { useRef, useState } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\n\r\nimport { formatCount } from 'utils/count-formatter';\r\n\r\nimport './Indicators.scss';\r\n\r\nexport const Indicators = ({ minesCount, smileyFaceClickHandler, shouldStartCountingSeconds, isBust, isVictory }) => {\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n  const intervalId = useRef();\r\n\r\n  useDidUpdate(() => {\r\n    shouldStartCountingSeconds && (intervalId.current = setInterval(() => {\r\n      setSecondsCount(seconds => seconds + 1);\r\n    }, 1e3));\r\n  }, shouldStartCountingSeconds);\r\n\r\n  useDidUpdate(() => {\r\n    (isBust || isVictory) && clearInterval(intervalId.current);\r\n  }, isBust, isVictory);\r\n\r\n  return (\r\n    <div className='indicators'>\r\n      <div className='mines-count'>{formatCount(minesCount)}</div>\r\n      <div className='smiley-face' onClick={() => {\r\n        clearInterval(intervalId.current);\r\n        setSecondsCount(0);\r\n        smileyFaceClickHandler();\r\n      }}>\r\n        <FontAwesomeIcon icon={['far', isVictory ? 'smile' : isBust ? 'frown' : 'meh']} />\r\n      </div>\r\n      <div className='timer'>{formatCount(secondsCount)}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport reject from 'lodash/reject';\r\nimport some from 'lodash/some';\r\n\r\nimport { FieldProducer } from 'view-models/field-producer';\r\n\r\nimport { Field, Indicators } from 'components';\r\n\r\nimport { useDidUpdate } from 'hooks/use-did-update';\r\n\r\nimport './Minesweeper.scss';\r\n\r\nexport const Minesweeper = () => {\r\n  const [fieldProducer] = useState(new FieldProducer(16, 16, 30));\r\n  const [field, setField] = useState([]);\r\n\r\n  const [minesCount, setMinesCount] = useState(fieldProducer.minesCount);\r\n\r\n  const [isInit, setIsInit] = useState(false);\r\n  const [isBust, setIsBust] = useState(false);\r\n  const [isVictory, setIsVictory] = useState(false);\r\n\r\n  const handleCellReveal = (cell, address) => {\r\n    if (isInit) setField(fieldProducer.getCellRevealedState(field, cell, address));\r\n    else {\r\n      setField(fieldProducer.getInitialState(field, address));\r\n      setIsInit(true);\r\n    }\r\n  };\r\n\r\n  const handleFlagPlanting = (cell, address) => {\r\n    setField(fieldProducer.getFlagPlantedState(field, cell, address));\r\n    setMinesCount(minesCount + (cell.isFlagged ? 1 : -1));\r\n  };\r\n\r\n  const handleNeighborsReveal = address => {\r\n    setField(fieldProducer.getNeighborsRevealedState(field, address));\r\n  };\r\n\r\n  const handleSmileyFaceClick = () => {\r\n    setField(fieldProducer.getEmptyState());\r\n    setMinesCount(fieldProducer.minesCount);\r\n    setIsInit(false);\r\n    setIsBust(false);\r\n    setIsVictory(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setField(fieldProducer.getEmptyState());\r\n  }, [fieldProducer]);\r\n\r\n  useDidUpdate(() => {\r\n    if (some(field, 'isBustedMine')) setIsBust(true);\r\n    else if (!some(reject(field, 'isMined'), 'isHidden')) {\r\n      setField(fieldProducer.getMinesMarkedState(field));\r\n      setMinesCount(0);\r\n      setIsVictory(true);\r\n    }\r\n  }, field);\r\n\r\n  return (\r\n    <div className='minesweeper'>\r\n      <Indicators\r\n        minesCount={minesCount}\r\n        isBust={isBust}\r\n        isVictory={isVictory}\r\n        shouldStartCountingSeconds={isInit}\r\n        smileyFaceClickHandler={handleSmileyFaceClick}\r\n      />\r\n\r\n      <Field\r\n        columnsCount={fieldProducer.width}\r\n        disabled={isBust || isVictory}\r\n        state={field}\r\n        cellRevealHandler={handleCellReveal}\r\n        flagPlantingHandler={handleFlagPlanting}\r\n        neighborsRevealHandler={handleNeighborsReveal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Header, Minesweeper, Footer } from 'core';\r\n\r\nexport const App = () => (\r\n  <>\r\n    <Header />\r\n    <Minesweeper />\r\n    <Footer />\r\n  </>\r\n);\r\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { faFlag, faMeh, faFrown, faSmile } from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import React, { StrictMode }  from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport { App } from 'App';\r\n\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nimport './index.scss';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}