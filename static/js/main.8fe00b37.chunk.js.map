{"version":3,"sources":["const/cell-value.js","const/cell-state.js","utils/check-cell.js","components/Cell/Cell.js","components/Field/Field.js","components/Footer/Footer.js","components/Header/Header.js","view-models/cell-address-utils.js","view-models/cell-neighbors-utils.js","components/Indicators/Indicators.js","hooks/use-interval.js","components/Minesweeper/Minesweeper.js","hooks/use-field.js","hooks/use-did-update.js","App.js","setupIcons.js","index.js"],"names":["cellValue","cellState","Hidden","Visible","Flagged","checkCell","cell","prop","criteria","isMinedCell","isHiddenCell","isFlaggedCell","isBustedCell","Cell","memo","state","cellRevealHandler","flagPlantingHandler","neighborsRevealHandler","value","hasGuessedIncorrectly","hasBustedMine","className","onClick","onContextMenu","icon","onMouseDown","Field","width","disabled","handleNeighborsReveal","address","target","which","nativeEvent","addEventListener","handleMouseup","event","removeEventListener","style","gridTemplateColumns","preventDefault","map","key","Footer","href","rel","Date","getFullYear","Header","CellAddressUtils","fieldWidth","this","_fieldWidth","rowAddress","colAddress","CellNeighborsUtils","fieldHeight","_fieldHeight","_cellAddressUtils","getAddresses","some","adr","to2DAddresses","addresses","rowAddressOffset","colAddressOffset","rowAddressAhead","colAddressAhead","_doesAddressExist","push","to1DAddress","_getCountBy","getMinedCount","reduce","ac","Indicators","minesCount","smileyFaceClickHandler","shouldStartCountingSeconds","isBust","isVictory","useState","secondsCount","setSecondsCount","formatCount","count","fn","delay","fnRef","useRef","useEffect","current","intervalId","setInterval","clearInterval","useInterval","actionType","reducer","type","payload","produce","draft","isInit","hiddenMinesCount","Minesweeper","fieldDimension","initialState","useReducer","dispatch","height","length","cellNeighborsUtils","useMemo","emptyField","Array","fill","field","setField","getFloodFilledField","draftFn","floodFill","cellAdr","canFloodFill","forEach","getBustedField","reset","init","difference","range","randomAddresses","Set","size","add","Math","random","revealCell","plantFlag","revealNeighbors","canRevealNeighbors","markMines","useField","didMount","deps","useDidUpdate","reject","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fe00b37.chunk.js","sourcesContent":["export const cellValue = {\r\n  BustedMine: -3,\r\n  IncorrectGuess: -2,\r\n  Mine: -1,\r\n  Empty: 0,\r\n  One: 1,\r\n  Two: 2,\r\n  Three: 3,\r\n  Four: 4,\r\n  Five: 5,\r\n  Six: 6,\r\n  Seven: 7,\r\n  Eight: 8,\r\n};\r\n","export const cellState = {\r\n  Hidden: 0,\r\n  Visible: 1,\r\n  Flagged: 2,\r\n};\r\n","import { cellState, cellValue } from 'const';\r\n\r\nconst checkCell = (cell, prop, criteria) => cell[prop] === criteria;\r\n\r\nexport const isMinedCell = cell => checkCell(cell, 'value', cellValue.Mine);\r\nexport const isHiddenCell = cell => checkCell(cell, 'state', cellState.Hidden);\r\nexport const isFlaggedCell = cell => checkCell(cell, 'state', cellState.Flagged);\r\nexport const isBustedCell = cell => checkCell(cell, 'value', cellValue.BustedMine);\r\n","import React, { memo } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { isBustedCell, isFlaggedCell, isHiddenCell, isMinedCell } from 'utils/check-cell';\r\n\r\nimport { cellValue } from 'const';\r\n\r\nimport './Cell.scss';\r\n\r\nexport const Cell = memo(({ state, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\r\n  const { value } = state;\r\n\r\n  const hasGuessedIncorrectly = value === cellValue.IncorrectGuess;\r\n  const hasBustedMine = isBustedCell(state);\r\n\r\n  if (isHiddenCell(state)) return <div\r\n    className='cell'\r\n    onClick={cellRevealHandler}\r\n    onContextMenu={flagPlantingHandler}\r\n  />;\r\n\r\n  if (isFlaggedCell(state)) return <div className='cell' onContextMenu={flagPlantingHandler}>\r\n    <FontAwesomeIcon icon={['far', 'flag']} />\r\n  </div>;\r\n\r\n  if (value === cellValue.Empty) return <div className='cell cell__visible' />;\r\n\r\n  if (isMinedCell(state) || hasGuessedIncorrectly || hasBustedMine) return <div\r\n    className={`cell ${hasGuessedIncorrectly ? 'cell__incorrect-guess' : hasBustedMine ? 'cell__busted-mine' : ''}`}\r\n  >\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </div>;\r\n\r\n  return <div className={`cell cell__visible cell__visible__${value}`} onMouseDown={neighborsRevealHandler}>\r\n    {value}\r\n  </div>;\r\n});\r\n","import React from 'react';\r\n\r\nimport { Cell } from '..';\r\n\r\nimport './Field.scss';\r\n\r\nexport const Field = ({ width, disabled, state, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\r\n  const handleNeighborsReveal = ({ target, nativeEvent: { which } }, address) => {\r\n    if (!disabled) {\r\n      const handleMouseup = event => {\r\n        which !== event.which && neighborsRevealHandler(address);\r\n\r\n        target.removeEventListener('mouseup', handleMouseup);\r\n      };\r\n\r\n      target.addEventListener('mouseup', handleMouseup);\r\n    }\r\n  };\r\n\r\n  return <div\r\n    className={`field${disabled ? ' disabled' : ''}`}\r\n    style={{gridTemplateColumns: `repeat(${width}, 1fr)`}}\r\n    onContextMenu={event => { event.preventDefault(); }}\r\n  >\r\n    {state.map((cell, address) => <Cell\r\n      key={address}\r\n      state={cell}\r\n      cellRevealHandler={() => { !disabled && cellRevealHandler(cell, address); }}\r\n      flagPlantingHandler={() => { !disabled && flagPlantingHandler(cell, address); }}\r\n      neighborsRevealHandler={event => { handleNeighborsReveal(event, address); }}\r\n    />)}\r\n  </div>;\r\n};\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Footer.scss';\r\n\r\nexport const Footer = () => <footer>\r\n  <span>\r\n    Powered by\r\n    <a href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\r\n      <FontAwesomeIcon icon={['fab', 'github']} />\r\n    </a>\r\n    &copy;<span>{new Date().getFullYear()}</span>\r\n  </span>\r\n</footer>;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './Header.scss';\r\n\r\nexport const Header = () => <header>\r\n  <span className='title'>Minesweeper</span>\r\n\r\n  <a href='https://github.com/FakeMetalFan/minesweeper' target='_blank' rel='noopener noreferrer'>\r\n    <FontAwesomeIcon icon={['fab', 'github']} />\r\n  </a>\r\n</header>;\r\n","export class CellAddressUtils {\r\n  _fieldWidth;\r\n\r\n  constructor(\r\n    fieldWidth\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n  }\r\n\r\n  to2DAddresses(address) {\r\n    const rowAddress = address % this._fieldWidth;\r\n\r\n    return [rowAddress, (address - rowAddress) / this._fieldWidth];\r\n  }\r\n\r\n  to1DAddress(rowAddress, colAddress) {\r\n    return colAddress * this._fieldWidth + rowAddress;\r\n  }\r\n}\r\n","import { isFlaggedCell, isMinedCell } from 'utils/check-cell';\r\n\r\nimport { CellAddressUtils } from './cell-address-utils';\r\n\r\nexport class CellNeighborsUtils {\r\n  _fieldWidth;\r\n  _fieldHeight;\r\n  _cellAddressUtils;\r\n\r\n  constructor(\r\n    fieldWidth,\r\n    fieldHeight\r\n  ) {\r\n    this._fieldWidth = fieldWidth;\r\n    this._fieldHeight = fieldHeight;\r\n    this._cellAddressUtils = new CellAddressUtils(fieldWidth);\r\n  }\r\n\r\n  canFloodFill(state, address) {\r\n    return !this.getAddresses(address).some(adr => {\r\n      const cell = state[adr];\r\n\r\n      return isMinedCell(cell) && !isFlaggedCell(cell);\r\n    });\r\n  }\r\n\r\n  getAddresses(address) {\r\n    const [rowAddress, colAddress] = this._cellAddressUtils.to2DAddresses(address);\r\n    const addresses = [];\r\n\r\n    for (let rowAddressOffset = -1; rowAddressOffset < 2; rowAddressOffset++)\r\n      for (let colAddressOffset = -1; colAddressOffset < 2; colAddressOffset++)\r\n        if (rowAddressOffset || colAddressOffset) {\r\n          const rowAddressAhead = rowAddress + rowAddressOffset;\r\n          const colAddressAhead = colAddress + colAddressOffset;\r\n\r\n          this._doesAddressExist(rowAddressAhead, this._fieldWidth)\r\n            && this._doesAddressExist(colAddressAhead, this._fieldHeight)\r\n              && addresses.push(this._cellAddressUtils.to1DAddress(rowAddressAhead, colAddressAhead));\r\n        }\r\n\r\n    return addresses;\r\n  }\r\n\r\n  getMinedCount(state, address) {\r\n    return this._getCountBy(state, address, isMinedCell);\r\n  }\r\n\r\n  canRevealNeighbors(state, address) {\r\n    return this.getMinedCount(state, address) === this._getCountBy(state, address, isFlaggedCell);\r\n  }\r\n\r\n  _getCountBy(state, address, criteria) {\r\n    return this.getAddresses(address).reduce((ac, adr) => criteria(state[adr]) ? ac + 1 : ac, 0);\r\n  }\r\n\r\n  _doesAddressExist(address, criteria) {\r\n    return -1 < address && address < criteria;\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { useInterval } from 'hooks';\r\n\r\nimport './Indicators.scss';\r\n\r\nexport const Indicators = ({ minesCount, smileyFaceClickHandler, shouldStartCountingSeconds, isBust, isVictory }) => {\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n\r\n  const formatCount = count => {\r\n    if (count < 1) return '000';\r\n    if (count < 10) return `00${count}`;\r\n    if (count < 100) return `0${count}`;\r\n\r\n    return `${count}`;\r\n  };\r\n\r\n  const handleSmileyFaceClick = () => {\r\n    setSecondsCount(0);\r\n    smileyFaceClickHandler();\r\n  };\r\n\r\n  useInterval(() => {\r\n    setSecondsCount(secondsCount + 1);\r\n  }, shouldStartCountingSeconds ? 1e3 : null);\r\n\r\n  return <div className='indicators'>\r\n    <div className='mines-count'>{formatCount(minesCount)}</div>\r\n    <div className='smiley-face' onClick={handleSmileyFaceClick}>\r\n      <FontAwesomeIcon icon={['far', isVictory ? 'smile' : isBust ? 'frown' : 'meh']} />\r\n    </div>\r\n    <div className='timer'>{formatCount(secondsCount)}</div>\r\n  </div>;\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (fn, delay) => {\r\n  const fnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn])\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const intervalId = setInterval(() => {\r\n        fnRef.current();\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearInterval(intervalId);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React, { useReducer } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport reject from 'lodash/reject';\r\n\r\nimport { useField, useDidUpdate } from 'hooks';\r\n\r\nimport { isBustedCell, isFlaggedCell, isHiddenCell, isMinedCell } from 'utils/check-cell';\r\n\r\nimport { Field, Indicators } from '..';\r\n\r\nimport './Minesweeper.scss';\r\n\r\nconst actionType = {\r\n  Init: 'init',\r\n  HiddenMinesCountUpdate: 'hidden-mines-count-update',\r\n  Reset: 'reset',\r\n  Bust: 'bust',\r\n  Victory: 'victory',\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => type === actionType.Reset ? { ...payload } : produce(state, draft => {\r\n  switch (type) {\r\n    case actionType.Init:\r\n      draft.isInit = true;\r\n\r\n      break;\r\n    case actionType.HiddenMinesCountUpdate:\r\n      draft.hiddenMinesCount += payload;\r\n\r\n      break;\r\n    case actionType.Bust:\r\n      draft.isBust = true;\r\n\r\n      break;\r\n    case actionType.Victory:\r\n      draft.hiddenMinesCount = 0;\r\n      draft.isVictory = true;\r\n  }\r\n});\r\n\r\nexport const Minesweeper = ({ minesCount, fieldDimension }) => {\r\n  const initialState = { hiddenMinesCount: minesCount, isInit: false, isBust: false, isVictory: false };\r\n\r\n  const [{ hiddenMinesCount, isInit, isBust, isVictory }, dispatch] = useReducer(reducer, initialState);\r\n  const {\r\n    field,\r\n    reset,\r\n    init,\r\n    revealCell,\r\n    plantFlag,\r\n    revealNeighbors,\r\n    markMines,\r\n  } = useField({ minesCount, width: fieldDimension, height: fieldDimension });\r\n\r\n  const handleCellReveal = (cell, address) => {\r\n    if (isInit) revealCell(cell, address);\r\n    else {\r\n      init(address)\r\n      dispatch({ type: actionType.Init });\r\n    }\r\n  };\r\n\r\n  const handleFlagPlanting = (cell, address) => {\r\n    plantFlag(cell, address);\r\n    dispatch({ type: actionType.HiddenMinesCountUpdate, payload: isFlaggedCell(cell) ? 1 : -1 });\r\n  };\r\n\r\n  const handleSmileyFaceClick = () => {\r\n    reset();\r\n    dispatch({ type: actionType.Reset, payload: initialState });\r\n  };\r\n\r\n  useDidUpdate(() => {\r\n    if (field.some(isBustedCell)) dispatch({ type: actionType.Bust });\r\n    else if (!reject(field, isMinedCell).some(isHiddenCell)) {\r\n      markMines();\r\n      dispatch({ type: actionType.Victory });\r\n    }\r\n  }, field);\r\n\r\n  return <div className='minesweeper'>\r\n    <Indicators\r\n      minesCount={hiddenMinesCount}\r\n      isBust={isBust}\r\n      isVictory={isVictory}\r\n      shouldStartCountingSeconds={isInit && !(isBust || isVictory)}\r\n      smileyFaceClickHandler={handleSmileyFaceClick}\r\n    />\r\n\r\n    <Field\r\n      width={fieldDimension}\r\n      disabled={isBust || isVictory}\r\n      state={field}\r\n      cellRevealHandler={handleCellReveal}\r\n      flagPlantingHandler={handleFlagPlanting}\r\n      neighborsRevealHandler={revealNeighbors}\r\n    />\r\n  </div>;\r\n};\r\n","import { useState, useMemo } from 'react';\r\n\r\nimport produce from 'immer';\r\n\r\nimport difference from 'lodash/difference';\r\nimport range from 'lodash/range';\r\n\r\nimport { cellState, cellValue } from 'const';\r\n\r\nimport { CellNeighborsUtils } from 'view-models';\r\n\r\nimport { isMinedCell, isHiddenCell, isFlaggedCell } from 'utils/check-cell';\r\n\r\nexport const useField = ({ width, height, minesCount }) => {\r\n  const length = width * height;\r\n\r\n  const cellNeighborsUtils = useMemo(() => new CellNeighborsUtils(width, height), [length]);\r\n  const emptyField = useMemo(() => Array(length).fill({ value: cellValue.Empty, state: cellState.Hidden }), [length]);\r\n  const [field, setField] = useState(emptyField);\r\n\r\n  const getFloodFilledField = (address, draftFn) => produce(field, draft => {\r\n    /* eslint-disable-line */ draftFn?.(draft);\r\n    draft[address].state = cellState.Visible;\r\n\r\n    const floodFill = cellAdr => {\r\n      cellNeighborsUtils.canFloodFill(draft, cellAdr) && cellNeighborsUtils.getAddresses(cellAdr).forEach(adr => {\r\n        const cell = draft[adr];\r\n\r\n        if (!isMinedCell(cell) && isHiddenCell(cell) && !isFlaggedCell(cell)) {\r\n          cell.state = cellState.Visible;\r\n\r\n          floodFill(adr);\r\n        }\r\n      });\r\n    };\r\n\r\n    floodFill(address);\r\n  });\r\n\r\n  const getBustedField = draftFn => produce(field, draft => {\r\n    draftFn(draft);\r\n    draft.forEach((cell, adr) => {\r\n      isMinedCell(cell) && !isFlaggedCell(cell) && (cell.state = cellState.Visible);\r\n      !isMinedCell(cell) && isFlaggedCell(cell) && (draft[adr] = {\r\n        value: cellValue.IncorrectGuess,\r\n        state: cellState.Visible,\r\n      });\r\n    });\r\n  });\r\n\r\n  const reset = () => {\r\n    setField(emptyField);\r\n  };\r\n\r\n  const init = address => {\r\n    setField(getFloodFilledField(address, draft => {\r\n      const addresses = difference(range(length), [address, ...cellNeighborsUtils.getAddresses(address)]);\r\n      const randomAddresses = new Set;\r\n\r\n      while (randomAddresses.size < minesCount) randomAddresses.add(addresses[Math.random() * addresses.length | 0]);\r\n\r\n      randomAddresses.forEach(adr => {\r\n        draft[adr].value = cellValue.Mine;\r\n      });\r\n\r\n      draft.forEach((cell, adr) => {\r\n        !isMinedCell(cell) && (cell.value = cellNeighborsUtils.getMinedCount(draft, adr));\r\n      });\r\n    }));\r\n  };\r\n\r\n  const revealCell = (cell, address) => {\r\n    setField(isMinedCell(cell) ? getBustedField(draft => {\r\n      draft[address] = { value: cellValue.BustedMine, state: cellState.Visible };\r\n    }) : getFloodFilledField(address));\r\n  };\r\n\r\n  const plantFlag = (cell, address) => {\r\n    setField(produce(field, draft => {\r\n      draft[address].state = cellState[isFlaggedCell(cell) ? 'Hidden' : 'Flagged'];\r\n    }));\r\n  };\r\n\r\n  const revealNeighbors = address => {\r\n    if (cellNeighborsUtils.canFloodFill(field, address)) setField(getFloodFilledField(address));\r\n    else if (cellNeighborsUtils.canRevealNeighbors(field, address)) setField(getBustedField(draft => {\r\n      cellNeighborsUtils.getAddresses(address).forEach(adr => {\r\n        const cell = draft[adr];\r\n\r\n        isMinedCell(cell) && !isFlaggedCell(cell) && (cell.value = cellValue.BustedMine);\r\n        !isMinedCell(cell) && isFlaggedCell(cell) && (cell.value = cellValue.IncorrectGuess);\r\n\r\n        cell.state = cellState.Visible;\r\n      });\r\n    }));\r\n  };\r\n\r\n  const markMines = () => {\r\n    setField(produce(field, draft => {\r\n      draft.forEach(cell => {\r\n        isMinedCell(cell) && (cell.state = cellState.Flagged);\r\n      });\r\n    }));\r\n  };\r\n\r\n  return { field, reset, init, revealCell, plantFlag, revealNeighbors, markMines };\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useDidUpdate = (fn, ...deps) => {\r\n  const fnRef = useRef();\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    fnRef.current = fn;\r\n  }, [fn]);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) fnRef.current();\r\n    else didMount.current = true;\r\n  }, deps);\r\n};\r\n","import React from 'react';\r\n\r\nimport { Header, Minesweeper, Footer } from 'components';\r\n\r\nexport const App = () => <>\r\n  <Header />\r\n  <Minesweeper minesCount={30} fieldDimension={16} />\r\n  <Footer />\r\n</>;\r\n","import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { faFlag, faMeh, faFrown, faSmile } from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n","import React, { StrictMode }  from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport { App } from 'App';\r\n\r\nimport { setupIcons } from 'setupIcons';\r\n\r\nimport 'index.scss';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}