{"version":3,"sources":["constants/cell-appearance.ts","components/Footer/index.tsx","components/Header/index.tsx","contexts/minesweeper.ts","constants/cell-value.ts","utils/add-id.ts","constants/mine-fields-params.ts","hooks/use-did-update.ts","utils/cell-checker.ts","utils/mine-field-checker.ts","utils/index-utils.ts","utils/neighbors-utils.ts","hooks/use-mine-field.ts","components/Counter/index.tsx","components/Face/index.tsx","hooks/use-callback-ref.ts","hooks/use-interval.ts","containers/Indicators/index.tsx","components/Bomb/index.tsx","components/Cell/index.tsx","containers/MineField/index.tsx","components/Radio/index.tsx","containers/MineFieldParams/index.tsx","containers/Minesweeper/index.tsx","App.tsx","setup-icons.ts","index.tsx"],"names":["CellAppearance","Footer","className","href","target","rel","icon","Date","getFullYear","memo","Header","MinesweeperContext","createContext","mineField","mineFieldParams","mineFieldStatus","setMineFieldParams","setupMineField","revealCell","toggleFlag","revealNeighbors","reset","CellValue","addId","item","id","nanoid","smallMineFieldParams","name","rowsCount","columnsCount","minesCount","mineFieldsParams","useDidUpdate","fn","didMount","useRef","deps","useEffect","current","CellChecker","cell","key","value","this","isEqual","Empty","Mine","Hidden","Flagged","Wrong","Busted","isMined","isFlagged","MineFieldChecker","some","isBusted","reject","isHidden","IndexUtils","length","index","rowIndex","columnIndex","isValidArrayIndex","NeighborsUtils","indexUtils","to2D","indexes","rowIndexOffset","columnIndexOffset","targetRowIndex","targetColumnIndex","push","to1D","getIndexes","isUnrevealedMine","countMined","countBy","reduce","acc","useMineField","useState","mineFieldLength","emptyMineField","useMemo","Array","from","appearance","setMineField","initialMineFieldStatus","isSetup","isSolved","hiddenMinesCount","setMineFieldStatus","neighborsUtils","floodFill","callback","produce","draft","Visible","runFloodFill","canFloodFill","forEach","neighbor","mineFieldChecker","prevMineFieldStatus","prevMineField","restIndexes","difference","range","minedIndexes","Set","size","add","Math","floor","random","canReveal","neighborsIndexes","has","formatCount","count","toString","Counter","Face","onClick","type","useCallbackRef","callbackRef","useCallback","args","call","useInterval","delay","intervalId","setInterval","clearInterval","getFaceIcon","Indicators","useContext","secondsCount","setSecondsCount","handleFaceClick","Bomb","Cell","onMouseDown","onContextMenu","isEmpty","isWrong","visibleClassName","handleContextMenu","aria-label","classNames","event","MineField","rowClassName","handleCellClick","handleCellMouseDown","nativeEvent","addEventListener","handleMouseUp","which","removeEventListener","handleCellContextMenu","style","width","preventDefault","map","Radio","checked","onChange","defaultChecked","MineFieldParams","itemClassName","handleMineFieldPropsChange","props","Minesweeper","Provider","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","setupIcons","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b8c9313.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\r\nenum CellAppearance {\r\n  Hidden,\r\n  Visible,\r\n  Flagged,\r\n  Busted,\r\n  Wrong,\r\n}\r\n\r\nexport default CellAppearance;\r\n","import './Footer.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nconst Footer = () => {\r\n  const className = 'Footer';\r\n\r\n  return (\r\n    <footer className={className}>\r\n      <span>\r\n        Powered by\r\n        <a\r\n          className={`${className}Link`}\r\n          href=\"https://github.com/FakeMetalFan\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <FontAwesomeIcon icon={['fab', 'github']} />\r\n        </a>\r\n        &copy;\r\n        <span>{new Date().getFullYear()}</span>\r\n      </span>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default memo(Footer);\r\n","import './Header.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\nconst Header = () => {\r\n  const className = 'Header';\r\n\r\n  return (\r\n    <header className={className}>\r\n      <span className={`${className}Title`}>Minesweeper</span>\r\n\r\n      <a\r\n        className={`${className}Link`}\r\n        href=\"https://github.com/FakeMetalFan/minesweeper\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <FontAwesomeIcon icon={['fab', 'github']} />\r\n      </a>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default memo(Header);\r\n","import useMineField from 'hooks/use-mine-field';\r\nimport { createContext } from 'react';\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\nconst MinesweeperContext = createContext<ReturnType<typeof useMineField>>({\r\n  mineField: [],\r\n  mineFieldParams: {} as MineFieldParams,\r\n  mineFieldStatus: {} as MineFieldStatus,\r\n  setMineFieldParams: () => {},\r\n  setupMineField: () => {},\r\n  revealCell: () => {},\r\n  toggleFlag: () => {},\r\n  revealNeighbors: () => {},\r\n  reset: () => {},\r\n});\r\n\r\nexport default MinesweeperContext;\r\n","// eslint-disable-next-line no-shadow\r\nenum CellValue {\r\n  Empty,\r\n  One,\r\n  Two,\r\n  Three,\r\n  Four,\r\n  Five,\r\n  Six,\r\n  Seven,\r\n  Eight,\r\n  Mine,\r\n}\r\n\r\nexport default CellValue;\r\n","import { nanoid } from 'nanoid';\r\n\r\nconst addId = <T extends Record<string, unknown>>(item: T) => ({\r\n  ...item,\r\n  id: nanoid(),\r\n});\r\n\r\nexport default addId;\r\n","import addId from 'utils/add-id';\r\n\r\nexport const smallMineFieldParams = addId({\r\n  name: 'Beginner',\r\n  rowsCount: 9,\r\n  columnsCount: 9,\r\n  minesCount: 9,\r\n});\r\n\r\nconst mineFieldsParams = [\r\n  smallMineFieldParams,\r\n  addId({\r\n    name: 'Intermediate',\r\n    rowsCount: 16,\r\n    columnsCount: 16,\r\n    minesCount: 40,\r\n  }),\r\n  addId({\r\n    name: 'Expert',\r\n    rowsCount: 30,\r\n    columnsCount: 16,\r\n    minesCount: 99,\r\n  }),\r\n];\r\n\r\nexport default mineFieldsParams;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nconst useDidUpdate = (fn: () => void, ...deps: unknown[]) => {\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      fn();\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, deps);\r\n};\r\n\r\nexport default useDidUpdate;\r\n","import CellAppearance from 'constants/cell-appearance';\r\nimport CellValue from 'constants/cell-value';\r\n\r\nclass CellChecker {\r\n  constructor(private cell: Cell) {}\r\n\r\n  private isEqual(key: keyof Cell, value: Cell[keyof Cell]) {\r\n    return this.cell[key] === value;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.isEqual('value', CellValue.Empty);\r\n  }\r\n\r\n  get isMined() {\r\n    return this.isEqual('value', CellValue.Mine);\r\n  }\r\n\r\n  get isHidden() {\r\n    return this.isEqual('appearance', CellAppearance.Hidden);\r\n  }\r\n\r\n  get isFlagged() {\r\n    return this.isEqual('appearance', CellAppearance.Flagged);\r\n  }\r\n\r\n  get isWrong() {\r\n    return this.isEqual('appearance', CellAppearance.Wrong);\r\n  }\r\n\r\n  get isBusted() {\r\n    return this.isEqual('appearance', CellAppearance.Busted);\r\n  }\r\n\r\n  get isUnrevealedMine() {\r\n    return this.isMined && !this.isFlagged;\r\n  }\r\n}\r\n\r\nexport default CellChecker;\r\n","import { reject } from 'lodash-es';\r\nimport CellChecker from 'utils/cell-checker';\r\n\r\nclass MineFieldChecker {\r\n  constructor(private mineField: Cell[]) {}\r\n\r\n  isBusted() {\r\n    return this.mineField.some((cell) => new CellChecker(cell).isBusted);\r\n  }\r\n\r\n  isSolved() {\r\n    return !reject(\r\n      this.mineField,\r\n      (cell) => new CellChecker(cell).isMined\r\n    ).some((cell) => new CellChecker(cell).isHidden);\r\n  }\r\n}\r\n\r\nexport default MineFieldChecker;\r\n","class IndexUtils {\r\n  constructor(private length: number) {}\r\n\r\n  to2D(index: number) {\r\n    const rowIndex = index % this.length;\r\n\r\n    return { rowIndex, columnIndex: (index - rowIndex) / this.length };\r\n  }\r\n\r\n  to1D(rowIndex: number, columnIndex: number) {\r\n    return columnIndex * this.length + rowIndex;\r\n  }\r\n}\r\n\r\nexport default IndexUtils;\r\n","import CellChecker from 'utils/cell-checker';\r\nimport IndexUtils from 'utils/index-utils';\r\n\r\nconst isValidArrayIndex = (index: number, length: number) =>\r\n  index > -1 && index < length;\r\n\r\nclass NeighborsUtils {\r\n  constructor(\r\n    private rowsCount: number,\r\n    private columnsCount: number,\r\n    private indexUtils = new IndexUtils(rowsCount)\r\n  ) {}\r\n\r\n  getIndexes({ index }: Cell) {\r\n    const { rowIndex, columnIndex } = this.indexUtils.to2D(index);\r\n    const indexes = [];\r\n\r\n    for (let rowIndexOffset = -1; rowIndexOffset < 2; rowIndexOffset += 1) {\r\n      for (\r\n        let columnIndexOffset = -1;\r\n        columnIndexOffset < 2;\r\n        columnIndexOffset += 1\r\n      ) {\r\n        if (rowIndexOffset || columnIndexOffset) {\r\n          const targetRowIndex = rowIndex + rowIndexOffset;\r\n          const targetColumnIndex = columnIndex + columnIndexOffset;\r\n\r\n          if (\r\n            isValidArrayIndex(targetRowIndex, this.rowsCount) &&\r\n            isValidArrayIndex(targetColumnIndex, this.columnsCount)\r\n          ) {\r\n            indexes.push(\r\n              this.indexUtils.to1D(targetRowIndex, targetColumnIndex)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return indexes;\r\n  }\r\n\r\n  canFloodFill(mineField: Cell[], cell: Cell) {\r\n    return !this.getIndexes(cell).some(\r\n      (index) => new CellChecker(mineField[index]).isUnrevealedMine\r\n    );\r\n  }\r\n\r\n  canReveal(mineField: Cell[], cell: Cell) {\r\n    return (\r\n      this.countMined(mineField, cell) ===\r\n      this.countBy(mineField, cell, 'isFlagged')\r\n    );\r\n  }\r\n\r\n  countMined(mineField: Cell[], cell: Cell) {\r\n    return this.countBy(mineField, cell, 'isMined');\r\n  }\r\n\r\n  private countBy(mineField: Cell[], cell: Cell, key: keyof CellChecker) {\r\n    return this.getIndexes(cell).reduce(\r\n      (acc, index) => (new CellChecker(mineField[index])[key] ? acc + 1 : acc),\r\n      0\r\n    );\r\n  }\r\n}\r\n\r\nexport default NeighborsUtils;\r\n","import CellAppearance from 'constants/cell-appearance';\r\nimport CellValue from 'constants/cell-value';\r\nimport { smallMineFieldParams } from 'constants/mine-fields-params';\r\nimport useDidUpdate from 'hooks/use-did-update';\r\nimport produce, { Draft } from 'immer';\r\nimport { difference, range } from 'lodash-es';\r\nimport { useMemo, useState } from 'react';\r\nimport addId from 'utils/add-id';\r\nimport CellChecker from 'utils/cell-checker';\r\nimport MineFieldChecker from 'utils/mine-field-checker';\r\nimport NeighborsUtils from 'utils/neighbors-utils';\r\n\r\n/* eslint-disable no-param-reassign */\r\nconst useMineField = () => {\r\n  const [mineFieldParams, setMineFieldParams] = useState(smallMineFieldParams);\r\n\r\n  const { rowsCount, columnsCount, minesCount } = mineFieldParams;\r\n  const mineFieldLength = rowsCount * columnsCount;\r\n\r\n  const emptyMineField = useMemo(\r\n    () =>\r\n      Array.from({ length: mineFieldLength }, (item, index) =>\r\n        addId({\r\n          index,\r\n          value: CellValue.Empty,\r\n          appearance: CellAppearance.Hidden,\r\n        })\r\n      ),\r\n    [mineFieldLength]\r\n  );\r\n\r\n  const [mineField, setMineField] = useState(emptyMineField);\r\n\r\n  const initialMineFieldStatus = {\r\n    isSetup: false,\r\n    isBusted: false,\r\n    isSolved: false,\r\n    hiddenMinesCount: minesCount,\r\n  };\r\n\r\n  const [mineFieldStatus, setMineFieldStatus] = useState(\r\n    initialMineFieldStatus\r\n  );\r\n\r\n  const neighborsUtils = new NeighborsUtils(rowsCount, columnsCount);\r\n\r\n  const floodFill = (cell: Cell, callback?: (draft: Draft<Cell[]>) => void) =>\r\n    produce(mineField, (draft) => {\r\n      callback?.(draft);\r\n      draft[cell.index].appearance = CellAppearance.Visible;\r\n\r\n      (function runFloodFill(item: Cell) {\r\n        if (neighborsUtils.canFloodFill(draft, item)) {\r\n          neighborsUtils.getIndexes(item).forEach((index) => {\r\n            const neighbor = draft[index];\r\n            const { isMined, isHidden, isFlagged } = new CellChecker(neighbor);\r\n\r\n            if (!isMined && isHidden && !isFlagged) {\r\n              neighbor.appearance = CellAppearance.Visible;\r\n\r\n              runFloodFill(neighbor);\r\n            }\r\n          });\r\n        }\r\n      })(cell);\r\n    });\r\n\r\n  const setupMineField = (cell: Cell) => {\r\n    setMineField(\r\n      floodFill(cell, (draft) => {\r\n        const restIndexes = difference(range(mineFieldLength), [\r\n          cell.index,\r\n          ...neighborsUtils.getIndexes(cell),\r\n        ]);\r\n        const minedIndexes = new Set<number>();\r\n\r\n        while (minedIndexes.size < minesCount) {\r\n          minedIndexes.add(\r\n            restIndexes[Math.floor(Math.random() * restIndexes.length)]\r\n          );\r\n        }\r\n\r\n        minedIndexes.forEach((index) => {\r\n          draft[index].value = CellValue.Mine;\r\n        });\r\n\r\n        draft.forEach((item) => {\r\n          if (!new CellChecker(item).isMined) {\r\n            item.value = neighborsUtils.countMined(draft, item);\r\n          }\r\n        });\r\n      })\r\n    );\r\n\r\n    setMineFieldStatus((prevMineFieldStatus) => ({\r\n      ...prevMineFieldStatus,\r\n      isSetup: true,\r\n    }));\r\n  };\r\n\r\n  const revealCell = (cell: Cell) => {\r\n    setMineField(\r\n      new CellChecker(cell).isMined\r\n        ? produce(mineField, (draft) => {\r\n            draft.forEach((item, index) => {\r\n              if (index === cell.index) {\r\n                item.appearance = CellAppearance.Busted;\r\n              } else if (new CellChecker(item).isMined) {\r\n                item.appearance = CellAppearance.Visible;\r\n              }\r\n            });\r\n          })\r\n        : floodFill(cell)\r\n    );\r\n  };\r\n\r\n  const toggleFlag = (cell: Cell) => {\r\n    const { isFlagged } = new CellChecker(cell);\r\n\r\n    setMineField((prevMineField) =>\r\n      produce(prevMineField, (draft) => {\r\n        draft[cell.index].appearance = isFlagged\r\n          ? CellAppearance.Hidden\r\n          : CellAppearance.Flagged;\r\n      })\r\n    );\r\n\r\n    setMineFieldStatus((prevMineFieldStatus) =>\r\n      produce(prevMineFieldStatus, (draft) => {\r\n        draft.hiddenMinesCount += isFlagged ? 1 : -1;\r\n      })\r\n    );\r\n  };\r\n\r\n  const revealNeighbors = (cell: Cell) => {\r\n    if (neighborsUtils.canFloodFill(mineField, cell)) {\r\n      setMineField(floodFill(cell));\r\n    } else if (neighborsUtils.canReveal(mineField, cell)) {\r\n      setMineField(\r\n        produce(mineField, (draft) => {\r\n          const neighborsIndexes = new Set(neighborsUtils.getIndexes(cell));\r\n\r\n          draft.forEach((item, index) => {\r\n            const { isMined, isFlagged, isUnrevealedMine } = new CellChecker(\r\n              item\r\n            );\r\n\r\n            if (neighborsIndexes.has(index)) {\r\n              if (!isMined && isFlagged) {\r\n                item.appearance = CellAppearance.Wrong;\r\n              } else if (isUnrevealedMine) {\r\n                item.appearance = CellAppearance.Busted;\r\n              } else {\r\n                item.appearance = CellAppearance.Visible;\r\n              }\r\n            } else if (isMined) {\r\n              item.appearance = CellAppearance.Visible;\r\n            }\r\n          });\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setMineField(emptyMineField);\r\n    setMineFieldStatus(initialMineFieldStatus);\r\n  };\r\n\r\n  useDidUpdate(() => {\r\n    reset();\r\n  }, emptyMineField);\r\n\r\n  useDidUpdate(() => {\r\n    const mineFieldChecker = new MineFieldChecker(mineField);\r\n\r\n    if (mineFieldChecker.isBusted()) {\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isBusted: true,\r\n      }));\r\n    } else if (mineFieldChecker.isSolved()) {\r\n      setMineField((prevMineField) =>\r\n        produce(prevMineField, (draft) => {\r\n          draft.forEach((cell) => {\r\n            if (new CellChecker(cell).isMined) {\r\n              cell.appearance = CellAppearance.Flagged;\r\n            }\r\n          });\r\n        })\r\n      );\r\n\r\n      setMineFieldStatus((prevMineFieldStatus) => ({\r\n        ...prevMineFieldStatus,\r\n        isSolved: true,\r\n        hiddenMinesCount: 0,\r\n      }));\r\n    }\r\n  }, mineField);\r\n\r\n  return {\r\n    mineField,\r\n    mineFieldParams,\r\n    mineFieldStatus,\r\n    setMineFieldParams,\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n    reset,\r\n  };\r\n};\r\n\r\nexport default useMineField;\r\n","import React, { memo } from 'react';\r\n\r\nconst formatCount = (count: number) => {\r\n  if (count < 1) {\r\n    return '000';\r\n  }\r\n\r\n  if (count < 10) {\r\n    return `00${count}`;\r\n  }\r\n\r\n  if (count < 100) {\r\n    return `0${count}`;\r\n  }\r\n\r\n  return count.toString();\r\n};\r\n\r\nconst Counter = ({ count }: { count: number }) => (\r\n  <div className=\"Counter\">{formatCount(count)}</div>\r\n);\r\n\r\nexport default memo(Counter);\r\n","import './Face.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { memo } from 'react';\r\n\r\ninterface Props {\r\n  icon?: JSX.Element;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst Face = ({\r\n  icon = <FontAwesomeIcon icon={['far', 'meh']} />,\r\n  onClick,\r\n}: Props) => (\r\n  <button type=\"button\" className=\"Face\" onClick={onClick}>\r\n    {icon}\r\n  </button>\r\n);\r\n\r\nexport default memo(Face);\r\n","import { useCallback, useEffect, useRef } from 'react';\r\n\r\ntype Callback = (...args: never[]) => void;\r\n\r\nconst useCallbackRef = (callback: Callback) => {\r\n  const callbackRef = useRef<Callback>();\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  });\r\n\r\n  return useCallback((...args: []) => {\r\n    callbackRef.current?.(...args);\r\n  }, []);\r\n};\r\n\r\nexport default useCallbackRef;\r\n","import { useEffect, useRef } from 'react';\r\n\r\ntype Callback = () => void;\r\n\r\nconst useInterval = (callback: Callback, delay?: number) => {\r\n  const callbackRef = useRef<Callback>();\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!delay) {\r\n      return void 0;\r\n    }\r\n\r\n    const intervalId = setInterval(() => {\r\n      callbackRef.current?.();\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [delay]);\r\n};\r\n\r\nexport default useInterval;\r\n","import './Indicators.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Counter from 'components/Counter';\r\nimport Face from 'components/Face';\r\nimport MinesweeperContext from 'contexts/minesweeper';\r\nimport useCallbackRef from 'hooks/use-callback-ref';\r\nimport useDidUpdate from 'hooks/use-did-update';\r\nimport useInterval from 'hooks/use-interval';\r\nimport React, { useContext, useState } from 'react';\r\n\r\nconst getFaceIcon = ({ isSolved, isBusted }: MineFieldStatus) => {\r\n  if (isSolved) {\r\n    return <FontAwesomeIcon icon={['far', 'smile']} />;\r\n  }\r\n\r\n  if (isBusted) {\r\n    return <FontAwesomeIcon icon={['far', 'frown']} />;\r\n  }\r\n\r\n  return void 0;\r\n};\r\n\r\nconst Indicators = () => {\r\n  const { mineFieldStatus, mineFieldParams, reset } = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const { isSetup, isSolved, isBusted, hiddenMinesCount } = mineFieldStatus;\r\n\r\n  const [secondsCount, setSecondsCount] = useState(0);\r\n\r\n  const handleFaceClick = useCallbackRef(() => {\r\n    setSecondsCount(0);\r\n    reset();\r\n  });\r\n\r\n  useInterval(\r\n    () => {\r\n      setSecondsCount(secondsCount + 1);\r\n    },\r\n    isSetup && !(isSolved || isBusted) ? 1e3 : void 0\r\n  );\r\n\r\n  useDidUpdate(() => {\r\n    setSecondsCount(0);\r\n  }, mineFieldParams);\r\n\r\n  return (\r\n    <div className=\"Indicators\">\r\n      <Counter count={hiddenMinesCount} />\r\n      <Face icon={getFaceIcon(mineFieldStatus)} onClick={handleFaceClick} />\r\n      <Counter count={secondsCount} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Indicators;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\nconst Bomb = ({ className }: { className?: string }) => (\r\n  <button type=\"button\" className={className}>\r\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\r\n  </button>\r\n);\r\n\r\nexport default Bomb;\r\n","import './Cell.scss';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport classNames from 'classnames';\r\nimport React, { memo, SyntheticEvent } from 'react';\r\nimport CellChecker from 'utils/cell-checker';\r\n\r\nimport Bomb from '../Bomb';\r\n\r\ninterface Props {\r\n  cell: Cell;\r\n  onClick?: (cell: Cell) => void;\r\n  onMouseDown?: (event: SyntheticEvent<HTMLButtonElement>, cell: Cell) => void;\r\n  onContextMenu?: (cell: Cell) => void;\r\n}\r\n\r\nconst Cell = ({ cell, onClick, onMouseDown, onContextMenu }: Props) => {\r\n  const {\r\n    isHidden,\r\n    isEmpty,\r\n    isFlagged,\r\n    isMined,\r\n    isWrong,\r\n    isBusted,\r\n  } = new CellChecker(cell);\r\n\r\n  const { value } = cell;\r\n\r\n  const className = 'Cell';\r\n  const visibleClassName = `${className} ${className}__visible`;\r\n\r\n  const handleClick = () => {\r\n    onClick?.(cell);\r\n  };\r\n\r\n  const handleContextMenu = () => {\r\n    onContextMenu?.(cell);\r\n  };\r\n\r\n  const handleMouseDown = (event: SyntheticEvent<HTMLButtonElement>) => {\r\n    onMouseDown?.(event, cell);\r\n  };\r\n\r\n  if (isHidden) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"Cell\"\r\n        className={className}\r\n        onClick={handleClick}\r\n        onContextMenu={handleContextMenu}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isFlagged) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className={className}\r\n        onContextMenu={handleContextMenu}\r\n      >\r\n        <FontAwesomeIcon icon={['far', 'flag']} />\r\n      </button>\r\n    );\r\n  }\r\n\r\n  if (isEmpty) {\r\n    return (\r\n      <button type=\"button\" aria-label=\"Cell\" className={visibleClassName} />\r\n    );\r\n  }\r\n\r\n  if (isBusted) {\r\n    return <Bomb className={classNames(className, `${className}__busted`)} />;\r\n  }\r\n\r\n  if (isMined) {\r\n    return <Bomb className={visibleClassName} />;\r\n  }\r\n\r\n  if (isWrong) {\r\n    return (\r\n      <Bomb className={classNames(visibleClassName, `${className}__wrong`)} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={classNames(visibleClassName, `${className}__${value}`)}\r\n      onMouseDown={handleMouseDown}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(Cell);\r\n","import './MineField.scss';\r\n\r\nimport classNames from 'classnames';\r\nimport Cell from 'components/Cell';\r\nimport MinesweeperContext from 'contexts/minesweeper';\r\nimport useCallbackRef from 'hooks/use-callback-ref';\r\nimport React, { SyntheticEvent, useContext } from 'react';\r\n\r\nconst MineField = () => {\r\n  const {\r\n    mineFieldParams: { rowsCount },\r\n    mineField,\r\n    mineFieldStatus: { isSetup, isBusted, isSolved },\r\n    setupMineField,\r\n    revealCell,\r\n    toggleFlag,\r\n    revealNeighbors,\r\n  } = useContext(MinesweeperContext);\r\n\r\n  const className = 'MineField';\r\n  const rowClassName = `${className}Row`;\r\n\r\n  const cellSize = 32;\r\n\r\n  const handleContextMenu = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleCellClick = useCallbackRef((cell: Cell) => {\r\n    (isSetup ? revealCell : setupMineField)(cell);\r\n  });\r\n\r\n  const handleCellMouseDown = useCallbackRef(\r\n    (\r\n      { target, nativeEvent }: SyntheticEvent<HTMLButtonElement>,\r\n      cell: Cell\r\n    ) => {\r\n      const handleMouseUp = (event: Event) => {\r\n        if ((nativeEvent as MouseEvent).which !== (event as MouseEvent).which) {\r\n          revealNeighbors(cell);\r\n        }\r\n\r\n        target.removeEventListener('mouseup', handleMouseUp);\r\n      };\r\n\r\n      target.addEventListener('mouseup', handleMouseUp);\r\n    }\r\n  );\r\n\r\n  const handleCellContextMenu = useCallbackRef((cell: Cell) => {\r\n    toggleFlag(cell);\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={className}\r\n      style={{ width: rowsCount * cellSize }}\r\n      onContextMenu={handleContextMenu}\r\n    >\r\n      <div\r\n        className={classNames(rowClassName, `${rowClassName}__${rowsCount}`, {\r\n          [`${rowClassName}__disabled`]: isBusted || isSolved,\r\n        })}\r\n      >\r\n        {mineField.map((cell) => (\r\n          <Cell\r\n            cell={cell}\r\n            onClick={handleCellClick}\r\n            onMouseDown={handleCellMouseDown}\r\n            onContextMenu={handleCellContextMenu}\r\n            key={cell.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MineField;\r\n","import React, { memo } from 'react';\r\n\r\ninterface Props<T> {\r\n  item: T;\r\n  name: string;\r\n  checked?: boolean;\r\n  className?: string;\r\n  onChange?: (item: T) => void;\r\n}\r\n\r\nconst Radio = <T extends { name: string }>({\r\n  item,\r\n  name,\r\n  checked,\r\n  className,\r\n  onChange,\r\n}: Props<T>) => {\r\n  const handleChange = () => {\r\n    onChange?.(item);\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <input\r\n        type=\"radio\"\r\n        name={name}\r\n        className={`${className}Radio`}\r\n        defaultChecked={checked}\r\n        onChange={handleChange}\r\n      />\r\n      {item.name}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Radio) as typeof Radio;\r\n","import './MineFieldParams.scss';\r\n\r\nimport Radio from 'components/Radio';\r\nimport mineFieldsParams from 'constants/mine-fields-params';\r\nimport MinesweeperContext from 'contexts/minesweeper';\r\nimport useCallbackRef from 'hooks/use-callback-ref';\r\nimport React, { useContext } from 'react';\r\n\r\nconst MineFieldParams = () => {\r\n  const { mineFieldParams, setMineFieldParams } = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const className = 'MineFieldProps';\r\n  const itemClassName = `${className}Item`;\r\n\r\n  const handleMineFieldPropsChange = useCallbackRef(\r\n    (props: MineFieldParams) => {\r\n      setMineFieldParams(props);\r\n    }\r\n  );\r\n\r\n  return (\r\n    <form className={className}>\r\n      {mineFieldsParams.map((item) => {\r\n        const { name, id } = item;\r\n\r\n        return (\r\n          <Radio\r\n            item={item}\r\n            name=\"MineFieldProps\"\r\n            className={itemClassName}\r\n            checked={name === mineFieldParams.name}\r\n            onChange={handleMineFieldPropsChange}\r\n            key={id}\r\n          />\r\n        );\r\n      })}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MineFieldParams;\r\n","import './Minesweeper.scss';\r\n\r\nimport Footer from 'components/Footer';\r\nimport Header from 'components/Header';\r\nimport MinesweeperContext from 'contexts/minesweeper';\r\nimport useMineField from 'hooks/use-mine-field';\r\nimport React from 'react';\r\n\r\nimport Indicators from '../Indicators';\r\nimport MineField from '../MineField';\r\nimport MineFieldParams from '../MineFieldParams';\r\n\r\nconst Minesweeper = () => (\r\n  <MinesweeperContext.Provider value={{ ...useMineField() }}>\r\n    <Header />\r\n\r\n    <main className=\"Minesweeper\">\r\n      <Indicators />\r\n      <MineField />\r\n      <MineFieldParams />\r\n    </main>\r\n\r\n    <Footer />\r\n  </MinesweeperContext.Provider>\r\n);\r\n\r\nexport default Minesweeper;\r\n","import Minesweeper from 'containers/Minesweeper';\r\nimport React from 'react';\r\n\r\nconst App = () => <Minesweeper />;\r\n\r\nexport default App;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport {\r\n  faFlag,\r\n  faFrown,\r\n  faMeh,\r\n  faSmile,\r\n} from '@fortawesome/free-regular-svg-icons';\r\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst setupIcons = () => {\r\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\r\n};\r\n\r\nexport default setupIcons;\r\n","import 'index.scss';\r\n\r\nimport App from 'App';\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport setupIcons from 'setup-icons';\r\n\r\nsetupIcons();\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}